{
  "version": 3,
  "sources": ["../src/StorageManager.ts", "../src/constants/OIDCDiscoveryConstants.ts", "../src/constants/ScopeConstants.ts", "../src/constants/OIDCRequestConstants.ts", "../src/errors/exception.ts", "../src/constants/TokenConstants.ts", "../src/IsomorphicCrypto.ts", "../src/constants/PKCEConstants.ts", "../src/utils/extractPkceStorageKeyFromState.ts", "../src/constants/TokenExchangeConstants.ts", "../src/utils/extractUserClaimsFromIdToken.ts", "../src/errors/AsgardeoError.ts", "../src/errors/AsgardeoRuntimeError.ts", "../src/utils/processOpenIDScopes.ts", "../src/__legacy__/helpers/authentication-helper.ts", "../src/utils/generatePkceStorageKey.ts", "../src/utils/generateStateParamForRequestCorrelation.ts", "../src/utils/getAuthorizeRequestUrlParams.ts", "../src/__legacy__/client.ts", "../src/errors/AsgardeoAPIError.ts", "../src/api/initializeEmbeddedSignInFlow.ts", "../src/api/executeEmbeddedSignInFlow.ts", "../src/models/embedded-flow.ts", "../src/api/executeEmbeddedSignUpFlow.ts", "../src/api/getUserInfo.ts", "../src/utils/processUsername.ts", "../src/api/getScim2Me.ts", "../src/api/getSchemas.ts", "../src/api/getAllOrganizations.ts", "../src/api/createOrganization.ts", "../src/api/getMeOrganizations.ts", "../src/api/getOrganization.ts", "../src/utils/isEmpty.ts", "../src/api/updateOrganization.ts", "../src/api/updateMeProfile.ts", "../src/api/getBrandingPreference.ts", "../src/constants/ApplicationNativeAuthenticationConstants.ts", "../src/constants/VendorConstants.ts", "../src/models/embedded-signin-flow.ts", "../src/models/flow.ts", "../src/models/scim2-schema.ts", "../src/models/field.ts", "../src/AsgardeoJavaScriptClient.ts", "../src/theme/createTheme.ts", "../src/utils/deepMerge.ts", "../src/utils/deriveOrganizationHandleFromBaseUrl.ts", "../src/utils/flattenUserSchema.ts", "../src/utils/get.ts", "../src/utils/set.ts", "../src/utils/generateUserProfile.ts", "../src/utils/getLatestStateParam.ts", "../src/utils/generateFlattenedUserProfile.ts", "../src/i18n/index.ts", "../src/i18n/en-US.ts", "../src/utils/getI18nBundles.ts", "../src/utils/removeTrailingSlash.ts", "../src/utils/resolveFieldType.ts", "../src/utils/resolveFieldName.ts", "../src/utils/withVendorCSSClassPrefix.ts", "../src/utils/transformBrandingPreferenceToTheme.ts"],
  "sourcesContent": ["/**\n * Copyright (c) 2020, WSO2 LLC. (https://www.wso2.com). All Rights Reserved.\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport {Stores} from './models/store';\nimport {Storage} from './models/store';\nimport {AuthClientConfig} from './__legacy__/models';\nimport {SessionData} from './models/session';\nimport {TemporaryStore, TemporaryStoreValue} from './models/store';\nimport {OIDCDiscoveryApiResponse} from './models/oidc-discovery';\n\ntype PartialData<T> = Partial<AuthClientConfig<T> | OIDCDiscoveryApiResponse | SessionData | TemporaryStore>;\n\nexport const ASGARDEO_SESSION_ACTIVE: string = 'asgardeo-session-active';\n\nclass StorageManager<T> {\n  protected _id: string;\n  protected _store: Storage;\n  public constructor(instanceID: string, store: Storage) {\n    this._id = instanceID;\n    this._store = store;\n  }\n\n  protected async setDataInBulk(key: string, data: PartialData<T>): Promise<void> {\n    const existingDataJSON: string = (await this._store.getData(key)) ?? null;\n    const existingData: PartialData<T> = existingDataJSON && JSON.parse(existingDataJSON);\n\n    const dataToBeSaved: PartialData<T> = {...existingData, ...data};\n    const dataToBeSavedJSON: string = JSON.stringify(dataToBeSaved);\n\n    await this._store.setData(key, dataToBeSavedJSON);\n  }\n\n  protected async setValue(\n    key: string,\n    attribute: keyof AuthClientConfig<T> | keyof OIDCDiscoveryApiResponse | keyof SessionData | keyof TemporaryStore,\n    value: TemporaryStoreValue,\n  ): Promise<void> {\n    const existingDataJSON: string = (await this._store.getData(key)) ?? null;\n    const existingData: PartialData<T> = existingDataJSON && JSON.parse(existingDataJSON);\n\n    const dataToBeSaved: PartialData<T> = {...existingData, [attribute]: value};\n    const dataToBeSavedJSON: string = JSON.stringify(dataToBeSaved);\n\n    await this._store.setData(key, dataToBeSavedJSON);\n  }\n\n  protected async removeValue(\n    key: string,\n    attribute: keyof AuthClientConfig<T> | keyof OIDCDiscoveryApiResponse | keyof SessionData | keyof TemporaryStore,\n  ): Promise<void> {\n    const existingDataJSON: string = (await this._store.getData(key)) ?? null;\n    const existingData: PartialData<T> = existingDataJSON && JSON.parse(existingDataJSON);\n\n    const dataToBeSaved: PartialData<T> = {...existingData};\n\n    delete dataToBeSaved[attribute as string];\n\n    const dataToBeSavedJSON: string = JSON.stringify(dataToBeSaved);\n\n    await this._store.setData(key, dataToBeSavedJSON);\n  }\n\n  protected _resolveKey(store: Stores | string, userId?: string): string {\n    return userId ? `${store}-${this._id}-${userId}` : `${store}-${this._id}`;\n  }\n\n  protected isLocalStorageAvailable(): boolean {\n    try {\n      const testValue: string = '__ASGARDEO_AUTH_CORE_LOCAL_STORAGE_TEST__';\n\n      localStorage.setItem(testValue, testValue);\n      localStorage.removeItem(testValue);\n\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  public async setConfigData(config: Partial<AuthClientConfig<T>>): Promise<void> {\n    await this.setDataInBulk(this._resolveKey(Stores.ConfigData), config);\n  }\n\n  public async setOIDCProviderMetaData(oidcProviderMetaData: Partial<OIDCDiscoveryApiResponse>): Promise<void> {\n    this.setDataInBulk(this._resolveKey(Stores.OIDCProviderMetaData), oidcProviderMetaData);\n  }\n\n  public async setTemporaryData(temporaryData: Partial<TemporaryStore>, userId?: string): Promise<void> {\n    this.setDataInBulk(this._resolveKey(Stores.TemporaryData, userId), temporaryData);\n  }\n\n  public async setSessionData(sessionData: Partial<SessionData>, userId?: string): Promise<void> {\n    this.setDataInBulk(this._resolveKey(Stores.SessionData, userId), sessionData);\n  }\n\n  public async setCustomData<K>(key: string, customData: Partial<K>, userId?: string): Promise<void> {\n    this.setDataInBulk(this._resolveKey(key, userId), customData);\n  }\n\n  public async getConfigData(userId?: string): Promise<AuthClientConfig<T>> {\n        return JSON.parse((await this._store.getData(this._resolveKey(Stores.ConfigData, userId))) ?? null);\n  }\n\n  public async loadOpenIDProviderConfiguration(): Promise<OIDCDiscoveryApiResponse> {\n    return JSON.parse((await this._store.getData(this._resolveKey(Stores.OIDCProviderMetaData))) ?? null);\n  }\n\n  public async getTemporaryData(userId?: string): Promise<TemporaryStore> {\n    return JSON.parse((await this._store.getData(this._resolveKey(Stores.TemporaryData, userId))) ?? null);\n  }\n\n  public async getSessionData(userId?: string): Promise<SessionData> {\n    return JSON.parse((await this._store.getData(this._resolveKey(Stores.SessionData, userId))) ?? null);\n  }\n\n  public async getCustomData<K>(key: string, userId?: string): Promise<K> {\n    return JSON.parse((await this._store.getData(this._resolveKey(key, userId))) ?? null);\n  }\n\n  public setSessionStatus(status: string): void {\n    // Using local storage to store the session status as it is required to be available across tabs.\n    this.isLocalStorageAvailable() && localStorage.setItem(`${ASGARDEO_SESSION_ACTIVE}`, status);\n  }\n\n  public getSessionStatus(): string {\n    return this.isLocalStorageAvailable() ? localStorage.getItem(`${ASGARDEO_SESSION_ACTIVE}`) ?? '' : '';\n  }\n\n  public removeSessionStatus(): void {\n    this.isLocalStorageAvailable() && localStorage.removeItem(`${ASGARDEO_SESSION_ACTIVE}`);\n  }\n\n  public async removeConfigData(): Promise<void> {\n    await this._store.removeData(this._resolveKey(Stores.ConfigData));\n  }\n\n  public async removeOIDCProviderMetaData(): Promise<void> {\n    await this._store.removeData(this._resolveKey(Stores.OIDCProviderMetaData));\n  }\n\n  public async removeTemporaryData(userId?: string): Promise<void> {\n    await this._store.removeData(this._resolveKey(Stores.TemporaryData, userId));\n  }\n\n  public async removeSessionData(userId?: string): Promise<void> {\n    await this._store.removeData(this._resolveKey(Stores.SessionData, userId));\n  }\n\n  public async getConfigDataParameter(key: keyof AuthClientConfig<T>): Promise<TemporaryStoreValue> {\n    const data: string = await this._store.getData(this._resolveKey(Stores.ConfigData));\n\n    return data && JSON.parse(data)[key];\n  }\n\n  public async getOIDCProviderMetaDataParameter(key: keyof OIDCDiscoveryApiResponse): Promise<TemporaryStoreValue> {\n    const data: string = await this._store.getData(this._resolveKey(Stores.OIDCProviderMetaData));\n\n    return data && JSON.parse(data)[key];\n  }\n\n  public async getTemporaryDataParameter(key: keyof TemporaryStore, userId?: string): Promise<TemporaryStoreValue> {\n    const data: string = await this._store.getData(this._resolveKey(Stores.TemporaryData, userId));\n\n    return data && JSON.parse(data)[key];\n  }\n\n  public async getSessionDataParameter(key: keyof SessionData, userId?: string): Promise<TemporaryStoreValue> {\n    const data: string = await this._store.getData(this._resolveKey(Stores.SessionData, userId));\n\n    return data && JSON.parse(data)[key];\n  }\n\n  public async setConfigDataParameter(key: keyof AuthClientConfig<T>, value: TemporaryStoreValue): Promise<void> {\n    await this.setValue(this._resolveKey(Stores.ConfigData), key, value);\n  }\n\n  public async setOIDCProviderMetaDataParameter(\n    key: keyof OIDCDiscoveryApiResponse,\n    value: TemporaryStoreValue,\n  ): Promise<void> {\n    await this.setValue(this._resolveKey(Stores.OIDCProviderMetaData), key, value);\n  }\n\n  public async setTemporaryDataParameter(\n    key: keyof TemporaryStore,\n    value: TemporaryStoreValue,\n    userId?: string,\n  ): Promise<void> {\n    await this.setValue(this._resolveKey(Stores.TemporaryData, userId), key, value);\n  }\n\n  public async setSessionDataParameter(\n    key: keyof SessionData,\n    value: TemporaryStoreValue,\n    userId?: string,\n  ): Promise<void> {\n    await this.setValue(this._resolveKey(Stores.SessionData, userId), key, value);\n  }\n\n  public async removeConfigDataParameter(key: keyof AuthClientConfig<T>): Promise<void> {\n    await this.removeValue(this._resolveKey(Stores.ConfigData), key);\n  }\n\n  public async removeOIDCProviderMetaDataParameter(key: keyof OIDCDiscoveryApiResponse): Promise<void> {\n    await this.removeValue(this._resolveKey(Stores.OIDCProviderMetaData), key);\n  }\n\n  public async removeTemporaryDataParameter(key: keyof TemporaryStore, userId?: string): Promise<void> {\n    await this.removeValue(this._resolveKey(Stores.TemporaryData, userId), key);\n  }\n\n  public async removeSessionDataParameter(key: keyof SessionData, userId?: string): Promise<void> {\n    await this.removeValue(this._resolveKey(Stores.SessionData, userId), key);\n  }\n}\n\nexport default StorageManager;\n", "/**\n * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/**\n * Constants related to OpenID Connect (OIDC) metadata and endpoints.\n * This object contains all the standard OIDC endpoints and storage keys\n * used throughout the application for authentication and authorization.\n *\n * @remarks\n * The constants are organized into two main sections:\n * 1. Endpoints - Contains all OIDC standard endpoint paths\n * 2. Storage - Contains keys used for storing OIDC-related data\n *\n * @example\n * ```typescript\n * // Using an endpoint\n * const authEndpoint = OIDCDiscoveryConstants.Endpoints.AUTHORIZATION;\n *\n * // Using a storage key\n * const tokenKey = OIDCDiscoveryConstants.Storage.StorageKeys.Endpoints.TOKEN;\n * ```\n */\nconst OIDCDiscoveryConstants = {\n  /**\n   * Collection of standard OIDC endpoint paths used for authentication flows.\n   * These endpoints are relative paths that should be appended to the base URL\n   * of your identity provider.\n   */\n\n  Endpoints: {\n    /**\n     * Authorization endpoint for initiating the OAuth2/OIDC flow.\n     * This endpoint is used to request authorization and receive an authorization code.\n     */\n    AUTHORIZATION: '/oauth2/authorize',\n\n    /**\n     * Session check iframe endpoint for session management.\n     * Used to monitor the user's session state through a hidden iframe.\n     */\n    SESSION_IFRAME: '/oidc/checksession',\n\n    /**\n     * End session endpoint for logout functionality.\n     * Used to terminate the user's session and perform logout operations.\n     */\n    END_SESSION: '/oidc/logout',\n\n    /**\n     * Token issuer endpoint.\n     * The endpoint that issues OAuth2/OIDC tokens.\n     */\n    ISSUER: '/oauth2/token',\n\n    /**\n     * JSON Web Key Set endpoint for key validation.\n     * Provides the public keys used to verify token signatures.\n     */\n    JWKS: '/oauth2/jwks',\n\n    /**\n     * Token revocation endpoint.\n     * Used to invalidate access or refresh tokens before they expire.\n     */\n    REVOCATION: '/oauth2/revoke',\n\n    /**\n     * Token endpoint for obtaining access tokens.\n     * Used to exchange authorization codes for access tokens and refresh tokens.\n     */\n    TOKEN: '/oauth2/token',\n\n    /**\n     * UserInfo endpoint for obtaining user claims.\n     * Provides authenticated user information when called with a valid access token.\n     */\n    USERINFO: '/oauth2/userinfo',\n  },\n\n  /**\n   * Storage related constants used for maintaining OIDC state.\n   * These constants define the keys used to store OIDC-related data\n   * in the browser's storage mechanisms.\n   */\n\n  Storage: {\n    /**\n     * Storage keys for various OIDC endpoints and configurations.\n     * These keys are used to store endpoint URLs and configuration\n     * states in the browser's storage.\n     */\n\n    StorageKeys: {\n      /**\n       * Collection of storage keys for OIDC endpoints.\n       * These keys are used to store the discovered endpoint URLs\n       * from the OpenID Provider's configuration.\n       */\n\n      Endpoints: {\n        /**\n         * Storage key for the authorization endpoint URL.\n         * Used to store the URL where authorization requests should be sent.\n         */\n        AUTHORIZATION: 'authorization_endpoint',\n\n        /**\n         * Storage key for the token endpoint URL.\n         * Used to store the URL where token requests should be sent.\n         */\n        TOKEN: 'token_endpoint',\n\n        /**\n         * Storage key for the revocation endpoint URL.\n         * Used to store the URL where token revocation requests should be sent.\n         */\n        REVOCATION: 'revocation_endpoint',\n\n        /**\n         * Storage key for the end session endpoint URL.\n         * Used to store the URL where logout requests should be sent.\n         */\n        END_SESSION: 'end_session_endpoint',\n\n        /**\n         * Storage key for the JWKS URI endpoint URL.\n         * Used to store the URL where JSON Web Key Sets can be retrieved.\n         */\n        JWKS: 'jwks_uri',\n\n        /**\n         * Storage key for the session check iframe URL.\n         * Used to store the URL of the iframe used for session state monitoring.\n         */\n        SESSION_IFRAME: 'check_session_iframe',\n\n        /**\n         * Storage key for the issuer identifier URL.\n         * Used to store the URL that identifies the OpenID Provider.\n         */\n        ISSUER: 'issuer',\n\n        /**\n         * Storage key for the userinfo endpoint URL.\n         * Used to store the URL where user information can be retrieved.\n         */\n        USERINFO: 'userinfo_endpoint',\n      },\n\n      /**\n       * Flag to track if OpenID Provider configuration is initiated.\n       * Used to determine if the OIDC discovery process has been started.\n       * This helps prevent duplicate initialization attempts.\n       */\n      OPENID_PROVIDER_CONFIG_INITIATED: 'op_config_initiated',\n    },\n  },\n} as const;\n\nexport default OIDCDiscoveryConstants;\n", "/**\n * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/**\n * Constants for OAuth 2.0 and OpenID Connect scopes.\n * These scopes define the level of access that the client application\n * is requesting from the authorization server.\n *\n * @remarks\n * Scopes are space-separated strings that represent different permissions.\n * The 'openid' scope is required for OpenID Connect flows, while other\n * scopes provide access to different resources or user information.\n *\n * @example\n * ```typescript\n * // Requesting OpenID Connect authentication\n * const scope = [ScopeConstants.OPENID];\n *\n * // Requesting profile information\n * const scopes = [ScopeConstants.OPENID, ScopeConstants.PROFILE];\n * ```\n */\nconst ScopeConstants: {\n  INTERNAL_LOGIN: string;\n  OPENID: string;\n  PROFILE: string;\n} = {\n  /**\n   * The scope for accessing the user's profile information from SCIM.\n   * This scope allows the client to retrieve basic user information such as\n   * name, email, profile picture, etc.\n   */\n  INTERNAL_LOGIN: 'internal_login',\n\n  /**\n   * The base OpenID Connect scope.\n   * Required for all OpenID Connect flows. Indicates that the client\n   * is initiating an OpenID Connect authentication request.\n   */\n  OPENID: 'openid',\n\n  /**\n   * The OpenID Connect profile scope.\n   * This scope allows the client to access the user's profile information.\n   * It includes details such as the user's name, email, and other profile attributes.\n   */\n  PROFILE: 'profile',\n} as const;\n\nexport default ScopeConstants;\n", "/**\n * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport ScopeConstants from './ScopeConstants';\n\n/**\n * Constants representing standard OpenID Connect (OIDC) request and response parameters.\n * These parameters are commonly used during authorization, token exchange, and logout flows.\n */\nconst OIDCRequestConstants = {\n  Params: {\n    /**\n     * The authorization code returned from the authorization endpoint.\n     * Used in the authorization code flow.\n     */\n    AUTHORIZATION_CODE: 'code',\n\n    /**\n     * Session state parameter used for session management between the client and the OP.\n     */\n    SESSION_STATE: 'session_state',\n\n    /**\n     * State parameter used to maintain state between the request and the callback.\n     * Helps in preventing CSRF attacks.\n     */\n    STATE: 'state',\n\n    /**\n     * Indicates whether sign-out was successful during the end-session flow.\n     * May be returned by the OP after a logout request.\n     */\n    SIGN_OUT_SUCCESS: 'sign_out_success',\n  },\n\n  /**\n   * Constants related to the OpenID Connect (OIDC) sign-in flow.\n   */\n  SignIn: {\n    /**\n     * Constants related to the payload of the OIDC sign-in request.\n     */\n    Payload: {\n      /**\n       * The default scopes used in OIDC sign-in requests.\n       */\n      DEFAULT_SCOPES: [ScopeConstants.OPENID, ScopeConstants.PROFILE, ScopeConstants.INTERNAL_LOGIN],\n    },\n  },\n\n  /**\n   * Sign-out related constants for managing the end-session flow in OIDC.\n   */\n  SignOut: {\n    /**\n     * Storage-related constants for managing sign-out state.\n     */\n    Storage: {\n      /**\n       * Collection of storage keys used in sign-out implementation\n       */\n      StorageKeys: {\n        /**\n         * Storage key for the sign-out URL.\n         * Used to store the complete URL where the user should be redirected after\n         * completing the OIDC logout process.\n         */\n        SIGN_OUT_URL: 'sign_out_url',\n      },\n    },\n  },\n} as const;\n\nexport default OIDCRequestConstants;\n", "/**\n * Copyright (c) 2020, WSO2 LLC. (https://www.wso2.com). All Rights Reserved.\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/**\n * @deprecated Use `AsgardeoRuntimeError` for runtime errors and `AsgardeoAPIError` for API errors.\n */\nexport class AsgardeoAuthException {\n    public name: string;\n    public code: string | undefined;\n    public message: string;\n\n    public constructor(\n        code: string,\n        name: string,\n        message: string\n    ) {\n        this.message = message;\n        this.name = name;\n        this.code = code;\n        Object.setPrototypeOf(this, new.target.prototype);\n    }\n}\n", "/**\n * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/**\n * Constants related to OIDC token management and storage.\n * This object contains configuration values and storage keys\n * used in token validation and management processes.\n *\n * @remarks\n * The constants are organized into two main sections:\n * 1. SignatureValidation - Contains supported algorithms for token validation\n * 2. Storage - Contains keys used for storing token-related data\n *\n * @example\n * ```typescript\n * // Using signature validation algorithms\n * const algorithms = TokenConstants.SignatureValidation.SUPPORTED_ALGORITHMS;\n *\n * // Using storage keys\n * const timerKey = TokenConstants.Storage.StorageKeys.REFRESH_TOKEN_TIMER;\n * ```\n */\nconst TokenConstants = {\n  /**\n   * Token signature validation constants.\n   * Contains configurations related to token signature verification.\n   */\n  SignatureValidation: {\n    /**\n     * Fallback array of supported signature algorithms for OIDC token validation.\n     * These values are used when the supported algorithms cannot be retrieved from\n     * the .well-known/openid-configuration endpoint.\n     *\n     * Supported algorithms:\n     * - `RS256` - RSASSA-PKCS1-v1_5 using SHA-256\n     * - `RS512` - RSASSA-PKCS1-v1_5 using SHA-512\n     * - `RS384` - RSASSA-PKCS1-v1_5 using SHA-384\n     * - `PS256` - RSASSA-PSS using SHA-256 and MGF1 with SHA-256\n     */\n    SUPPORTED_ALGORITHMS: ['RS256', 'RS512', 'RS384', 'PS256'],\n  },\n\n  /**\n   * Storage-related constants for OIDC tokens.\n   * Contains keys used to store token-related data in browser storage.\n   */\n  Storage: {\n    /**\n     * Collection of storage keys used in token management.\n     * These keys are used to store and retrieve token-related\n     * information from browser storage.\n     */\n    StorageKeys: {\n      /**\n       * Key used to store the refresh token timer identifier.\n       * This timer is used to schedule token refresh operations\n       * before the current token expires.\n       */\n      REFRESH_TOKEN_TIMER: 'refresh_token_timer',\n    },\n  },\n} as const;\n\nexport default TokenConstants;\n", "/**\n * Copyright (c) 2022, WSO2 LLC. (https://www.wso2.com). All Rights Reserved.\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport {AsgardeoAuthException} from './errors/exception';\nimport {Crypto, JWKInterface} from './models/crypto';\nimport {IdToken} from './models/token';\nimport TokenConstants from './constants/TokenConstants';\n\nexport class IsomorphicCrypto<T = any> {\n  private _cryptoUtils: Crypto<T>;\n\n  public constructor(cryptoUtils: Crypto<T>) {\n    this._cryptoUtils = cryptoUtils;\n  }\n\n  /**\n   * Generate code verifier.\n   *\n   * @returns code verifier.\n   */\n  public getCodeVerifier(): string {\n    return this._cryptoUtils.base64URLEncode(this._cryptoUtils.generateRandomBytes(32));\n  }\n\n  /**\n   * Derive code challenge from the code verifier.\n   *\n   * @param verifier - Code verifier.\n   *\n   * @returns - code challenge.\n   */\n  public getCodeChallenge(verifier: string): string {\n    return this._cryptoUtils.base64URLEncode(this._cryptoUtils.hashSha256(verifier));\n  }\n\n  /**\n   * Get JWK used for the id_token\n   *\n   * @param jwtHeader - header of the id_token.\n   * @param keys - jwks response.\n   *\n   * @returns public key.\n   *\n   * @throws\n   */\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  public getJWKForTheIdToken(jwtHeader: string, keys: JWKInterface[]): JWKInterface {\n    const headerJSON: Record<string, string> = JSON.parse(this._cryptoUtils.base64URLDecode(jwtHeader));\n\n    for (const key of keys) {\n      if (headerJSON['kid'] === key.kid) {\n        return key;\n      }\n    }\n\n    throw new AsgardeoAuthException(\n      'JS-CRYPTO_UTIL-GJFTIT-IV01',\n      'kid not found.',\n      \"Failed to find the 'kid' specified in the id_token. 'kid' found in the header : \" +\n        headerJSON['kid'] +\n        ', Expected values: ' +\n        keys.map((key: JWKInterface) => key.kid).join(', '),\n    );\n  }\n\n  /**\n   * Verify id token.\n   *\n   * @param idToken - id_token received from the IdP.\n   * @param jwk - public key used for signing.\n   * @param clientId - app identification.\n   * @param issuer - id_token issuer.\n   * @param username - Username.\n   * @param clockTolerance - Allowed leeway for id_tokens (in seconds).\n   *\n   * @returns whether the id_token is valid.\n   *\n   * @throws\n   */\n  public isValidIdToken(\n    idToken: string,\n    jwk: JWKInterface,\n    clientId: string,\n    issuer: string,\n    username: string,\n    clockTolerance: number | undefined,\n    validateJwtIssuer: boolean | undefined,\n  ): Promise<boolean> {\n    return this._cryptoUtils\n      .verifyJwt(\n        idToken,\n        jwk,\n        TokenConstants.SignatureValidation.SUPPORTED_ALGORITHMS as unknown as string[],\n        clientId,\n        issuer,\n        username,\n        clockTolerance,\n        validateJwtIssuer,\n      )\n      .then((response: boolean) => {\n        if (response) {\n          return Promise.resolve(true);\n        }\n\n        return Promise.reject(\n          new AsgardeoAuthException(\n            'JS-CRYPTO_HELPER-IVIT-IV01',\n            'Invalid ID token.',\n            'ID token validation returned false',\n          ),\n        );\n      });\n  }\n\n  /**\n   * This function decodes the payload of an id token and returns it.\n   *\n   * @param idToken - The id token to be decoded.\n   *\n   * @returns - The decoded payload of the id token.\n   *\n   * @throws\n   */\n  public decodeIdToken(idToken: string): IdToken {\n    try {\n      const utf8String: string = this._cryptoUtils.base64URLDecode(idToken?.split('.')[1]);\n      const payload: IdToken = JSON.parse(utf8String);\n\n      return payload;\n    } catch (error: any) {\n      throw new AsgardeoAuthException('JS-CRYPTO_UTIL-DIT-IV01', 'Decoding ID token failed.', error);\n    }\n  }\n}\n", "/**\n * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/**\n * Constants related to Proof Key for Code Exchange (PKCE) implementation.\n * This object contains all the necessary constants for implementing PKCE\n * flow in the OAuth 2.0 authorization code grant.\n *\n * @remarks\n * PKCE is an extension to the authorization code flow to prevent CSRF and\n * authorization code injection attacks. The constants are organized into\n * storage-related sections for managing PKCE state.\n *\n * @example\n * ```typescript\n * // Using storage keys\n * const codeVerifierKey = PKCEConstants.Storage.StorageKeys.CODE_VERIFIER;\n * const separator = PKCEConstants.Storage.StorageKeys.SEPARATOR;\n * ```\n */\nconst PKCEConstants = {\n  DEFAULT_CODE_CHALLENGE_METHOD: 'S256',\n  /**\n   * Storage-related constants for managing PKCE state\n   */\n  Storage: {\n    /**\n     * Collection of storage keys used in PKCE implementation\n     */\n    StorageKeys: {\n      /**\n       * Key used to store the PKCE code verifier in temporary storage.\n       * The code verifier is a cryptographically random string that is\n       * used to generate the code challenge.\n       */\n      CODE_VERIFIER: 'pkce_code_verifier',\n\n      /**\n       * Separator used in storage keys to create unique identifiers\n       * by combining different parts of the key.\n       */\n      SEPARATOR: '#',\n    },\n  },\n} as const;\n\nexport default PKCEConstants;\n", "/**\n * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport PKCEConstants from '../constants/PKCEConstants';\n\n/**\n * Extracts the PKCE key from a state parameter string.\n *\n * @param state - The state parameter string containing the request index.\n * @returns The PKCE key string in the format `pkce_code_verifier_${index}`.\n *\n * @example\n * ```typescript\n * const state = \"request_1\";\n * const pkceKey = extractPkceStorageKeyFromState(state);\n * // Returns: \"pkce_code_verifier_1\"\n * ```\n */\nconst extractPkceStorageKeyFromState = (state: string): string => {\n  const index: number = parseInt(state.split('request_')[1]);\n\n  return `${PKCEConstants.Storage.StorageKeys.CODE_VERIFIER}${PKCEConstants.Storage.StorageKeys.SEPARATOR}${index}`;\n};\n\nexport default extractPkceStorageKeyFromState;\n", "/**\n * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/**\n * Constants for OAuth 2.0 Token Exchange operations.\n * This object contains placeholders used in token exchange requests\n * and responses for dynamic value substitution.\n *\n * @remarks\n * These placeholders are used in token exchange templates and are replaced\n * with actual values during request processing. They help in creating\n * flexible and reusable token exchange configurations.\n *\n * @example\n * ```typescript\n * // Using placeholders in a token exchange template\n * const template = `grant_type=urn:ietf:params:oauth:grant-type:token-exchange&subject_token=${TokenExchangeConstants.Placeholders.TOKEN}`;\n * ```\n */\nconst TokenExchangeConstants = {\n  /**\n   * Collection of placeholder strings used in token exchange operations.\n   * These placeholders are replaced with actual values when processing\n   * token exchange requests.\n   */\n  Placeholders: {\n    /**\n     * Placeholder for the token value in exchange requests.\n     * Usually replaced with an access token or refresh token.\n     */\n    ACCESS_TOKEN: '{{accessToken}}',\n\n    /**\n     * Placeholder for the username in token exchange operations.\n     * Used when user identity needs to be included in the exchange.\n     */\n    USERNAME: '{{username}}',\n\n    /**\n     * Placeholder for OAuth scopes in token exchange requests.\n     * Replaced with space-separated scope strings.\n     */\n    SCOPES: '{{scopes}}',\n\n    /**\n     * Placeholder for client ID in token exchange operations.\n     * Required for client authentication.\n     */\n    CLIENT_ID: '{{clientId}}',\n\n    /**\n     * Placeholder for client secret in token exchange operations.\n     * Used for client authentication in confidential client flows.\n     */\n    CLIENT_SECRET: '{{clientSecret}}',\n  },\n} as const;\n\nexport default TokenExchangeConstants;\n", "/**\n * Copyright (c) 2020, WSO2 LLC. (https://www.wso2.com). All Rights Reserved.\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport {IdToken} from '../models/token';\n\n/**\n * Removes standard protocol-specific claims from the ID token payload\n * and returns a camelCased object of user-specific claims.\n *\n * @param payload The raw ID token payload.\n * @returns A cleaned-up, camelCased object containing only user-specific claims.\n *\n * @example\n * ````typescript\n * const idTokenPayload = {\n *   iss: 'https://example.com',\n *   aud: 'client_id',\n *   exp: 1712345678,\n *   iat: 1712345670,\n *   email: 'user@example.com'\n *  };\n *\n * const userClaims = extractUserClaimsFromIdToken(idTokenPayload);\n * // // userClaims will be:\n * // {\n * //   email: 'user@example.com'\n * // }\n * ```\n */\nconst extractUserClaimsFromIdToken = (payload: IdToken): Record<string, unknown> => {\n  const filteredPayload: Partial<IdToken> = {...payload};\n\n  const protocolClaims = [\n    'iss',\n    'aud',\n    'exp',\n    'iat',\n    'acr',\n    'amr',\n    'azp',\n    'auth_time',\n    'nonce',\n    'c_hash',\n    'at_hash',\n    'nbf',\n    'isk',\n    'sid',\n    'jti',\n    'sub',\n  ];\n\n  protocolClaims.forEach(claim => {\n    delete filteredPayload[claim as keyof IdToken];\n  });\n\n  const userClaims: Record<string, unknown> = {};\n\n  Object.entries(filteredPayload).forEach(([key, value]) => {\n    const camelCasedKey = key\n      .split('_')\n      .map((part, i) => (i === 0 ? part : part[0].toUpperCase() + part.slice(1)))\n      .join('');\n\n    userClaims[camelCasedKey] = value;\n  });\n\n  return userClaims;\n};\n\nexport default extractUserClaimsFromIdToken;\n", "/**\n * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/**\n * Base class for all Asgardeo errors. This class extends the native Error class\n * and adds support for error codes and proper stack traces. Each error is prefixed\n * with a shield emoji and the SDK name for easy identification.\n *\n * @example\n * ```typescript\n * // Create a new error with a message and code\n * throw new AsgardeoError(\n *   \"Invalid authentication response\",\n *   \"AUTH_ERROR\"\n * );\n *\n * // Or with a specific SDK name\n * throw new AsgardeoError(\n *   \"Invalid authentication response\",\n *   \"AUTH_ERROR\",\n *   \"@asgardeo/react\"\n * );\n *\n * // The error message will be formatted as:\n * // \uD83D\uDEE1\uFE0F Asgardeo React: Invalid authentication response\n * //\n * // (code=\"AUTH_ERROR\")\n */\nexport default class AsgardeoError extends Error {\n  public readonly code: string;\n  public readonly origin: string;\n\n  private static resolveOrigin(origin: string): string {\n    if (!origin) {\n      return '@asgardeo/javascript';\n    }\n\n    return `@asgardeo/${origin}`;\n  }\n\n  constructor(message: string, code: string, origin: string) {\n    const _origin: string = AsgardeoError.resolveOrigin(origin);\n    const prefix: string = `\uD83D\uDEE1\uFE0F Asgardeo - ${_origin}:`;\n    const regex: RegExp = new RegExp(`\uD83D\uDEE1\uFE0F\\\\s*Asgardeo\\\\s*-\\\\s*${_origin}:`, 'i');\n    const sanitized: string = message.replace(regex, '');\n    const _message: string = `${prefix} ${sanitized.trim()}\\n\\n(code=\"${code}\")\\n`;\n\n    super(_message);\n\n    this.name = new.target.name;\n    this.code = code;\n    this.origin = _origin;\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, new.target);\n    }\n  }\n\n  public override toString(): string {\n    return `[${this.name}]\\nMessage: ${this.message}`;\n  }\n}\n", "/**\n * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport AsgardeoError from './AsgardeoError';\n\n/**\n * Base class for all runtime errors in Asgardeo. This class extends AsgardeoError\n * and adds support for additional error details. Use this class for errors that occur\n * during runtime execution that are not related to API calls.\n *\n * @example\n * ```typescript\n * throw new AsgardeoRuntimeError(\n *   \"Failed to parse configuration\",\n *   \"CONFIG_PARSE_ERROR\",\n *   { invalidField: \"redirectUri\" }\n * );\n * ```\n */\nexport default class AsgardeoRuntimeError extends AsgardeoError {\n  /**\n   * Creates an instance of AsgardeoRuntimeError.\n   *\n   * @param message - Human-readable description of the error\n   * @param code - A unique error code that identifies the error type\n   * @param details - Additional details about the error that might be helpful for debugging\n   * @param origin - Optional. The SDK origin (e.g. 'react', 'vue'). Defaults to generic 'Asgardeo'\n   * @constructor\n   */\n  constructor(message: string, code: string, origin: string, public readonly details?: unknown) {\n    super(message, code, origin);\n\n    Object.defineProperty(this, 'name', {\n      value: 'AsgardeoRuntimeError',\n      configurable: true,\n      writable: true,\n    });\n  }\n\n  /**\n   * Returns a string representation of the runtime error\n   * @returns Formatted error string with name, code, details, and message\n   */\n  public  override toString(): string {\n    const details = this.details ? `\\nDetails: ${JSON.stringify(this.details, null, 2)}` : '';\n    return `[${this.name}] (code=\"${this.code}\")${details}\\nMessage: ${this.message}`;\n  }\n}\n", "/**\n * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport OIDCRequestConstants from '../constants/OIDCRequestConstants';\nimport AsgardeoRuntimeError from '../errors/AsgardeoRuntimeError';\n\n/**\n * Processes OpenID scopes to ensure they are in the correct format.\n * If the input is a string, it returns it as is.\n * If the input is an array, it joins the elements into a single string separated by spaces.\n * If the input is neither, it throws an error.\n *\n * @param scopes - The OpenID scopes to process, which can be a string or an array of strings.\n * @returns A string of OpenID scopes separated by spaces.\n *\n * @example\n * ```typescript\n * processOpenIDScopes(\"openid profile email\"); // returns \"openid profile email\"\n * processOpenIDScopes([\"openid\", \"profile\", \"email\"]); // returns \"openid profile email\"\n * processOpenIDScopes(123); // throws AsgardeoRuntimeError\n * processOpenIDScopes({}); // throws AsgardeoRuntimeError\n * ```\n */\nconst processOpenIDScopes = (scopes: string | string[]): string => {\n  let processedScopes: string[] = [];\n\n  if (scopes) {\n    if (Array.isArray(scopes)) {\n      processedScopes = scopes;\n    } else if (typeof scopes === 'string') {\n      processedScopes = scopes.split(' ');\n    } else {\n      throw new AsgardeoRuntimeError(\n        'Scopes must be a string or an array of strings.',\n        'processOpenIDScopes-Invalid-001',\n        'javascript',\n        'The provided scopes are not in the expected format. Please provide a string or an array of strings.',\n      );\n    }\n  }\n\n  OIDCRequestConstants.SignIn.Payload.DEFAULT_SCOPES.forEach((defaultScope: string) => {\n    if (!processedScopes.includes(defaultScope)) {\n      processedScopes.push(defaultScope);\n    }\n  });\n\n  return processedScopes.join(' ');\n};\n\nexport default processOpenIDScopes;\n", "/**\n * Copyright (c) 2020, WSO2 LLC. (https://www.wso2.com). All Rights Reserved.\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport OIDCDiscoveryConstants from '../../constants/OIDCDiscoveryConstants';\nimport TokenExchangeConstants from '../../constants/TokenExchangeConstants';\nimport {AsgardeoAuthException} from '../../errors/exception';\nimport {IsomorphicCrypto} from '../../IsomorphicCrypto';\nimport {JWKInterface} from '../../models/crypto';\nimport {OIDCDiscoveryEndpointsApiResponse, OIDCDiscoveryApiResponse} from '../../models/oidc-discovery';\nimport {SessionData} from '../../models/session';\nimport {IdToken, TokenResponse, AccessTokenApiResponse} from '../../models/token';\nimport {User} from '../../models/user';\nimport StorageManager from '../../StorageManager';\nimport extractUserClaimsFromIdToken from '../../utils/extractUserClaimsFromIdToken';\nimport processOpenIDScopes from '../../utils/processOpenIDScopes';\nimport {AuthClientConfig, StrictAuthClientConfig} from '../models';\n\nexport class AuthenticationHelper<T> {\n  private _storageManager: StorageManager<T>;\n  private _config: () => Promise<AuthClientConfig>;\n  private _oidcProviderMetaData: () => Promise<OIDCDiscoveryApiResponse>;\n  private _cryptoHelper: IsomorphicCrypto;\n\n  public constructor(storageManager: StorageManager<T>, cryptoHelper: IsomorphicCrypto) {\n    this._storageManager = storageManager;\n    this._config = async () => this._storageManager.getConfigData();\n    this._oidcProviderMetaData = async () => this._storageManager.loadOpenIDProviderConfiguration();\n    this._cryptoHelper = cryptoHelper;\n  }\n\n  public async resolveEndpoints(response: OIDCDiscoveryApiResponse): Promise<OIDCDiscoveryApiResponse> {\n    const oidcProviderMetaData: OIDCDiscoveryApiResponse = {};\n    const configData: StrictAuthClientConfig = await this._config();\n\n    configData.endpoints &&\n      Object.keys(configData.endpoints).forEach((endpointName: string) => {\n        const snakeCasedName: string = endpointName.replace(/[A-Z]/g, (letter: string) => `_${letter.toLowerCase()}`);\n\n        oidcProviderMetaData[snakeCasedName] = configData?.endpoints ? configData.endpoints[endpointName] : '';\n      });\n\n    return {...response, ...oidcProviderMetaData};\n  }\n\n  public async resolveEndpointsExplicitly(): Promise<OIDCDiscoveryEndpointsApiResponse> {\n    const oidcProviderMetaData: OIDCDiscoveryApiResponse = {};\n    const configData: StrictAuthClientConfig = await this._config();\n\n    const requiredEndpoints: string[] = [\n      OIDCDiscoveryConstants.Storage.StorageKeys.Endpoints.AUTHORIZATION,\n      OIDCDiscoveryConstants.Storage.StorageKeys.Endpoints.END_SESSION,\n      OIDCDiscoveryConstants.Storage.StorageKeys.Endpoints.JWKS,\n      OIDCDiscoveryConstants.Storage.StorageKeys.Endpoints.SESSION_IFRAME,\n      OIDCDiscoveryConstants.Storage.StorageKeys.Endpoints.REVOCATION,\n      OIDCDiscoveryConstants.Storage.StorageKeys.Endpoints.TOKEN,\n      OIDCDiscoveryConstants.Storage.StorageKeys.Endpoints.ISSUER,\n      OIDCDiscoveryConstants.Storage.StorageKeys.Endpoints.USERINFO,\n    ];\n\n    const isRequiredEndpointsContains: boolean = configData.endpoints\n      ? requiredEndpoints.every((reqEndpointName: string) =>\n          configData.endpoints\n            ? Object.keys(configData.endpoints).some((endpointName: string) => {\n                const snakeCasedName: string = endpointName.replace(\n                  /[A-Z]/g,\n                  (letter: string) => `_${letter.toLowerCase()}`,\n                );\n\n                return snakeCasedName === reqEndpointName;\n              })\n            : false,\n        )\n      : false;\n\n    if (!isRequiredEndpointsContains) {\n      throw new AsgardeoAuthException(\n        'JS-AUTH_HELPER-REE-NF01',\n        'Required endpoints missing',\n        'Some or all of the required endpoints are missing in the object passed to the `endpoints` ' +\n          'attribute of the`AuthConfig` object.',\n      );\n    }\n\n    configData.endpoints &&\n      Object.keys(configData.endpoints).forEach((endpointName: string) => {\n        const snakeCasedName: string = endpointName.replace(/[A-Z]/g, (letter: string) => `_${letter.toLowerCase()}`);\n\n        oidcProviderMetaData[snakeCasedName] = configData?.endpoints ? configData.endpoints[endpointName] : '';\n      });\n\n    return {...oidcProviderMetaData};\n  }\n\n  public async resolveEndpointsByBaseURL(): Promise<OIDCDiscoveryEndpointsApiResponse> {\n    const oidcProviderMetaData: OIDCDiscoveryEndpointsApiResponse = {};\n    const configData: StrictAuthClientConfig = await this._config();\n\n    const {baseUrl} = configData as any;\n\n    if (!baseUrl) {\n      throw new AsgardeoAuthException(\n        'JS-AUTH_HELPER_REBO-NF01',\n        'Base URL not defined.',\n        'Base URL is not defined in AuthClient config.',\n      );\n    }\n\n    configData.endpoints &&\n      Object.keys(configData.endpoints).forEach((endpointName: string) => {\n        const snakeCasedName: string = endpointName.replace(/[A-Z]/g, (letter: string) => `_${letter.toLowerCase()}`);\n\n        oidcProviderMetaData[snakeCasedName] = configData?.endpoints ? configData.endpoints[endpointName] : '';\n      });\n\n    const defaultEndpoints: OIDCDiscoveryApiResponse = {\n      [OIDCDiscoveryConstants.Storage.StorageKeys.Endpoints\n        .AUTHORIZATION]: `${baseUrl}${OIDCDiscoveryConstants.Endpoints.AUTHORIZATION}`,\n      [OIDCDiscoveryConstants.Storage.StorageKeys.Endpoints\n        .END_SESSION]: `${baseUrl}${OIDCDiscoveryConstants.Endpoints.END_SESSION}`,\n      [OIDCDiscoveryConstants.Storage.StorageKeys.Endpoints\n        .ISSUER]: `${baseUrl}${OIDCDiscoveryConstants.Endpoints.ISSUER}`,\n      [OIDCDiscoveryConstants.Storage.StorageKeys.Endpoints.JWKS]: `${baseUrl}${OIDCDiscoveryConstants.Endpoints.JWKS}`,\n      [OIDCDiscoveryConstants.Storage.StorageKeys.Endpoints\n        .SESSION_IFRAME]: `${baseUrl}${OIDCDiscoveryConstants.Endpoints.SESSION_IFRAME}`,\n      [OIDCDiscoveryConstants.Storage.StorageKeys.Endpoints\n        .REVOCATION]: `${baseUrl}${OIDCDiscoveryConstants.Endpoints.REVOCATION}`,\n      [OIDCDiscoveryConstants.Storage.StorageKeys.Endpoints\n        .TOKEN]: `${baseUrl}${OIDCDiscoveryConstants.Endpoints.TOKEN}`,\n      [OIDCDiscoveryConstants.Storage.StorageKeys.Endpoints\n        .USERINFO]: `${baseUrl}${OIDCDiscoveryConstants.Endpoints.USERINFO}`,\n    };\n\n    return {...defaultEndpoints, ...oidcProviderMetaData};\n  }\n\n  public async validateIdToken(idToken: string): Promise<boolean> {\n    const jwksEndpoint: string | undefined = (await this._storageManager.loadOpenIDProviderConfiguration()).jwks_uri;\n    const configData: StrictAuthClientConfig = await this._config();\n\n    if (!jwksEndpoint || jwksEndpoint.trim().length === 0) {\n      throw new AsgardeoAuthException(\n        'JS_AUTH_HELPER-VIT-NF01',\n        'JWKS endpoint not found.',\n        'No JWKS endpoint was found in the OIDC provider meta data returned by the well-known endpoint ' +\n          'or the JWKS endpoint passed to the SDK is empty.',\n      );\n    }\n\n    let response: Response;\n\n    try {\n      response = await fetch(jwksEndpoint, {\n        credentials: configData.sendCookiesInRequests ? 'include' : 'same-origin',\n      });\n    } catch (error: any) {\n      throw new AsgardeoAuthException(\n        'JS-AUTH_HELPER-VIT-NE02',\n        'Request to jwks endpoint failed.',\n        error ?? 'The request sent to get the jwks from the server failed.',\n      );\n    }\n\n    if (response.status !== 200 || !response.ok) {\n      throw new AsgardeoAuthException(\n        'JS-AUTH_HELPER-VIT-HE03',\n        `Invalid response status received for jwks request (${response.statusText}).`,\n        (await response.json()) as string,\n      );\n    }\n\n    const {issuer} = await this._oidcProviderMetaData();\n\n    const {keys}: {keys: JWKInterface[]} = (await response.json()) as {\n      keys: JWKInterface[];\n    };\n\n    const jwk: any = await this._cryptoHelper.getJWKForTheIdToken(idToken.split('.')[0], keys);\n\n    return this._cryptoHelper.isValidIdToken(\n      idToken,\n      jwk,\n      (await this._config()).clientId,\n      issuer ?? '',\n      this._cryptoHelper.decodeIdToken(idToken).sub,\n      (await this._config()).clockTolerance,\n      (await this._config()).validateIDTokenIssuer ?? true,\n    );\n  }\n\n  public getAuthenticatedUserInfo(idToken: string): User {\n    const payload: IdToken = this._cryptoHelper.decodeIdToken(idToken);\n    const username: string = payload?.['username'] ?? '';\n    const givenName: string = payload?.['given_name'] ?? '';\n    const familyName: string = payload?.['family_name'] ?? '';\n    const fullName: string = givenName && familyName ? `${givenName} ${familyName}` : givenName || familyName || '';\n    const displayName: string = payload.preferred_username ?? fullName;\n\n    return {\n      displayName,\n      username,\n      ...extractUserClaimsFromIdToken(payload),\n    };\n  }\n\n  public async replaceCustomGrantTemplateTags(text: string, userId?: string): Promise<string> {\n    const configData: StrictAuthClientConfig = await this._config();\n    const sessionData: SessionData = await this._storageManager.getSessionData(userId);\n\n    const scope: string = processOpenIDScopes(configData.scopes);\n\n    if (typeof text !== 'string') {\n      return text;\n    }\n\n    return text\n      .replace(TokenExchangeConstants.Placeholders.ACCESS_TOKEN, sessionData.access_token)\n      .replace(\n        TokenExchangeConstants.Placeholders.USERNAME,\n        this.getAuthenticatedUserInfo(sessionData.id_token).username,\n      )\n      .replace(TokenExchangeConstants.Placeholders.SCOPES, scope)\n      .replace(TokenExchangeConstants.Placeholders.CLIENT_ID, configData.clientId)\n      .replace(TokenExchangeConstants.Placeholders.CLIENT_SECRET, configData.clientSecret ?? '');\n  }\n\n  public async clearSession(userId?: string): Promise<void> {\n    await this._storageManager.removeTemporaryData(userId);\n    await this._storageManager.removeSessionData(userId);\n  }\n\n  public async handleTokenResponse(response: Response, userId?: string): Promise<TokenResponse> {\n    if (response.status !== 200 || !response.ok) {\n      throw new AsgardeoAuthException(\n        'JS-AUTH_HELPER-HTR-NE01',\n        `Invalid response status received for token request (${response.statusText}).`,\n        (await response.json()) as string,\n      );\n    }\n\n    // Get the response in JSON\n    const parsedResponse: AccessTokenApiResponse = (await response.json()) as AccessTokenApiResponse;\n\n    parsedResponse.created_at = new Date().getTime();\n\n    const shouldValidateIdToken: boolean | undefined = (await this._config()).validateIDToken;\n\n    if (shouldValidateIdToken) {\n      return this.validateIdToken(parsedResponse.id_token).then(async () => {\n        await this._storageManager.setSessionData(parsedResponse, userId);\n\n        const tokenResponse: TokenResponse = {\n          accessToken: parsedResponse.access_token,\n          createdAt: parsedResponse.created_at,\n          expiresIn: parsedResponse.expires_in,\n          idToken: parsedResponse.id_token,\n          refreshToken: parsedResponse.refresh_token,\n          scope: parsedResponse.scope,\n          tokenType: parsedResponse.token_type,\n        };\n\n        return Promise.resolve(tokenResponse);\n      });\n    }\n    const tokenResponse: TokenResponse = {\n      accessToken: parsedResponse.access_token,\n      createdAt: parsedResponse.created_at,\n      expiresIn: parsedResponse.expires_in,\n      idToken: parsedResponse.id_token,\n      refreshToken: parsedResponse.refresh_token,\n      scope: parsedResponse.scope,\n      tokenType: parsedResponse.token_type,\n    };\n\n    await this._storageManager.setSessionData(parsedResponse, userId);\n\n    return Promise.resolve(tokenResponse);\n  }\n}\n", "/**\n * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com). All Rights Reserved.\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport PKCEConstants from '../constants/PKCEConstants';\nimport {TemporaryStore} from '../models/store';\n\n/**\n * Generates the next available PKCE storage key based on the current temporary data.\n *\n * The generated key will follow the format: `pkce_code_verifier_<index>`, where `<index>` is incremented\n * based on the highest existing index in the provided storage object.\n *\n * @param tempStore - The object that holds temporary PKCE-related data (e.g., sessionStorage).\n *\n * @returns A new unique PKCE storage key to store the next `code_verifier`.\n *\n * @example\n * const key = generatePkceStorageKey(sessionStorage);\n * // Returns: \"pkce_code_verifier_3\" (if existing keys are pkce_code_verifier_0 to _2)\n */\nconst generatePkceStorageKey = (tempStore: TemporaryStore): string => {\n  const keys: string[] = [];\n\n  Object.keys(tempStore).forEach((key: string) => {\n    if (key.startsWith(PKCEConstants.Storage.StorageKeys.CODE_VERIFIER)) {\n      keys.push(key);\n    }\n  });\n\n  const lastKey: string | undefined = keys.sort().pop();\n  const index: number = parseInt(lastKey?.split(PKCEConstants.Storage.StorageKeys.SEPARATOR)[1] ?? '-1');\n\n  return `${PKCEConstants.Storage.StorageKeys.CODE_VERIFIER}${PKCEConstants.Storage.StorageKeys.SEPARATOR}${index + 1}`;\n};\n\nexport default generatePkceStorageKey;\n", "/**\n * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport PKCEConstants from '../constants/PKCEConstants';\n\n/**\n * Generates a state parameter for request correlation by combining an optional state string with a request index.\n *\n * @param pkceKey - The PKCE key containing the index (format: 'pkce_code_verifier_[index]').\n * @param state - Optional state string to prepend to the request correlation.\n * @returns A state parameter string in the format '[state_]request_[index]'.\n *\n * @example\n * const pkceKey = \"pkce_code_verifier_1\";\n * const result = generateStateParamForRequestCorrelation(pkceKey, \"myState\");\n * // Returns: \"myState_request_1\"\n *\n * const resultNoState = generateStateParamForRequestCorrelation(pkceKey);\n * // Returns: \"request_1\"\n */\nconst generateStateParamForRequestCorrelation = (pkceKey: string, state?: string): string => {\n  const index: number = parseInt(pkceKey.split(PKCEConstants.Storage.StorageKeys.SEPARATOR)[1]);\n\n  return state ? `${state}_request_${index}` : `request_${index}`;\n};\n\nexport default generateStateParamForRequestCorrelation;\n", "/**\n * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport ScopeConstants from '../constants/ScopeConstants';\nimport OIDCRequestConstants from '../constants/OIDCRequestConstants';\nimport generateStateParamForRequestCorrelation from './generateStateParamForRequestCorrelation';\nimport {ExtendedAuthorizeRequestUrlParams} from '../models/oauth-request';\nimport AsgardeoRuntimeError from '../errors/AsgardeoRuntimeError';\n\n/**\n * Generates a map of authorization request URL parameters for OIDC authorization requests.\n *\n * This utility ensures the `openid` scope is always included, handles both string and array forms of the `scope` parameter,\n * and supports PKCE and custom parameters. Throws if a code challenge is provided without a code challenge method.\n *\n * @param options - The main options for the authorization request, including redirectUri, clientId, scope, responseMode, codeChallenge, codeChallengeMethod, and prompt.\n * @param pkceOptions - PKCE options, including the PKCE key for state correlation.\n * @param customParams - Optional custom parameters to include in the request (excluding the `state` param, which is handled separately).\n * @returns A Map of key-value pairs representing the authorization request URL parameters.\n *\n * @throws {AsgardeoRuntimeError} If a code challenge is provided without a code challenge method.\n *\n * @example\n * const params = getAuthorizeRequestUrlParams({\n *   options: {\n *     redirectUri: 'https://app/callback',\n *     clientId: 'client123',\n *     scope: ['openid', 'profile'],\n *     responseMode: 'query',\n *     codeChallenge: 'abc',\n *     codeChallengeMethod: 'S256',\n *     prompt: 'login'\n *   },\n *   pkceOptions: { key: 'pkce_code_verifier_1' },\n *   customParams: { foo: 'bar' }\n * });\n * // Returns a Map with all required OIDC params, PKCE, and custom params.\n */\nconst getAuthorizeRequestUrlParams = (\n  options: {\n    redirectUri: string;\n    clientId: string;\n    scopes?: string;\n    responseMode?: string;\n    codeChallenge?: string;\n    codeChallengeMethod?: string;\n    prompt?: string;\n  } & ExtendedAuthorizeRequestUrlParams,\n  pkceOptions: {key: string},\n  customParams: Record<string, string | number | boolean>,\n): Map<string, string> => {\n  const {redirectUri, clientId, clientSecret, scopes, responseMode, codeChallenge, codeChallengeMethod, prompt} =\n    options;\n  const authorizeRequestParams: Map<string, string> = new Map<string, string>();\n\n  authorizeRequestParams.set('response_type', 'code');\n  authorizeRequestParams.set('client_id', clientId as string);\n\n  authorizeRequestParams.set('scope', scopes);\n  authorizeRequestParams.set('redirect_uri', redirectUri as string);\n\n  if (responseMode) {\n    authorizeRequestParams.set('response_mode', responseMode as string);\n  }\n\n  const pkceKey: string = pkceOptions?.key;\n\n  if (codeChallenge) {\n    authorizeRequestParams.set('code_challenge', codeChallenge as string);\n\n    if (codeChallengeMethod) {\n      authorizeRequestParams.set('code_challenge_method', codeChallengeMethod as string);\n    } else {\n      throw new AsgardeoRuntimeError(\n        'Code challenge method is required when code challenge is provided.',\n        'getAuthorizeRequestUrlParams-ValidationError-001',\n        'javascript',\n        'When PKCE is enabled, the code challenge method must be provided along with the code challenge.',\n      );\n    }\n  }\n\n  if (prompt) {\n    authorizeRequestParams.set('prompt', prompt as string);\n  }\n\n  if (customParams) {\n    for (const [key, value] of Object.entries(customParams)) {\n      if (key !== '' && value !== '' && key !== OIDCRequestConstants.Params.STATE) {\n        authorizeRequestParams.set(key, value.toString());\n      }\n    }\n  }\n\n  authorizeRequestParams.set(\n    OIDCRequestConstants.Params.STATE,\n    generateStateParamForRequestCorrelation(\n      pkceKey,\n      customParams ? customParams[OIDCRequestConstants.Params.STATE]?.toString() : '',\n    ),\n  );\n\n  return authorizeRequestParams;\n};\n\nexport default getAuthorizeRequestUrlParams;\n", "/**\n * Copyright (c) 2020, WSO2 LLC. (https://www.wso2.com). All Rights Reserved.\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport StorageManager from '../StorageManager';\nimport {AuthClientConfig, StrictAuthClientConfig} from './models';\nimport {ExtendedAuthorizeRequestUrlParams} from '../models/oauth-request';\nimport {Crypto} from '../models/crypto';\nimport {TokenResponse, IdToken, TokenExchangeRequestConfig} from '../models/token';\nimport {OIDCEndpoints} from '../models/oidc-endpoints';\nimport {Storage} from '../models/store';\nimport ScopeConstants from '../constants/ScopeConstants';\nimport OIDCDiscoveryConstants from '../constants/OIDCDiscoveryConstants';\nimport OIDCRequestConstants from '../constants/OIDCRequestConstants';\nimport {IsomorphicCrypto} from '../IsomorphicCrypto';\nimport extractPkceStorageKeyFromState from '../utils/extractPkceStorageKeyFromState';\nimport generateStateParamForRequestCorrelation from '../utils/generateStateParamForRequestCorrelation';\nimport {AsgardeoAuthException} from '../errors/exception';\nimport {AuthenticationHelper} from './helpers';\nimport {SessionData, UserSession} from '../models/session';\nimport {AuthorizeRequestUrlParams} from '../models/oauth-request';\nimport {TemporaryStore} from '../models/store';\nimport generatePkceStorageKey from '../utils/generatePkceStorageKey';\nimport {OIDCDiscoveryApiResponse} from '../models/oidc-discovery';\nimport getAuthorizeRequestUrlParams from '../utils/getAuthorizeRequestUrlParams';\nimport PKCEConstants from '../constants/PKCEConstants';\nimport {User} from '../models/user';\nimport processOpenIDScopes from '../utils/processOpenIDScopes';\n\n/**\n * Default configurations.\n */\nconst DefaultConfig: Partial<AuthClientConfig<unknown>> = {\n  clockTolerance: 300,\n  enablePKCE: true,\n  responseMode: 'query',\n  sendCookiesInRequests: true,\n  validateIDToken: true,\n  validateIDTokenIssuer: true,\n};\n\n/**\n * This class provides the necessary methods needed to implement authentication.\n */\nexport class AsgardeoAuthClient<T> {\n  private _storageManager!: StorageManager<T>;\n  private _config: () => Promise<AuthClientConfig>;\n  private _oidcProviderMetaData: () => Promise<OIDCDiscoveryApiResponse>;\n  private _authenticationHelper: AuthenticationHelper<T>;\n  private _cryptoUtils: Crypto;\n  private _cryptoHelper: IsomorphicCrypto;\n\n  private static _instanceID: number;\n\n  // FIXME: Validate this.\n  // Ref: https://github.com/asgardeo/asgardeo-auth-js-core/pull/205\n  static _authenticationHelper: any;\n\n  /**\n   * This is the constructor method that returns an instance of the .\n   *\n   * @param store - The store object.\n   *\n   * @example\n   * ```\n   * const _store: Store = new DataStore();\n   * const auth = new AsgardeoAuthClient<CustomClientConfig>(_store);\n   * ```\n   *\n   * {@link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#constructor}\n   *\n   * @preserve\n   */\n  public constructor() {}\n\n  /**\n   *\n   * This method initializes the SDK with the config data.\n   *\n   * @param config - The config object to initialize with.\n   *\n   * @example\n   * const config = \\{\n   *     afterSignInUrl: \"http://localhost:3000/sign-in\",\n   *     clientId: \"client ID\",\n   *     baseUrl: \"https://localhost:9443\"\n   * \\}\n   *\n   * await auth.initialize(config);\n   *\n   * {@link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#initialize}\n   *\n   * @preserve\n   */\n  public async initialize(\n    config: AuthClientConfig<T>,\n    store: Storage,\n    cryptoUtils: Crypto,\n    instanceID?: number,\n  ): Promise<void> {\n    const clientId: string = config.clientId;\n\n    if (!AsgardeoAuthClient._instanceID) {\n      AsgardeoAuthClient._instanceID = 0;\n    } else {\n      AsgardeoAuthClient._instanceID += 1;\n    }\n\n    if (instanceID) {\n      AsgardeoAuthClient._instanceID = instanceID;\n    }\n\n    if (!clientId) {\n      this._storageManager = new StorageManager<T>(`instance_${AsgardeoAuthClient._instanceID}`, store);\n    } else {\n      this._storageManager = new StorageManager<T>(`instance_${AsgardeoAuthClient._instanceID}-${clientId}`, store);\n    }\n\n    this._cryptoUtils = cryptoUtils;\n    this._cryptoHelper = new IsomorphicCrypto(cryptoUtils);\n    this._authenticationHelper = new AuthenticationHelper(this._storageManager, this._cryptoHelper);\n    this._config = async () => await this._storageManager.getConfigData();\n    this._oidcProviderMetaData = async () => await this._storageManager.loadOpenIDProviderConfiguration();\n\n    // FIXME: Validate this.\n    // Ref: https://github.com/asgardeo/asgardeo-auth-js-core/pull/205\n    AsgardeoAuthClient._authenticationHelper = this._authenticationHelper;\n\n    await this._storageManager.setConfigData({\n      ...DefaultConfig,\n      ...config,\n      scope: processOpenIDScopes(config.scopes),\n    });\n  }\n\n  /**\n   * This method returns the `StorageManager` object that allows you to access authentication data.\n   *\n   * @returns - The `StorageManager` object.\n   *\n   * @example\n   * ```\n   * const data = auth.getStorageManager();\n   * ```\n   *\n   * {@link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#getStorageManager}\n   *\n   * @preserve\n   */\n  public getStorageManager(): StorageManager<T> {\n    return this._storageManager;\n  }\n\n  /**\n   * This method returns the `instanceID` variable of the given instance.\n   *\n   * @returns - The `instanceID` number.\n   *\n   * @example\n   * ```\n   * const instanceId = auth.getInstanceId();\n   * ```\n   *\n   * @preserve\n   */\n  public getInstanceId(): number {\n    return AsgardeoAuthClient._instanceID;\n  }\n\n  /**\n   * This is an async method that returns a Promise that resolves with the authorization URL.\n   *\n   * @param config - (Optional) A config object to force initialization and pass\n   * custom path parameters such as the fidp parameter.\n   * @param userId - (Optional) A unique ID of the user to be authenticated. This is useful in multi-user\n   * scenarios where each user should be uniquely identified.\n   *\n   * @returns - A promise that resolves with the authorization URL.\n   *\n   * @example\n   * ```\n   * auth.getSignInUrl().then((url)=>{\n   *  // console.log(url);\n   * }).catch((error)=>{\n   *  // console.error(error);\n   * });\n   * ```\n   *\n   * {@link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#getSignInUrl}\n   *\n   * @preserve\n   */\n  public async getSignInUrl(requestConfig?: ExtendedAuthorizeRequestUrlParams, userId?: string): Promise<string> {\n    const authRequestConfig: ExtendedAuthorizeRequestUrlParams = {...requestConfig};\n\n    delete authRequestConfig?.forceInit;\n\n    const __TODO__ = async () => {\n      const authorizeEndpoint: string = (await this._storageManager.getOIDCProviderMetaDataParameter(\n        OIDCDiscoveryConstants.Storage.StorageKeys.Endpoints.AUTHORIZATION as keyof OIDCDiscoveryApiResponse,\n      )) as string;\n\n      if (!authorizeEndpoint || authorizeEndpoint.trim().length === 0) {\n        throw new AsgardeoAuthException(\n          'JS-AUTH_CORE-GAU-NF01',\n          'No authorization endpoint found.',\n          'No authorization endpoint was found in the OIDC provider meta data from the well-known endpoint ' +\n            'or the authorization endpoint passed to the SDK is empty.',\n        );\n      }\n\n      const authorizeRequest: URL = new URL(authorizeEndpoint);\n      const configData: StrictAuthClientConfig = await this._config();\n      const tempStore: TemporaryStore = await this._storageManager.getTemporaryData(userId);\n      const pkceKey: string = await generatePkceStorageKey(tempStore);\n\n      let codeVerifier: string | undefined;\n      let codeChallenge: string | undefined;\n\n      if (configData.enablePKCE) {\n        codeVerifier = this._cryptoHelper?.getCodeVerifier();\n        codeChallenge = this._cryptoHelper?.getCodeChallenge(codeVerifier);\n        await this._storageManager.setTemporaryDataParameter(pkceKey, codeVerifier, userId);\n      }\n\n      if (authRequestConfig['client_secret']) {\n        authRequestConfig['client_secret'] = configData.clientSecret;\n      }\n\n      const authorizeRequestParams: Map<string, string> = getAuthorizeRequestUrlParams(\n        {\n          redirectUri: configData.afterSignInUrl,\n          clientId: configData.clientId,\n          scopes: processOpenIDScopes(configData.scopes),\n          responseMode: configData.responseMode,\n          codeChallengeMethod: PKCEConstants.DEFAULT_CODE_CHALLENGE_METHOD,\n          codeChallenge,\n          prompt: configData.prompt,\n        },\n        {key: pkceKey},\n        authRequestConfig,\n      );\n\n      for (const [key, value] of authorizeRequestParams.entries()) {\n        authorizeRequest.searchParams.append(key, value);\n      }\n\n      return authorizeRequest.toString();\n    };\n\n    if (\n      await this._storageManager.getTemporaryDataParameter(\n        OIDCDiscoveryConstants.Storage.StorageKeys.OPENID_PROVIDER_CONFIG_INITIATED,\n      )\n    ) {\n      return __TODO__();\n    }\n\n    return this.loadOpenIDProviderConfiguration(requestConfig?.forceInit as boolean).then(() => {\n      return __TODO__();\n    });\n  }\n\n  /**\n   * This is an async method that sends a request to obtain the access token and returns a Promise\n   * that resolves with the token and other relevant data.\n   *\n   * @param authorizationCode - The authorization code.\n   * @param sessionState - The session state.\n   * @param userId - (Optional) A unique ID of the user to be authenticated. This is useful in multi-user\n   * scenarios where each user should be uniquely identified.\n   *\n   * @returns - A Promise that resolves with the token response.\n   *\n   * @example\n   * ```\n   * auth.requestAccessToken(authCode, sessionState).then((token)=>{\n   *  // console.log(token);\n   * }).catch((error)=>{\n   *  // console.error(error);\n   * });\n   * ```\n   *\n   * {@link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#requestAccessToken}\n   *\n   *\n   * @preserve\n   */\n  public async requestAccessToken(\n    authorizationCode: string,\n    sessionState: string,\n    state: string,\n    userId?: string,\n    tokenRequestConfig?: {\n      params: Record<string, unknown>;\n    },\n  ): Promise<TokenResponse> {\n    const __TODO__ = async () => {\n      const tokenEndpoint: string | undefined = (await this._oidcProviderMetaData()).token_endpoint;\n      const configData: StrictAuthClientConfig = await this._config();\n\n      if (!tokenEndpoint || tokenEndpoint.trim().length === 0) {\n        throw new AsgardeoAuthException(\n          'JS-AUTH_CORE-RAT1-NF01',\n          'Token endpoint not found.',\n          'No token endpoint was found in the OIDC provider meta data returned by the well-known endpoint ' +\n            'or the token endpoint passed to the SDK is empty.',\n        );\n      }\n\n      sessionState &&\n        (await this._storageManager.setSessionDataParameter(\n          OIDCRequestConstants.Params.SESSION_STATE as keyof SessionData,\n          sessionState,\n          userId,\n        ));\n\n      const body: URLSearchParams = new URLSearchParams();\n\n      body.set('client_id', configData.clientId);\n\n      if (configData.clientSecret && configData.clientSecret.trim().length > 0) {\n        body.set('client_secret', configData.clientSecret);\n      }\n\n      const code: string = authorizationCode;\n\n      body.set('code', code);\n\n      body.set('grant_type', 'authorization_code');\n      body.set('redirect_uri', configData.afterSignInUrl);\n\n      if (tokenRequestConfig?.params) {\n        Object.entries(tokenRequestConfig.params).forEach(([key, value]: [key: string, value: unknown]) => {\n          body.append(key, value as string);\n        });\n      }\n\n      if (configData.enablePKCE) {\n        body.set(\n          'code_verifier',\n          `${await this._storageManager.getTemporaryDataParameter(extractPkceStorageKeyFromState(state), userId)}`,\n        );\n\n        await this._storageManager.removeTemporaryDataParameter(extractPkceStorageKeyFromState(state), userId);\n      }\n\n      let tokenResponse: Response;\n\n      try {\n        tokenResponse = await fetch(tokenEndpoint, {\n          body: body,\n          credentials: configData.sendCookiesInRequests ? 'include' : 'same-origin',\n          headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/x-www-form-urlencoded',\n          },\n          method: 'POST',\n        });\n      } catch (error: any) {\n        throw new AsgardeoAuthException(\n          'JS-AUTH_CORE-RAT1-NE02',\n          'Requesting access token failed',\n          error ?? 'The request to get the access token from the server failed.',\n        );\n      }\n\n      if (!tokenResponse.ok) {\n        throw new AsgardeoAuthException(\n          'JS-AUTH_CORE-RAT1-HE03',\n          `Requesting access token failed with ${tokenResponse.statusText}`,\n          (await tokenResponse.json()) as string,\n        );\n      }\n\n      return await this._authenticationHelper.handleTokenResponse(tokenResponse, userId);\n    };\n\n    if (\n      await this._storageManager.getTemporaryDataParameter(\n        OIDCDiscoveryConstants.Storage.StorageKeys.OPENID_PROVIDER_CONFIG_INITIATED,\n      )\n    ) {\n      return __TODO__();\n    }\n\n    return this.loadOpenIDProviderConfiguration(false).then(() => {\n      return __TODO__();\n    });\n  }\n\n  public async loadOpenIDProviderConfiguration(forceInit: boolean): Promise<void> {\n    const configData: StrictAuthClientConfig = await this._config();\n\n    if (\n      !forceInit &&\n      (await this._storageManager.getTemporaryDataParameter(\n        OIDCDiscoveryConstants.Storage.StorageKeys.OPENID_PROVIDER_CONFIG_INITIATED,\n      ))\n    ) {\n      return Promise.resolve();\n    }\n\n    const wellKnownEndpoint: string = (configData as any).wellKnownEndpoint;\n\n    if (wellKnownEndpoint) {\n      let response: Response;\n\n      try {\n        response = await fetch(wellKnownEndpoint);\n        if (response.status !== 200 || !response.ok) {\n          throw new Error();\n        }\n      } catch {\n        throw new AsgardeoAuthException(\n          'JS-AUTH_CORE-GOPMD-HE01',\n          'Invalid well-known response',\n          'The well known endpoint response has been failed with an error.',\n        );\n      }\n\n      await this._storageManager.setOIDCProviderMetaData(\n        await this._authenticationHelper.resolveEndpoints(await response.json()),\n      );\n      await this._storageManager.setTemporaryDataParameter(\n        OIDCDiscoveryConstants.Storage.StorageKeys.OPENID_PROVIDER_CONFIG_INITIATED,\n        true,\n      );\n\n      return Promise.resolve();\n    } else if ((configData as any).baseUrl) {\n      try {\n        await this._storageManager.setOIDCProviderMetaData(\n          await this._authenticationHelper.resolveEndpointsByBaseURL(),\n        );\n      } catch (error: any) {\n        throw new AsgardeoAuthException(\n          'JS-AUTH_CORE-GOPMD-IV02',\n          'Resolving endpoints failed.',\n          error ?? 'Resolving endpoints by base url failed.',\n        );\n      }\n      await this._storageManager.setTemporaryDataParameter(\n        OIDCDiscoveryConstants.Storage.StorageKeys.OPENID_PROVIDER_CONFIG_INITIATED,\n        true,\n      );\n\n      return Promise.resolve();\n    } else {\n      await this._storageManager.setOIDCProviderMetaData(await this._authenticationHelper.resolveEndpointsExplicitly());\n\n      await this._storageManager.setTemporaryDataParameter(\n        OIDCDiscoveryConstants.Storage.StorageKeys.OPENID_PROVIDER_CONFIG_INITIATED,\n        true,\n      );\n\n      return Promise.resolve();\n    }\n  }\n\n  /**\n   * This method returns the sign-out URL.\n   *\n   * @param userId - (Optional) A unique ID of the user to be authenticated. This is useful in multi-user\n   * scenarios where each user should be uniquely identified.\n   *\n   * **This doesn't clear the authentication data.**\n   *\n   * @returns - A Promise that resolves with the sign-out URL.\n   *\n   * @example\n   * ```\n   * const signOutUrl = await auth.getSignOutUrl();\n   * ```\n   *\n   * {@link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#getSignOutUrl}\n   *\n   * @preserve\n   */\n  public async getSignOutUrl(userId?: string): Promise<string> {\n    const logoutEndpoint: string | undefined = (await this._oidcProviderMetaData())?.end_session_endpoint;\n    const configData: StrictAuthClientConfig = await this._config();\n\n    if (!logoutEndpoint || logoutEndpoint.trim().length === 0) {\n      throw new AsgardeoAuthException(\n        'JS-AUTH_CORE-GSOU-NF01',\n        'Sign-out endpoint not found.',\n        'No sign-out endpoint was found in the OIDC provider meta data returned by the well-known endpoint ' +\n          'or the sign-out endpoint passed to the SDK is empty.',\n      );\n    }\n\n    const callbackURL: string = configData?.afterSignOutUrl ?? configData?.afterSignInUrl;\n\n    if (!callbackURL || callbackURL.trim().length === 0) {\n      throw new AsgardeoAuthException(\n        'JS-AUTH_CORE-GSOU-NF03',\n        'No sign-out redirect URL found.',\n        'The sign-out redirect URL cannot be found or the URL passed to the SDK is empty. ' +\n          'No sign-in redirect URL has been found either. ',\n      );\n    }\n    const queryParams: URLSearchParams = new URLSearchParams();\n\n    queryParams.set('post_logout_redirect_uri', callbackURL);\n\n    if (configData.sendIdTokenInLogoutRequest) {\n      const idToken: string = (await this._storageManager.getSessionData(userId))?.id_token;\n\n      if (!idToken || idToken.trim().length === 0) {\n        throw new AsgardeoAuthException(\n          'JS-AUTH_CORE-GSOU-NF02',\n          'ID token not found.',\n          'No ID token could be found. Either the session information is lost or you have not signed in.',\n        );\n      }\n      queryParams.set('id_token_hint', idToken);\n    } else {\n      queryParams.set('client_id', configData.clientId);\n    }\n\n    queryParams.set('state', OIDCRequestConstants.Params.SIGN_OUT_SUCCESS);\n\n    return `${logoutEndpoint}?${queryParams.toString()}`;\n  }\n\n  /**\n   * This method returns OIDC service endpoints that are fetched from the `.well-known` endpoint.\n   *\n   * @returns - A Promise that resolves with an object containing the OIDC service endpoints.\n   *\n   * @example\n   * ```\n   * const endpoints = await auth.getOpenIDProviderEndpoints();\n   * ```\n   *\n   * {@link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#getOpenIDProviderEndpoints}\n   *\n   * @preserve\n   */\n  public async getOpenIDProviderEndpoints(): Promise<Partial<OIDCEndpoints>> {\n    const oidcProviderMetaData: OIDCDiscoveryApiResponse = await this._oidcProviderMetaData();\n\n    return {\n      authorizationEndpoint: oidcProviderMetaData.authorization_endpoint ?? '',\n      checkSessionIframe: oidcProviderMetaData.check_session_iframe ?? '',\n      endSessionEndpoint: oidcProviderMetaData.end_session_endpoint ?? '',\n      introspectionEndpoint: oidcProviderMetaData.introspection_endpoint ?? '',\n      issuer: oidcProviderMetaData.issuer ?? '',\n      jwksUri: oidcProviderMetaData.jwks_uri ?? '',\n      registrationEndpoint: oidcProviderMetaData.registration_endpoint ?? '',\n      revocationEndpoint: oidcProviderMetaData.revocation_endpoint ?? '',\n      tokenEndpoint: oidcProviderMetaData.token_endpoint ?? '',\n      userinfoEndpoint: oidcProviderMetaData.userinfo_endpoint ?? '',\n    };\n  }\n\n  /**\n   * This method decodes the payload of the ID token and returns it.\n   *\n   * @param userId - (Optional) A unique ID of the user to be authenticated. This is useful in multi-user\n   * scenarios where each user should be uniquely identified.\n   *\n   * @returns - A Promise that resolves with the decoded ID token payload.\n   *\n   * @example\n   * ```\n   * const decodedIdToken = await auth.getDecodedIdToken();\n   * ```\n   *\n   * {@link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#getDecodedIdToken}\n   *\n   * @preserve\n   */\n  public async getDecodedIdToken(userId?: string): Promise<IdToken> {\n    const idToken: string = (await this._storageManager.getSessionData(userId)).id_token;\n    const payload: IdToken = this._cryptoHelper.decodeIdToken(idToken);\n\n    return payload;\n  }\n\n  /**\n   * This method returns the ID token.\n   *\n   * @param userId - (Optional) A unique ID of the user to be authenticated. This is useful in multi-user\n   * scenarios where each user should be uniquely identified.\n   *\n   * @returns - A Promise that resolves with the ID token.\n   *\n   * @example\n   * ```\n   * const idToken = await auth.getIdToken();\n   * ```\n   *\n   * {@link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#getIdToken}\n   *\n   * @preserve\n   */\n  public async getIdToken(userId?: string): Promise<string> {\n    return (await this._storageManager.getSessionData(userId)).id_token;\n  }\n\n  /**\n   * This method returns the basic user information obtained from the ID token.\n   *\n   * @param userId - (Optional) A unique ID of the user to be authenticated. This is useful in multi-user\n   * scenarios where each user should be uniquely identified.\n   *\n   * @returns - A Promise that resolves with an object containing the basic user information.\n   *\n   * @example\n   * ```\n   * const userInfo = await auth.getUser();\n   * ```\n   *\n   * {@link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#getUser}\n   *\n   * @preserve\n   */\n  public async getUser(userId?: string): Promise<User> {\n    const sessionData: SessionData = await this._storageManager.getSessionData(userId);\n    const authenticatedUser: User = this._authenticationHelper.getAuthenticatedUserInfo(sessionData?.id_token);\n\n    Object.keys(authenticatedUser).forEach((key: string) => {\n      if (authenticatedUser[key] === undefined || authenticatedUser[key] === '' || authenticatedUser[key] === null) {\n        delete authenticatedUser[key];\n      }\n    });\n\n    return authenticatedUser;\n  }\n\n  public async getUserSession(userId?: string): Promise<UserSession> {\n    const sessionData: SessionData = await this._storageManager.getSessionData(userId);\n\n    return {\n      scopes: sessionData?.scope?.split(' '),\n      sessionState: sessionData?.session_state ?? '',\n    };\n  }\n\n  /**\n   * This method returns the crypto helper object.\n   *\n   * @returns - A Promise that resolves with a IsomorphicCrypto object.\n   *\n   * @example\n   * ```\n   * const cryptoHelper = await auth.IsomorphicCrypto();\n   * ```\n   *\n   * {@link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#getCrypto}\n   *\n   * @preserve\n   */\n  public async getCrypto(): Promise<IsomorphicCrypto> {\n    return this._cryptoHelper;\n  }\n\n  /**\n   * This method revokes the access token.\n   *\n   * @param userId - (Optional) A unique ID of the user to be authenticated. This is useful in multi-user\n   * scenarios where each user should be uniquely identified.\n   *\n   * **This method also clears the authentication data.**\n   *\n   * @returns - A Promise that returns the response of the revoke-access-token request.\n   *\n   * @example\n   * ```\n   * auth.revokeAccessToken().then((response)=>{\n   *  // console.log(response);\n   * }).catch((error)=>{\n   *  // console.error(error);\n   * });\n   * ```\n   *\n   * {@link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#revokeAccessToken}\n   *\n   * @preserve\n   */\n  public async revokeAccessToken(userId?: string): Promise<Response> {\n    const revokeTokenEndpoint: string | undefined = (await this._oidcProviderMetaData()).revocation_endpoint;\n    const configData: StrictAuthClientConfig = await this._config();\n\n    if (!revokeTokenEndpoint || revokeTokenEndpoint.trim().length === 0) {\n      throw new AsgardeoAuthException(\n        'JS-AUTH_CORE-RAT3-NF01',\n        'No revoke access token endpoint found.',\n        'No revoke access token endpoint was found in the OIDC provider meta data returned by ' +\n          'the well-known endpoint or the revoke access token endpoint passed to the SDK is empty.',\n      );\n    }\n\n    const body: string[] = [];\n\n    body.push(`client_id=${configData.clientId}`);\n    body.push(`token=${(await this._storageManager.getSessionData(userId)).access_token}`);\n    body.push('token_type_hint=access_token');\n\n    if (configData.clientSecret && configData.clientSecret.trim().length > 0) {\n      body.push(`client_secret=${configData.clientSecret}`);\n    }\n\n    let response: Response;\n\n    try {\n      response = await fetch(revokeTokenEndpoint, {\n        body: body.join('&'),\n        credentials: configData.sendCookiesInRequests ? 'include' : 'same-origin',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        method: 'POST',\n      });\n    } catch (error: any) {\n      throw new AsgardeoAuthException(\n        'JS-AUTH_CORE-RAT3-NE02',\n        'The request to revoke access token failed.',\n        error ?? 'The request sent to revoke the access token failed.',\n      );\n    }\n\n    if (response.status !== 200 || !response.ok) {\n      throw new AsgardeoAuthException(\n        'JS-AUTH_CORE-RAT3-HE03',\n        `Invalid response status received for revoke access token request (${response.statusText}).`,\n        (await response.json()) as string,\n      );\n    }\n\n    this._authenticationHelper.clearSession(userId);\n\n    return Promise.resolve(response);\n  }\n\n  /**\n   * This method refreshes the access token and returns a Promise that resolves with the new access\n   * token and other relevant data.\n   *\n   * @param userId - (Optional) A unique ID of the user to be authenticated. This is useful in multi-user\n   * scenarios where each user should be uniquely identified.\n   *\n   * @returns - A Promise that resolves with the token response.\n   *\n   * @example\n   * ```\n   * auth.refreshAccessToken().then((response)=>{\n   *  // console.log(response);\n   * }).catch((error)=>{\n   *  // console.error(error);\n   * });\n   * ```\n   *\n   * {@link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#refreshAccessToken}\n   *\n   * @preserve\n   */\n  public async refreshAccessToken(userId?: string): Promise<TokenResponse> {\n    const tokenEndpoint: string | undefined = (await this._oidcProviderMetaData()).token_endpoint;\n    const configData: StrictAuthClientConfig = await this._config();\n    const sessionData: SessionData = await this._storageManager.getSessionData(userId);\n\n    if (!sessionData.refresh_token) {\n      throw new AsgardeoAuthException(\n        'JS-AUTH_CORE-RAT2-NF01',\n        'No refresh token found.',\n        \"There was no refresh token found. Asgardeo doesn't return a \" +\n          'refresh token if the refresh token grant is not enabled.',\n      );\n    }\n\n    if (!tokenEndpoint || tokenEndpoint.trim().length === 0) {\n      throw new AsgardeoAuthException(\n        'JS-AUTH_CORE-RAT2-NF02',\n        'No refresh token endpoint found.',\n        'No refresh token endpoint was in the OIDC provider meta data returned by the well-known ' +\n          'endpoint or the refresh token endpoint passed to the SDK is empty.',\n      );\n    }\n\n    const body: string[] = [];\n\n    body.push(`client_id=${configData.clientId}`);\n    body.push(`refresh_token=${sessionData.refresh_token}`);\n    body.push('grant_type=refresh_token');\n\n    if (configData.clientSecret && configData.clientSecret.trim().length > 0) {\n      body.push(`client_secret=${configData.clientSecret}`);\n    }\n\n    let tokenResponse: Response;\n\n    try {\n      tokenResponse = await fetch(tokenEndpoint, {\n        body: body.join('&'),\n        credentials: configData.sendCookiesInRequests ? 'include' : 'same-origin',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        method: 'POST',\n      });\n    } catch (error: any) {\n      throw new AsgardeoAuthException(\n        'JS-AUTH_CORE-RAT2-NR03',\n        'Refresh access token request failed.',\n        error ?? 'The request to refresh the access token failed.',\n      );\n    }\n\n    if (!tokenResponse.ok) {\n      throw new AsgardeoAuthException(\n        'JS-AUTH_CORE-RAT2-HE04',\n        `Refreshing access token failed with ${tokenResponse.statusText}`,\n        (await tokenResponse.json()) as string,\n      );\n    }\n\n    return this._authenticationHelper.handleTokenResponse(tokenResponse, userId);\n  }\n\n  /**\n   * This method returns the access token.\n   *\n   * @param userId - (Optional) A unique ID of the user to be authenticated. This is useful in multi-user\n   * scenarios where each user should be uniquely identified.\n   *\n   * @returns - A Promise that resolves with the access token.\n   *\n   * @example\n   * ```\n   * const accessToken = await auth.getAccessToken();\n   * ```\n   *\n   * {@link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#getAccessToken}\n   *\n   * @preserve\n   */\n  public async getAccessToken(userId?: string): Promise<string> {\n    return (await this._storageManager.getSessionData(userId))?.access_token;\n  }\n\n  /**\n   * This method sends a custom-grant request and returns a Promise that resolves with the response\n   * depending on the config passed.\n   *\n   * @param config - A config object containing the custom grant configurations.\n   * @param userId - (Optional) A unique ID of the user to be authenticated. This is useful in multi-user\n   * scenarios where each user should be uniquely identified.\n   *\n   * @returns - A Promise that resolves with the response depending\n   * on your configurations.\n   *\n   * @example\n   * ```\n   * const config = {\n   *   attachToken: false,\n   *   data: {\n   *       client_id: \"{{clientId}}\",\n   *       grant_type: \"account_switch\",\n   *       scope: \"{{scope}}\",\n   *       token: \"{{token}}\",\n   *   },\n   *   id: \"account-switch\",\n   *   returnResponse: true,\n   *   returnsSession: true,\n   *   signInRequired: true\n   * }\n   *\n   * auth.exchangeToken(config).then((response)=>{\n   *  // console.log(response);\n   * }).catch((error)=>{\n   *  // console.error(error);\n   * });\n   * ```\n   *\n   * {@link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#exchangeToken}\n   *\n   * @preserve\n   */\n  public async exchangeToken(config: TokenExchangeRequestConfig, userId?: string): Promise<TokenResponse | Response> {\n    const oidcProviderMetadata: OIDCDiscoveryApiResponse = await this._oidcProviderMetaData();\n    const configData: StrictAuthClientConfig = await this._config();\n\n    let tokenEndpoint: string | undefined;\n\n    if (config.tokenEndpoint && config.tokenEndpoint.trim().length !== 0) {\n      tokenEndpoint = config.tokenEndpoint;\n    } else {\n      tokenEndpoint = oidcProviderMetadata.token_endpoint;\n    }\n\n    if (!tokenEndpoint || tokenEndpoint.trim().length === 0) {\n      throw new AsgardeoAuthException(\n        'JS-AUTH_CORE-RCG-NF01',\n        'Token endpoint not found.',\n        'No token endpoint was found in the OIDC provider meta data returned by the well-known endpoint ' +\n          'or the token endpoint passed to the SDK is empty.',\n      );\n    }\n\n    const data: string[] = await Promise.all(\n      Object.entries(config.data).map(async ([key, value]: [key: string, value: any]) => {\n        const newValue: string = await this._authenticationHelper.replaceCustomGrantTemplateTags(\n          value as string,\n          userId,\n        );\n\n        return `${key}=${newValue}`;\n      }),\n    );\n\n    let requestHeaders: Record<string, any> = {\n      Accept: 'application/json',\n      'Content-Type': 'application/x-www-form-urlencoded',\n    };\n\n    if (config.attachToken) {\n      requestHeaders = {\n        ...requestHeaders,\n        Authorization: `Bearer ${(await this._storageManager.getSessionData(userId)).access_token}`,\n      };\n    }\n\n    const requestConfig: RequestInit = {\n      body: data.join('&'),\n      credentials: configData.sendCookiesInRequests ? 'include' : 'same-origin',\n      headers: new Headers(requestHeaders),\n      method: 'POST',\n    };\n\n    let response: Response;\n\n    try {\n      response = await fetch(tokenEndpoint, requestConfig);\n    } catch (error: any) {\n      throw new AsgardeoAuthException(\n        'JS-AUTH_CORE-RCG-NE02',\n        'The custom grant request failed.',\n        error ?? 'The request sent to get the custom grant failed.',\n      );\n    }\n\n    if (response.status !== 200 || !response.ok) {\n      throw new AsgardeoAuthException(\n        'JS-AUTH_CORE-RCG-HE03',\n        `Invalid response status received for the custom grant request. (${response.statusText})`,\n        (await response.json()) as string,\n      );\n    }\n\n    if (config.returnsSession) {\n      return this._authenticationHelper.handleTokenResponse(response, userId);\n    } else {\n      return Promise.resolve((await response.json()) as TokenResponse | Response);\n    }\n  }\n\n  /**\n   * This method returns if the user is authenticated or not.\n   *\n   * @param userId - (Optional) A unique ID of the user to be authenticated. This is useful in multi-user\n   * scenarios where each user should be uniquely identified.\n   *\n   * @returns - A Promise that resolves with `true` if the user is authenticated, `false` otherwise.\n   *\n   * @example\n   * ```\n   * await auth.isSignedIn();\n   * ```\n   *\n   * {@link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#isSignedIn}\n   *\n   * @preserve\n   */\n  public async isSignedIn(userId?: string): Promise<boolean> {\n    const isAccessTokenAvailable: boolean = Boolean(await this.getAccessToken(userId));\n\n    // Check if the access token is expired.\n    const createdAt: number = (await this._storageManager.getSessionData(userId))?.created_at;\n\n    // Get the expires in value.\n    const expiresInString: string = (await this._storageManager.getSessionData(userId))?.expires_in;\n\n    // If the expires in value is not available, the token is invalid and the user is not authenticated.\n    if (!expiresInString) {\n      return false;\n    }\n\n    // Convert to milliseconds.\n    const expiresIn: number = parseInt(expiresInString) * 1000;\n    const currentTime: number = new Date().getTime();\n    const isAccessTokenValid: boolean = createdAt + expiresIn > currentTime;\n\n    const isSignedIn: boolean = isAccessTokenAvailable && isAccessTokenValid;\n\n    return isSignedIn;\n  }\n\n  /**\n   * This method returns the PKCE code generated during the generation of the authentication URL.\n   *\n   * @param userId - (Optional) A unique ID of the user to be authenticated. This is useful in multi-user\n   * scenarios where each user should be uniquely identified.\n   * @param state - The state parameter that was passed in the authentication URL.\n   *\n   * @returns - A Promise that resolves with the PKCE code.\n   *\n   * @example\n   * ```\n   * const pkce = await getPKCECode();\n   * ```\n   *\n   * {@link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#getPKCECode}\n   *\n   * @preserve\n   */\n  public async getPKCECode(state: string, userId?: string): Promise<string> {\n    return (await this._storageManager.getTemporaryDataParameter(\n      extractPkceStorageKeyFromState(state),\n      userId,\n    )) as string;\n  }\n\n  /**\n   * This method sets the PKCE code to the data store.\n   *\n   * @param pkce - The PKCE code.\n   * @param state - The state parameter that was passed in the authentication URL.\n   * @param userId - (Optional) A unique ID of the user to be authenticated. This is useful in multi-user\n   * scenarios where each user should be uniquely identified.\n   *\n   * @example\n   * ```\n   * await auth.setPKCECode(\"pkce_code\")\n   * ```\n   *\n   * {@link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#setPKCECode}\n   *\n   * @preserve\n   */\n  public async setPKCECode(pkce: string, state: string, userId?: string): Promise<void> {\n    return await this._storageManager.setTemporaryDataParameter(extractPkceStorageKeyFromState(state), pkce, userId);\n  }\n\n  /**\n   * This method returns if the sign-out is successful or not.\n   *\n   * @param signOutRedirectUrl - The URL to which the user has been redirected to after signing-out.\n   *\n   * **The server appends path parameters to the `afterSignOutUrl` and these path parameters\n   *  are required for this method to function.**\n   *\n   * @returns - `true` if successful, `false` otherwise.\n   *\n   * {@link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#isSignOutSuccessful}\n   *\n   * @preserve\n   */\n  public static isSignOutSuccessful(afterSignOutUrl: string): boolean {\n    const url: URL = new URL(afterSignOutUrl);\n    const stateParam: string | null = url.searchParams.get(OIDCRequestConstants.Params.STATE);\n    const error: boolean = Boolean(url.searchParams.get('error'));\n\n    return stateParam ? stateParam === OIDCRequestConstants.Params.SIGN_OUT_SUCCESS && !error : false;\n  }\n\n  /**\n   * This method returns if the sign-out has failed or not.\n   *\n   * @param signOutRedirectUrl - The URL to which the user has been redirected to after signing-out.\n   *\n   * **The server appends path parameters to the `afterSignOutUrl` and these path parameters\n   *  are required for this method to function.**\n   *\n   * @returns - `true` if successful, `false` otherwise.\n   *\n   * {@link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#didSignOutFail}\n   *\n   * @preserve\n   */\n  public static didSignOutFail(afterSignOutUrl: string): boolean {\n    const url: URL = new URL(afterSignOutUrl);\n    const stateParam: string | null = url.searchParams.get(OIDCRequestConstants.Params.STATE);\n    const error: boolean = Boolean(url.searchParams.get('error'));\n\n    return stateParam ? stateParam === OIDCRequestConstants.Params.SIGN_OUT_SUCCESS && error : false;\n  }\n\n  /**\n   * This method updates the configuration that was passed into the constructor when instantiating this class.\n   *\n   * @param config - A config object to update the SDK configurations with.\n   *\n   * @example\n   * ```\n   * const config = {\n   *     afterSignInUrl: \"http://localhost:3000/sign-in\",\n   *     clientId: \"client ID\",\n   *     baseUrl: \"https://localhost:9443\"\n   * }\n   *\n   * await auth.reInitialize(config);\n   * ```\n   * {@link https://github.com/asgardeo/asgardeo-auth-js-sdk/tree/master#reInitialize}\n   *\n   * @preserve\n   */\n  public async reInitialize(config: Partial<AuthClientConfig<T>>): Promise<void> {\n    await this._storageManager.setConfigData(config);\n    await this.loadOpenIDProviderConfiguration(true);\n  }\n\n  public static async clearSession(userId?: string): Promise<void> {\n    await this._authenticationHelper.clearSession(userId);\n  }\n}\n", "/**\n * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport AsgardeoError from './AsgardeoError';\n\n/**\n * Base class for all API-related errors in Asgardeo. This class extends AsgardeoError\n * and adds support for HTTP status codes and status text.\n *\n * @example\n * ```typescript\n * throw new AsgardeoAPIError(\n *   \"Failed to fetch user data\",\n *   \"API_FETCH_ERROR\",\n *   404,\n *   \"Not Found\"\n * );\n * ```\n */\nexport default class AsgardeoAPIError extends AsgardeoError {\n  /**\n   * Creates an instance of AsgardeoAPIError.\n   *\n   * @param message - Human-readable description of the error\n   * @param code - A unique error code that identifies the error type\n   * @param statusCode - HTTP status code of the failed request\n   * @param statusText - HTTP status text of the failed request\n   * @param origin - Optional. The SDK origin (e.g. 'react', 'vue'). Defaults to generic 'Asgardeo'\n   * @constructor\n   */\n  constructor(\n    message: string,\n    code: string,\n    origin: string,\n    public readonly statusCode?: number,\n    public readonly statusText?: string,\n  ) {\n    super(message, code, origin);\n\n    Object.defineProperty(this, 'name', {\n      value: 'AsgardeoAPIError',\n      configurable: true,\n      writable: true,\n    });\n  }\n\n  /**\n   * Returns a string representation of the API error\n   * @returns Formatted error string with name, code, status, and message\n   */\n  public override toString(): string {\n    const status = this.statusCode ? ` (HTTP ${this.statusCode} - ${this.statusText})` : '';\n    return `[${this.name}] (code=\"${this.code}\")${status}\\nMessage: ${this.message}`;\n  }\n}\n", "/**\n * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport AsgardeoAPIError from '../errors/AsgardeoAPIError';\nimport {EmbeddedFlowExecuteRequestConfig} from '../models/embedded-flow';\nimport {EmbeddedSignInFlowInitiateResponse} from '../models/embedded-signin-flow';\n\n/**\n * Sends an authorization request to the specified OAuth2/OIDC authorization endpoint.\n *\n * @param requestConfig - Request configuration object containing URL and payload.\n * @returns A promise that resolves with the authorization response.\n * @throws AsgardeoAPIError when the request fails or URL is invalid.\n *\n * @example\n * ```typescript\n * try {\n *   const authResponse = await initializeEmbeddedSignInFlow({\n *     url: \"https://api.asgardeo.io/t/<ORGANIZATION>/oauth2/authorize\",\n *     payload: {\n *       response_type: \"code\",\n *       client_id: \"your-client-id\",\n *       redirect_uri: \"https://your-app.com/callback\",\n *       scope: \"openid profile email\",\n *       state: \"random-state-value\",\n *       code_challenge: \"your-pkce-challenge\",\n *       code_challenge_method: \"S256\"\n *     }\n *   });\n *   console.log(authResponse);\n * } catch (error) {\n *   if (error instanceof AsgardeoAPIError) {\n *     console.error('Authorization failed:', error.message);\n *   }\n * }\n * ```\n */\nconst initializeEmbeddedSignInFlow = async ({\n  url,\n  baseUrl,\n  payload,\n  ...requestConfig\n}: EmbeddedFlowExecuteRequestConfig): Promise<EmbeddedSignInFlowInitiateResponse> => {\n  if (!payload) {\n    throw new AsgardeoAPIError(\n      'Authorization payload is required',\n      'initializeEmbeddedSignInFlow-ValidationError-002',\n      'javascript',\n      400,\n      'If an authorization payload is not provided, the request cannot be constructed correctly.',\n    );\n  }\n\n  const searchParams = new URLSearchParams();\n  Object.entries(payload).forEach(([key, value]) => {\n    if (value !== undefined && value !== null) {\n      searchParams.append(key, String(value));\n    }\n  });\n\n  const response: Response = await fetch(url ?? `${baseUrl}/oauth2/authorize`, {\n    ...requestConfig,\n    method: requestConfig.method || 'POST',\n    headers: {\n      ...requestConfig.headers,\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Accept: 'application/json',\n    },\n    body: searchParams.toString(),\n  });\n\n  if (!response.ok) {\n    const errorText = await response.text();\n\n    throw new AsgardeoAPIError(\n      `Authorization request failed: ${errorText}`,\n      'initializeEmbeddedSignInFlow-ResponseError-001',\n      'javascript',\n      response.status,\n      response.statusText,\n    );\n  }\n\n  return (await response.json()) as EmbeddedSignInFlowInitiateResponse;\n};\n\nexport default initializeEmbeddedSignInFlow;\n", "/**\n * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport AsgardeoAPIError from '../errors/AsgardeoAPIError';\nimport {EmbeddedFlowExecuteRequestConfig} from '../models/embedded-flow';\nimport {EmbeddedSignInFlowHandleResponse} from '../models/embedded-signin-flow';\n\nconst executeEmbeddedSignInFlow = async ({\n  url,\n  baseUrl,\n  payload,\n  ...requestConfig\n}: EmbeddedFlowExecuteRequestConfig): Promise<EmbeddedSignInFlowHandleResponse> => {\n  if (!payload) {\n    throw new AsgardeoAPIError(\n      'Authorization payload is required',\n      'executeEmbeddedSignInFlow-ValidationError-002',\n      'javascript',\n      400,\n      'If an authorization payload is not provided, the request cannot be constructed correctly.',\n    );\n  }\n\n  const response: Response = await fetch(url ?? `${baseUrl}/oauth2/authn`, {\n    ...requestConfig,\n    method: requestConfig.method || 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Accept: 'application/json',\n      ...requestConfig.headers,\n    },\n    body: JSON.stringify(payload),\n  });\n\n  if (!response.ok) {\n    const errorText = await response.text();\n\n    throw new AsgardeoAPIError(\n      `Authorization request failed: ${errorText}`,\n      'initializeEmbeddedSignInFlow-ResponseError-001',\n      'javascript',\n      response.status,\n      response.statusText,\n    );\n  }\n\n  return (await response.json()) as EmbeddedSignInFlowHandleResponse;\n};\n\nexport default executeEmbeddedSignInFlow;\n", "/**\n * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nexport enum EmbeddedFlowType {\n  Registration = 'REGISTRATION',\n}\n\nexport interface EmbeddedFlowExecuteRequestPayload {\n  actionId?: string;\n  flowType: EmbeddedFlowType;\n  inputs?: Record<string, any>;\n}\n\nexport interface EmbeddedFlowExecuteResponse {\n  data: EmbeddedSignUpFlowData;\n  flowId: string;\n  flowStatus: EmbeddedFlowStatus;\n  type: EmbeddedFlowResponseType;\n}\n\nexport enum EmbeddedFlowStatus {\n  Complete = 'COMPLETE',\n  Incomplete = 'INCOMPLETE',\n}\n\nexport enum EmbeddedFlowResponseType {\n  Redirection = 'REDIRECTION',\n  View = 'VIEW',\n}\n\nexport interface EmbeddedSignUpFlowData {\n  components?: EmbeddedFlowComponent[];\n  redirectURL?: string;\n}\n\nexport interface EmbeddedFlowComponent {\n  components: EmbeddedFlowComponent[];\n  config: Record<string, any>;\n  id: string;\n  type: EmbeddedFlowComponentType;\n  variant?: string;\n}\n\nexport enum EmbeddedFlowComponentType {\n  Button = 'BUTTON',\n  Checkbox = 'CHECKBOX',\n  Divider = 'DIVIDER',\n  Form = 'FORM',\n  Image = 'IMAGE',\n  Input = 'INPUT',\n  Radio = 'RADIO',\n  Select = 'SELECT',\n  Typography = 'TYPOGRAPHY',\n}\n\nexport interface EmbeddedFlowExecuteRequestConfig<T = any> extends Partial<Request> {\n  baseUrl?: string;\n  payload?: T;\n  url?: string;\n}\n", "/**\n * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport AsgardeoAPIError from '../errors/AsgardeoAPIError';\nimport {EmbeddedFlowType, EmbeddedFlowExecuteResponse, EmbeddedFlowExecuteRequestConfig} from '../models/embedded-flow';\n\n/**\n * Executes an embedded signup flow by sending a request to the specified flow execution endpoint.\n *\n * @param requestConfig - Request configuration object containing URL and payload.\n * @returns A promise that resolves with the flow execution response.\n * @throws AsgardeoAPIError when the request fails or URL is invalid.\n *\n * @example\n * ```typescript\n * try {\n *   const embeddedSignUpResponse = await executeEmbeddedSignUpFlow({\n *     url: \"https://api.asgardeo.io/t/<ORGANIZATION>/api/server/v1/flow/execute\",\n *     payload: {\n *       flowType: \"REGISTRATION\"\n *     }\n *   });\n *   console.log(embeddedSignUpResponse);\n * } catch (error) {\n *   if (error instanceof AsgardeoAPIError) {\n *     console.error('Embedded SignUp flow execution failed:', error.message);\n *   }\n * }\n * ```\n */\nconst executeEmbeddedSignUpFlow = async ({\n  url,\n  baseUrl,\n  payload,\n  ...requestConfig\n}: EmbeddedFlowExecuteRequestConfig): Promise<EmbeddedFlowExecuteResponse> => {\n  if (!baseUrl && !url) {\n    throw new AsgardeoAPIError(\n      'Embedded SignUp flow execution failed: Base URL or URL is not provided.',\n      'javascript-executeEmbeddedSignUpFlow-ValidationError-001',\n      'javascript',\n      400,\n      'At least one of the baseUrl or url must be provided to execute the embedded sign up flow.',\n    );\n  }\n\n  const response: Response = await fetch(url ?? `${baseUrl}/api/server/v1/flow/execute`, {\n    ...requestConfig,\n    method: requestConfig.method || 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Accept: 'application/json',\n      ...requestConfig.headers,\n    },\n    body: JSON.stringify({\n      ...(payload ?? {}),\n      flowType: EmbeddedFlowType.Registration,\n    }),\n  });\n\n  if (!response.ok) {\n    const errorText = await response.text();\n\n    throw new AsgardeoAPIError(\n      `Embedded SignUp flow execution failed: ${errorText}`,\n      'javascript-executeEmbeddedSignUpFlow-ResponseError-100',\n      'javascript',\n      response.status,\n      response.statusText,\n    );\n  }\n\n  return (await response.json()) as EmbeddedFlowExecuteResponse;\n};\n\nexport default executeEmbeddedSignUpFlow;\n", "/**\n * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport {User} from '../models/user';\nimport AsgardeoAPIError from '../errors/AsgardeoAPIError';\n\n/**\n * Retrieves the user information from the specified OIDC userinfo endpoint.\n *\n * @param requestConfig - Request configuration object.\n * @returns A promise that resolves with the user information.\n * @throw\n *   const userInfo = await getUserInfo({\n *     url: \"https://api.asgardeo.io/t/<ORGANIZATION>/oauth2/userinfo\",\n *   });\n *   console.log(userInfo);\n * } catch (error) {\n *   if (error instanceof AsgardeoAPIError) {\n *     console.error('Failed to get user info:', error.message);\n *   }\n * }\n * ```\n */\nconst getUserInfo = async ({url, ...requestConfig}: Partial<Request>): Promise<User> => {\n  try {\n    new URL(url);\n  } catch (error) {\n    throw new AsgardeoAPIError(\n      'Invalid endpoint URL provided',\n      'getUserInfo-ValidationError-001',\n      'javascript',\n      400,\n      'Invalid Request',\n    );\n  }\n\n  const response: Response = await fetch(url, {\n    ...requestConfig,\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      Accept: 'application/json',\n      ...requestConfig.headers,\n    },\n  });\n\n  if (!response.ok) {\n    const errorText = await response.text();\n\n    throw new AsgardeoAPIError(\n      `Failed to fetch user info: ${errorText}`,\n      'getUserInfo-ResponseError-001',\n      'javascript',\n      response.status,\n      response.statusText,\n    );\n  }\n\n  return (await response.json()) as User;\n};\n\nexport default getUserInfo;\n", "/**\n * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/**\n * Regular expression to match userstore prefixes in usernames.\n * Matches patterns like \"DEFAULT/\", \"ASGARDEO_USER/\", \"PRIMARY/\", etc.\n * The pattern matches any uppercase letters, numbers, and underscores followed by a forward slash.\n */\nconst USERSTORE_PREFIX_REGEX = /^[A-Z_][A-Z0-9_]*\\//;\n\n/**\n * Removes userstore prefixes from a username if they exist.\n * This is commonly used to clean usernames returned from SCIM2 endpoints\n * that include userstore prefixes like \"DEFAULT/\", \"ASGARDEO_USER/\", \"PRIMARY/\", etc.\n *\n * @param username - The username string to process\n * @returns The username without the userstore prefix, or the original username if no prefix exists\n *\n * @example\n * ```typescript\n * const cleanUsername = removeUserstorePrefix(\"DEFAULT/john.doe\");\n * console.log(cleanUsername); // \"john.doe\"\n *\n * const asgardeoUser = removeUserstorePrefix(\"ASGARDEO_USER/jane.doe\");\n * console.log(asgardeoUser); // \"jane.doe\"\n *\n * const primaryUser = removeUserstorePrefix(\"PRIMARY/admin\");\n * console.log(primaryUser); // \"admin\"\n *\n * const alreadyClean = removeUserstorePrefix(\"user.name\");\n * console.log(alreadyClean); // \"user.name\"\n *\n * const emptyInput = removeUserstorePrefix(\"\");\n * console.log(emptyInput); // \"\"\n * ```\n */\nexport const removeUserstorePrefix = (username?: string): string => {\n  if (!username) {\n    return '';\n  }\n\n  return username.replace(USERSTORE_PREFIX_REGEX, '');\n};\n\n/**\n * Processes a user object to remove userstore prefixes from username fields.\n * This is a helper function for processing user objects returned from SCIM2 endpoints.\n * Handles various username field variations: username, userName, and user_name.\n *\n * @param user - The user object to process\n * @returns The user object with processed username fields\n *\n * @example\n * ```typescript\n * const user = { username: \"DEFAULT/john.doe\", email: \"john@example.com\" };\n * const processedUser = processUserUsername(user);\n * console.log(processedUser.username); // \"john.doe\"\n *\n * const camelCaseUser = { userName: \"ASGARDEO_USER/jane.doe\", email: \"jane@example.com\" };\n * const processedCamelCaseUser = processUserUsername(camelCaseUser);\n * console.log(processedCamelCaseUser.userName); // \"jane.doe\"\n *\n * const snakeCaseUser = { user_name: \"PRIMARY/admin\", email: \"admin@example.com\" };\n * const processedSnakeCaseUser = processUserUsername(snakeCaseUser);\n * console.log(processedSnakeCaseUser.user_name); // \"admin\"\n * ```\n */\nconst processUsername = <T extends {username?: string; userName?: string; user_name?: string}>(user: T): T => {\n  if (!user) {\n    return user;\n  }\n\n  const processedUser = {...user};\n\n  // Process username field\n  if (processedUser.username) {\n    processedUser.username = removeUserstorePrefix(processedUser.username);\n  }\n\n  // Process userName field\n  if (processedUser.userName) {\n    processedUser.userName = removeUserstorePrefix(processedUser.userName);\n  }\n\n  // Process user_name field\n  if (processedUser.user_name) {\n    processedUser.user_name = removeUserstorePrefix(processedUser.user_name);\n  }\n\n  return processedUser;\n};\n\nexport default processUsername;\n", "/**\n * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport {User} from '../models/user';\nimport AsgardeoAPIError from '../errors/AsgardeoAPIError';\nimport processUserUsername from '../utils/processUsername';\n\n/**\n * Configuration for the getScim2Me request\n */\nexport interface GetScim2MeConfig extends Omit<RequestInit, 'method'> {\n  /**\n   * The absolute API endpoint.\n   */\n  url?: string;\n  /**\n   * The base path of the API endpoint.\n   */\n  baseUrl?: string;\n  /**\n   * Optional custom fetcher function.\n   * If not provided, native fetch will be used\n   */\n  fetcher?: (url: string, config: RequestInit) => Promise<Response>;\n}\n\n/**\n * Retrieves the user profile information from the specified SCIM2 /Me endpoint.\n *\n * @param config - Request configuration object.\n * @returns A promise that resolves with the user profile information.\n * @example\n * ```typescript\n * // Using default fetch\n * try {\n *   const userProfile = await getScim2Me({\n *     url: \"https://api.asgardeo.io/t/<ORGANIZATION>/scim2/Me\",\n *   });\n *   console.log(userProfile);\n * } catch (error) {\n *   if (error instanceof AsgardeoAPIError) {\n *     console.error('Failed to get user profile:', error.message);\n *   }\n * }\n * ```\n *\n * @example\n * ```typescript\n * // Using custom fetcher (e.g., axios-based httpClient)\n * try {\n *   const userProfile = await getScim2Me({\n *     url: \"https://api.asgardeo.io/t/<ORGANIZATION>/scim2/Me\",\n *     fetcher: async (url, config) => {\n *       const response = await httpClient({\n *         url,\n *         method: config.method,\n *         headers: config.headers,\n *         ...config\n *       });\n *       // Convert axios-like response to fetch-like Response\n *       return {\n *         ok: response.status >= 200 && response.status < 300,\n *         status: response.status,\n *         statusText: response.statusText,\n *         json: () => Promise.resolve(response.data),\n *         text: () => Promise.resolve(typeof response.data === 'string' ? response.data : JSON.stringify(response.data))\n *       } as Response;\n *     }\n *   });\n *   console.log(userProfile);\n * } catch (error) {\n *   if (error instanceof AsgardeoAPIError) {\n *     console.error('Failed to get user profile:', error.message);\n *   }\n * }\n * ```\n */\nconst getScim2Me = async ({url, baseUrl, fetcher, ...requestConfig}: GetScim2MeConfig): Promise<User> => {\n  try {\n    new URL(url ?? baseUrl);\n  } catch (error) {\n    throw new AsgardeoAPIError(\n      `Invalid URL provided. ${error?.toString()}`,\n      'getScim2Me-ValidationError-001',\n      'javascript',\n      400,\n      'The provided `url` or `baseUrl` path does not adhere to the URL schema.',\n    );\n  }\n\n  const fetchFn = fetcher || fetch;\n  const resolvedUrl: string = url ?? `${baseUrl}/scim2/Me`;\n\n  const requestInit: RequestInit = {\n    ...requestConfig,\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/scim+json',\n      Accept: 'application/json',\n      ...requestConfig.headers,\n    },\n  };\n\n  try {\n    const response: Response = await fetchFn(resolvedUrl, requestInit);\n\n    if (!response?.ok) {\n      const errorText = await response.text();\n\n      throw new AsgardeoAPIError(\n        `Failed to fetch user profile: ${errorText}`,\n        'getScim2Me-ResponseError-001',\n        'javascript',\n        response.status,\n        response.statusText,\n      );\n    }\n\n    const user = (await response.json()) as User;\n\n    return processUserUsername(user);\n  } catch (error) {\n    if (error instanceof AsgardeoAPIError) {\n      throw error;\n    }\n\n    throw new AsgardeoAPIError(\n      `Network or parsing error: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      'getScim2Me-NetworkError-001',\n      'javascript',\n      0,\n      'Network Error',\n    );\n  }\n};\n\nexport default getScim2Me;\n", "/**\n * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport {Schema} from '../models/scim2-schema';\nimport AsgardeoAPIError from '../errors/AsgardeoAPIError';\n\n/**\n * Configuration for the getSchemas request\n */\nexport interface GetSchemasConfig extends Omit<RequestInit, 'method'> {\n  /**\n   * The absolute API endpoint.\n   */\n  url?: string;\n  /**\n   * The base path of the API endpoint.\n   */\n  baseUrl?: string;\n  /**\n   * Optional custom fetcher function.\n   * If not provided, native fetch will be used\n   */\n  fetcher?: (url: string, config: RequestInit) => Promise<Response>;\n}\n\n/**\n * Retrieves the SCIM2 schemas from the specified endpoint.\n *\n * @param config - Request configuration object.\n * @returns A promise that resolves with the SCIM2 schemas information.\n * @example\n * ```typescript\n * // Using default fetch\n * try {\n *   const schemas = await getSchemas({\n *     url: \"https://api.asgardeo.io/t/<ORGANIZATION>/scim2/Schemas\",\n *   });\n *   console.log(schemas);\n * } catch (error) {\n *   if (error instanceof AsgardeoAPIError) {\n *     console.error('Failed to get schemas:', error.message);\n *   }\n * }\n * ```\n *\n * @example\n * ```typescript\n * // Using custom fetcher (e.g., axios-based httpClient)\n * try {\n *   const schemas = await getSchemas({\n *     url: \"https://api.asgardeo.io/t/<ORGANIZATION>/scim2/Schemas\",\n *     fetcher: async (url, config) => {\n *       const response = await httpClient({\n *         url,\n *         method: config.method,\n *         headers: config.headers,\n *         ...config\n *       });\n *       // Convert axios-like response to fetch-like Response\n *       return {\n *         ok: response.status >= 200 && response.status < 300,\n *         status: response.status,\n *         statusText: response.statusText,\n *         json: () => Promise.resolve(response.data),\n *         text: () => Promise.resolve(typeof response.data === 'string' ? response.data : JSON.stringify(response.data))\n *       } as Response;\n *     }\n *   });\n *   console.log(schemas);\n * } catch (error) {\n *   if (error instanceof AsgardeoAPIError) {\n *     console.error('Failed to get schemas:', error.message);\n *   }\n * }\n * ```\n */\nconst getSchemas = async ({url, baseUrl, fetcher, ...requestConfig}: GetSchemasConfig): Promise<Schema[]> => {\n  try {\n    new URL(url ?? baseUrl);\n  } catch (error) {\n    throw new AsgardeoAPIError(\n      `Invalid URL provided. ${error?.toString()}`,\n      'getSchemas-ValidationError-001',\n      'javascript',\n      400,\n      'The provided `url` or `baseUrl` path does not adhere to the URL schema.',\n    );\n  }\n\n  const fetchFn = fetcher || fetch;\n  const resolvedUrl: string = url ?? `${baseUrl}/scim2/Schemas`;\n\n  const requestInit: RequestInit = {\n    ...requestConfig,\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      Accept: 'application/json',\n      ...requestConfig.headers,\n    },\n  };\n\n  try {\n    const response: Response = await fetchFn(resolvedUrl, requestInit);\n\n    if (!response?.ok) {\n      const errorText = await response.text();\n\n      throw new AsgardeoAPIError(\n        `Failed to fetch SCIM2 schemas: ${errorText}`,\n        'getSchemas-ResponseError-001',\n        'javascript',\n        response.status,\n        response.statusText,\n      );\n    }\n\n    return (await response.json()) as Schema[];\n  } catch (error) {\n    if (error instanceof AsgardeoAPIError) {\n      throw error;\n    }\n\n    throw new AsgardeoAPIError(\n      `Network or parsing error: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      'getSchemas-NetworkError-001',\n      'javascript',\n      0,\n      'Network Error',\n    );\n  }\n};\n\nexport default getSchemas;\n", "/**\n * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport {AllOrganizationsApiResponse} from '../models/organization';\nimport AsgardeoAPIError from '../errors/AsgardeoAPIError';\n\n/**\n * Configuration for the getAllOrganizations request\n */\nexport interface GetAllOrganizationsConfig extends Omit<RequestInit, 'method'> {\n  /**\n   * The base URL for the API endpoint.\n   */\n  baseUrl: string;\n  /**\n   * Filter expression for organizations\n   */\n  filter?: string;\n  /**\n   * Maximum number of organizations to return\n   */\n  limit?: number;\n  /**\n   * Whether to include child organizations recursively\n   */\n  recursive?: boolean;\n  /**\n   * Optional custom fetcher function.\n   * If not provided, native fetch will be used\n   */\n  fetcher?: (url: string, config: RequestInit) => Promise<Response>;\n}\n\n/**\n * Retrieves all organizations with pagination support.\n *\n * @param config - Configuration object containing baseUrl, optional query parameters, and request config.\n * @returns A promise that resolves with the paginated organizations information.\n * @example\n * ```typescript\n * // Using default fetch\n * try {\n *   const response = await getAllOrganizations({\n *     baseUrl: \"https://api.asgardeo.io/t/<ORGANIZATION>\",\n *     filter: \"\",\n *     limit: 10,\n *     recursive: false\n *   });\n *   console.log(response.organizations);\n * } catch (error) {\n *   if (error instanceof AsgardeoAPIError) {\n *     console.error('Failed to get organizations:', error.message);\n *   }\n * }\n * ```\n *\n * @example\n * ```typescript\n * // Using custom fetcher (e.g., axios-based httpClient)\n * try {\n *   const response = await getAllOrganizations({\n *     baseUrl: \"https://api.asgardeo.io/t/<ORGANIZATION>\",\n *     filter: \"\",\n *     limit: 10,\n *     recursive: false,\n *     fetcher: async (url, config) => {\n *       const response = await httpClient({\n *         url,\n *         method: config.method,\n *         headers: config.headers,\n *         ...config\n *       });\n *       // Convert axios-like response to fetch-like Response\n *       return {\n *         ok: response.status >= 200 && response.status < 300,\n *         status: response.status,\n *         statusText: response.statusText,\n *         json: () => Promise.resolve(response.data),\n *         text: () => Promise.resolve(typeof response.data === 'string' ? response.data : JSON.stringify(response.data))\n *       } as Response;\n *     }\n *   });\n *   console.log(response.organizations);\n * } catch (error) {\n *   if (error instanceof AsgardeoAPIError) {\n *     console.error('Failed to get organizations:', error.message);\n *   }\n * }\n * ```\n */\nconst getAllOrganizations = async ({\n  baseUrl,\n  filter = '',\n  limit = 10,\n  recursive = false,\n  fetcher,\n  ...requestConfig\n}: GetAllOrganizationsConfig): Promise<AllOrganizationsApiResponse> => {\n  try {\n    new URL(baseUrl);\n  } catch (error) {\n    throw new AsgardeoAPIError(\n      `Invalid base URL provided. ${error?.toString()}`,\n      'getAllOrganizations-ValidationError-001',\n      'javascript',\n      400,\n      'The provided `baseUrl` does not adhere to the URL schema.',\n    );\n  }\n\n  const queryParams: URLSearchParams = new URLSearchParams(\n    Object.fromEntries(\n      Object.entries({\n        filter,\n        limit: limit.toString(),\n        recursive: recursive.toString(),\n      }).filter(([, value]: [string, string]) => Boolean(value)),\n    ),\n  );\n\n  const fetchFn = fetcher || fetch;\n  const resolvedUrl = `${baseUrl}/api/server/v1/organizations?${queryParams.toString()}`;\n\n  const requestInit: RequestInit = {\n    ...requestConfig,\n    method: 'GET',\n    headers: {\n      ...requestConfig.headers,\n      'Content-Type': 'application/json',\n      Accept: 'application/json',\n    },\n  };\n\n  try {\n    const response: Response = await fetchFn(resolvedUrl, requestInit);\n\n    if (!response?.ok) {\n      const errorText = await response.text();\n\n      throw new AsgardeoAPIError(\n        `Failed to get organizations: ${errorText}`,\n        'getAllOrganizations-ResponseError-001',\n        'javascript',\n        response.status,\n        response.statusText,\n      );\n    }\n\n    const data = (await response.json()) as any;\n\n    return {\n      hasMore: data.hasMore,\n      nextCursor: data.nextCursor,\n      organizations: data.organizations || [],\n      totalCount: data.totalCount,\n    };\n  } catch (error) {\n    if (error instanceof AsgardeoAPIError) {\n      throw error;\n    }\n\n    throw new AsgardeoAPIError(\n      `Network or parsing error: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      'getAllOrganizations-NetworkError-001',\n      'javascript',\n      0,\n      'Network Error',\n    );\n  }\n};\n\nexport default getAllOrganizations;\n", "/**\n * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport {Organization} from '../models/organization';\nimport AsgardeoAPIError from '../errors/AsgardeoAPIError';\n\n/**\n * Interface for organization creation payload.\n */\nexport interface CreateOrganizationPayload {\n  /**\n   * Organization description.\n   */\n  description: string;\n  /**\n   * Organization handle/slug.\n   */\n  orgHandle?: string;\n  /**\n   * Organization name.\n   */\n  name: string;\n  /**\n   * Parent organization ID.\n   */\n  parentId: string;\n  /**\n   * Organization type.\n   */\n  type: 'TENANT';\n}\n\n/**\n * Configuration for the createOrganization request\n */\nexport interface CreateOrganizationConfig extends Omit<RequestInit, 'method' | 'body'> {\n  /**\n   * The base URL for the API endpoint.\n   */\n  baseUrl: string;\n  /**\n   * Organization creation payload\n   */\n  payload: CreateOrganizationPayload;\n  /**\n   * Optional custom fetcher function.\n   * If not provided, native fetch will be used\n   */\n  fetcher?: (url: string, config: RequestInit) => Promise<Response>;\n}\n\n/**\n * Creates a new organization.\n *\n * @param config - Configuration object containing baseUrl, payload and optional request config.\n * @returns A promise that resolves with the created organization information.\n * @example\n * ```typescript\n * // Using default fetch\n * try {\n *   const organization = await createOrganization({\n *     baseUrl: \"https://api.asgardeo.io/t/<ORGANIZATION>\",\n *     payload: {\n *       description: \"Share your screens\",\n *       name: \"Team Viewer\",\n *       orgHandle: \"team-viewer\",\n *       parentId: \"f4825104-4948-40d9-ab65-a960eee3e3d5\",\n *       type: \"TENANT\"\n *     }\n *   });\n *   console.log(organization);\n * } catch (error) {\n *   if (error instanceof AsgardeoAPIError) {\n *     console.error('Failed to create organization:', error.message);\n *   }\n * }\n * ```\n *\n * @example\n * ```typescript\n * // Using custom fetcher (e.g., axios-based httpClient)\n * try {\n *   const organization = await createOrganization({\n *     baseUrl: \"https://api.asgardeo.io/t/<ORGANIZATION>\",\n *     payload: {\n *       description: \"Share your screens\",\n *       name: \"Team Viewer\",\n *       orgHandle: \"team-viewer\",\n *       parentId: \"f4825104-4948-40d9-ab65-a960eee3e3d5\",\n *       type: \"TENANT\"\n *     },\n *     fetcher: async (url, config) => {\n *       const response = await httpClient({\n *         url,\n *         method: config.method,\n *         headers: config.headers,\n *         data: config.body,\n *         ...config\n *       });\n *       // Convert axios-like response to fetch-like Response\n *       return {\n *         ok: response.status >= 200 && response.status < 300,\n *         status: response.status,\n *         statusText: response.statusText,\n *         json: () => Promise.resolve(response.data),\n *         text: () => Promise.resolve(typeof response.data === 'string' ? response.data : JSON.stringify(response.data))\n *       } as Response;\n *     }\n *   });\n *   console.log(organization);\n * } catch (error) {\n *   if (error instanceof AsgardeoAPIError) {\n *     console.error('Failed to create organization:', error.message);\n *   }\n * }\n * ```\n */\nconst createOrganization = async ({\n  baseUrl,\n  payload,\n  fetcher,\n  ...requestConfig\n}: CreateOrganizationConfig): Promise<Organization> => {\n  try {\n    new URL(baseUrl);\n  } catch (error) {\n    throw new AsgardeoAPIError(\n      `Invalid base URL provided. ${error?.toString()}`,\n      'createOrganization-ValidationError-001',\n      'javascript',\n      400,\n      'The provided `baseUrl` does not adhere to the URL schema.',\n    );\n  }\n\n  if (!payload) {\n    throw new AsgardeoAPIError(\n      'Organization payload is required',\n      'createOrganization-ValidationError-002',\n      'javascript',\n      400,\n      'Invalid Request',\n    );\n  }\n\n  // Always set type to TENANT for now\n  const organizationPayload = {\n    ...payload,\n    type: 'TENANT' as const,\n  };\n\n  const fetchFn = fetcher || fetch;\n  const resolvedUrl = `${baseUrl}/api/server/v1/organizations`;\n\n  const requestInit: RequestInit = {\n    ...requestConfig,\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Accept: 'application/json',\n      ...requestConfig.headers,\n    },\n    body: JSON.stringify(organizationPayload),\n  };\n\n  try {\n    const response: Response = await fetchFn(resolvedUrl, requestInit);\n\n    if (!response?.ok) {\n      const errorText = await response.text();\n\n      throw new AsgardeoAPIError(\n        `Failed to create organization: ${errorText}`,\n        'createOrganization-ResponseError-001',\n        'javascript',\n        response.status,\n        response.statusText,\n      );\n    }\n\n    return (await response.json()) as Organization;\n  } catch (error) {\n    if (error instanceof AsgardeoAPIError) {\n      throw error;\n    }\n\n    throw new AsgardeoAPIError(\n      `Network or parsing error: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      'createOrganization-NetworkError-001',\n      'javascript',\n      0,\n      'Network Error',\n    );\n  }\n};\n\nexport default createOrganization;\n", "/**\n * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport {Organization} from '../models/organization';\nimport AsgardeoAPIError from '../errors/AsgardeoAPIError';\n\n/**\n * Configuration for the getMeOrganizations request\n */\nexport interface GetMeOrganizationsConfig extends Omit<RequestInit, 'method'> {\n  /**\n   * The base URL for the API endpoint.\n   */\n  baseUrl: string;\n  /**\n   * Base64 encoded cursor value for forward pagination\n   */\n  after?: string;\n  /**\n   * Authorized application name filter\n   */\n  authorizedAppName?: string;\n  /**\n   * Base64 encoded cursor value for backward pagination\n   */\n  before?: string;\n  /**\n   * Filter expression for organizations\n   */\n  filter?: string;\n  /**\n   * Maximum number of organizations to return\n   */\n  limit?: number;\n  /**\n   * Whether to include child organizations recursively\n   */\n  recursive?: boolean;\n  /**\n   * Optional custom fetcher function.\n   * If not provided, native fetch will be used\n   */\n  fetcher?: (url: string, config: RequestInit) => Promise<Response>;\n}\n\n/**\n * Retrieves the organizations associated with the current user.\n *\n * @param config - Configuration object containing baseUrl, optional query parameters, and request config.\n * @returns A promise that resolves with the organizations information.\n * @example\n * ```typescript\n * // Using default fetch\n * try {\n *   const organizations = await getMeOrganizations({\n *     baseUrl: \"https://api.asgardeo.io/t/<ORGANIZATION>\",\n *     after: \"\",\n *     before: \"\",\n *     filter: \"\",\n *     limit: 10,\n *     recursive: false\n *   });\n *   console.log(organizations);\n * } catch (error) {\n *   if (error instanceof AsgardeoAPIError) {\n *     console.error('Failed to get organizations:', error.message);\n *   }\n * }\n * ```\n *\n * @example\n * ```typescript\n * // Using custom fetcher (e.g., axios-based httpClient)\n * try {\n *   const organizations = await getMeOrganizations({\n *     baseUrl: \"https://api.asgardeo.io/t/<ORGANIZATION>\",\n *     after: \"\",\n *     before: \"\",\n *     filter: \"\",\n *     limit: 10,\n *     recursive: false,\n *     fetcher: async (url, config) => {\n *       const response = await httpClient({\n *         url,\n *         method: config.method,\n *         headers: config.headers,\n *         ...config\n *       });\n *       // Convert axios-like response to fetch-like Response\n *       return {\n *         ok: response.status >= 200 && response.status < 300,\n *         status: response.status,\n *         statusText: response.statusText,\n *         json: () => Promise.resolve(response.data),\n *         text: () => Promise.resolve(typeof response.data === 'string' ? response.data : JSON.stringify(response.data))\n *       } as Response;\n *     }\n *   });\n *   console.log(organizations);\n * } catch (error) {\n *   if (error instanceof AsgardeoAPIError) {\n *     console.error('Failed to get organizations:', error.message);\n *   }\n * }\n * ```\n */\nconst getMeOrganizations = async ({\n  baseUrl,\n  after = '',\n  authorizedAppName = '',\n  before = '',\n  filter = '',\n  limit = 10,\n  recursive = false,\n  fetcher,\n  ...requestConfig\n}: GetMeOrganizationsConfig): Promise<Organization[]> => {\n  try {\n    new URL(baseUrl);\n  } catch (error) {\n    throw new AsgardeoAPIError(\n      `Invalid base URL provided. ${error?.toString()}`,\n      'getMeOrganizations-ValidationError-001',\n      'javascript',\n      400,\n      'The provided `baseUrl` does not adhere to the URL schema.',\n    );\n  }\n\n  const queryParams = new URLSearchParams(\n    Object.fromEntries(\n      Object.entries({\n        after,\n        authorizedAppName,\n        before,\n        filter,\n        limit: limit.toString(),\n        recursive: recursive.toString(),\n      }).filter(([, value]) => Boolean(value)),\n    ),\n  );\n\n  const fetchFn = fetcher || fetch;\n  const resolvedUrl = `${baseUrl}/api/users/v1/me/organizations?${queryParams.toString()}`;\n\n  const requestInit: RequestInit = {\n    ...requestConfig,\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      Accept: 'application/json',\n      ...requestConfig.headers,\n    },\n  };\n\n  try {\n    const response: Response = await fetchFn(resolvedUrl, requestInit);\n\n    if (!response?.ok) {\n      const errorText = await response.text();\n\n      throw new AsgardeoAPIError(\n        `Failed to fetch associated organizations of the user: ${errorText}`,\n        'getMeOrganizations-ResponseError-001',\n        'javascript',\n        response.status,\n        response.statusText,\n      );\n    }\n\n    const data = (await response.json()) as any;\n    return data.organizations || [];\n  } catch (error) {\n    if (error instanceof AsgardeoAPIError) {\n      throw error;\n    }\n\n    throw new AsgardeoAPIError(\n      `Network or parsing error: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      'getMeOrganizations-NetworkError-001',\n      'javascript',\n      0,\n      'Network Error',\n    );\n  }\n};\n\nexport default getMeOrganizations;\n", "/**\n * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport AsgardeoAPIError from '../errors/AsgardeoAPIError';\n\n/**\n * Extended organization interface with additional properties\n */\nexport interface OrganizationDetails {\n  attributes?: Record<string, any>;\n  created?: string;\n  description?: string;\n  id: string;\n  lastModified?: string;\n  name: string;\n  orgHandle: string;\n  parent?: {\n    id: string;\n    ref: string;\n  };\n  permissions?: string[];\n  status?: string;\n  type?: string;\n}\n\n/**\n * Configuration for the getOrganization request\n */\nexport interface GetOrganizationConfig extends Omit<RequestInit, 'method'> {\n  /**\n   * The base URL for the API endpoint.\n   */\n  baseUrl: string;\n  /**\n   * The ID of the organization to retrieve\n   */\n  organizationId: string;\n  /**\n   * Optional custom fetcher function.\n   * If not provided, native fetch will be used\n   */\n  fetcher?: (url: string, config: RequestInit) => Promise<Response>;\n}\n\n/**\n * Retrieves detailed information for a specific organization.\n *\n * @param config - Configuration object containing baseUrl, organizationId, and request config.\n * @returns A promise that resolves with the organization details.\n * @example\n * ```typescript\n * // Using default fetch\n * try {\n *   const organization = await getOrganization({\n *     baseUrl: \"https://api.asgardeo.io/t/dxlab\",\n *     organizationId: \"0d5e071b-d3d3-475d-b3c6-1a20ee2fa9b1\"\n *   });\n *   console.log(organization);\n * } catch (error) {\n *   if (error instanceof AsgardeoAPIError) {\n *     console.error('Failed to get organization:', error.message);\n *   }\n * }\n * ```\n *\n * @example\n * ```typescript\n * // Using custom fetcher (e.g., axios-based httpClient)\n * try {\n *   const organization = await getOrganization({\n *     baseUrl: \"https://api.asgardeo.io/t/dxlab\",\n *     organizationId: \"0d5e071b-d3d3-475d-b3c6-1a20ee2fa9b1\",\n *     fetcher: async (url, config) => {\n *       const response = await httpClient({\n *         url,\n *         method: config.method,\n *         headers: config.headers,\n *         ...config\n *       });\n *       // Convert axios-like response to fetch-like Response\n *       return {\n *         ok: response.status >= 200 && response.status < 300,\n *         status: response.status,\n *         statusText: response.statusText,\n *         json: () => Promise.resolve(response.data),\n *         text: () => Promise.resolve(typeof response.data === 'string' ? response.data : JSON.stringify(response.data))\n *       } as Response;\n *     }\n *   });\n *   console.log(organization);\n * } catch (error) {\n *   if (error instanceof AsgardeoAPIError) {\n *     console.error('Failed to get organization:', error.message);\n *   }\n * }\n * ```\n */\nconst getOrganization = async ({\n  baseUrl,\n  organizationId,\n  fetcher,\n  ...requestConfig\n}: GetOrganizationConfig): Promise<OrganizationDetails> => {\n  try {\n    new URL(baseUrl);\n  } catch (error) {\n    throw new AsgardeoAPIError(\n      `Invalid base URL provided. ${error?.toString()}`,\n      'getOrganization-ValidationError-001',\n      'javascript',\n      400,\n      'The provided `baseUrl` does not adhere to the URL schema.',\n    );\n  }\n\n  if (!organizationId) {\n    throw new AsgardeoAPIError(\n      'Organization ID is required',\n      'getOrganization-ValidationError-002',\n      'javascript',\n      400,\n      'Invalid Request',\n    );\n  }\n\n  const fetchFn = fetcher || fetch;\n  const resolvedUrl = `${baseUrl}/api/server/v1/organizations/${organizationId}`;\n\n  const requestInit: RequestInit = {\n    ...requestConfig,\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      Accept: 'application/json',\n      ...requestConfig.headers,\n    },\n  };\n\n  try {\n    const response: Response = await fetchFn(resolvedUrl, requestInit);\n\n    if (!response?.ok) {\n      const errorText = await response.text();\n\n      throw new AsgardeoAPIError(\n        `Failed to fetch organization details: ${errorText}`,\n        'getOrganization-ResponseError-001',\n        'javascript',\n        response.status,\n        response.statusText,\n      );\n    }\n\n    return (await response.json()) as OrganizationDetails;\n  } catch (error) {\n    if (error instanceof AsgardeoAPIError) {\n      throw error;\n    }\n\n    throw new AsgardeoAPIError(\n      `Network or parsing error: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      'getOrganization-NetworkError-001',\n      'javascript',\n      0,\n      'Network Error',\n    );\n  }\n};\n\nexport default getOrganization;\n", "/**\n * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/**\n * Checks if a value is considered empty.\n *\n * A value is considered empty if it is:\n * - null\n * - undefined\n * - empty string (\"\")\n * - string containing only whitespace characters\n * - empty array ([])\n * - empty object ({})\n *\n * @param value - The value to check\n * @returns true if the value is empty, false otherwise\n *\n * @example\n * ```typescript\n * isEmpty(null);              // true\n * isEmpty(undefined);         // true\n * isEmpty(\"\");                // true\n * isEmpty(\"   \");             // true\n * isEmpty(\"hello\");           // false\n * isEmpty([]);                // true\n * isEmpty([1, 2, 3]);         // false\n * isEmpty({});                // true\n * isEmpty({ name: \"John\" });  // false\n * isEmpty(0);                 // false\n * isEmpty(false);             // false\n * ```\n */\nconst isEmpty = (value: any): boolean => {\n  if (value === null || value === undefined) {\n    return true;\n  }\n\n  if (typeof value === 'string') {\n    return value.trim() === '';\n  }\n\n  if (Array.isArray(value)) {\n    return value.length === 0;\n  }\n\n  if (typeof value === 'object' && value.constructor === Object) {\n    return Object.keys(value).length === 0;\n  }\n\n  return false;\n};\n\nexport default isEmpty;\n", "/**\n * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport AsgardeoAPIError from '../errors/AsgardeoAPIError';\nimport isEmpty from '../utils/isEmpty';\nimport {OrganizationDetails} from './getOrganization';\n\n/**\n * Configuration for the updateOrganization request\n */\nexport interface UpdateOrganizationConfig extends Omit<RequestInit, 'method' | 'body'> {\n  /**\n   * The base URL for the API endpoint.\n   */\n  baseUrl: string;\n  /**\n   * The ID of the organization to update\n   */\n  organizationId: string;\n  /**\n   * Array of patch operations to apply\n   */\n  operations: Array<{\n    operation: 'REPLACE' | 'ADD' | 'REMOVE';\n    path: string;\n    value?: any;\n  }>;\n  /**\n   * Optional custom fetcher function.\n   * If not provided, native fetch will be used\n   */\n  fetcher?: (url: string, config: RequestInit) => Promise<Response>;\n}\n\n/**\n * Updates the organization information using the Organizations Management API.\n *\n * @param config - Configuration object with baseUrl, organizationId, operations and optional request config.\n * @returns A promise that resolves with the updated organization information.\n * @example\n * ```typescript\n * // Using the helper function to create operations automatically\n * const operations = createPatchOperations({\n *   name: \"Updated Organization Name\",      // Will use REPLACE\n *   description: \"\",                        // Will use REMOVE (empty string)\n *   customField: \"Some value\"              // Will use REPLACE\n * });\n *\n * await updateOrganization({\n *   baseUrl: \"https://api.asgardeo.io/t/<ORG>\",\n *   organizationId: \"0d5e071b-d3d3-475d-b3c6-1a20ee2fa9b1\",\n *   operations\n * });\n *\n * // Or manually specify operations\n * await updateOrganization({\n *   baseUrl: \"https://api.asgardeo.io/t/<ORG>\",\n *   organizationId: \"0d5e071b-d3d3-475d-b3c6-1a20ee2fa9b1\",\n *   operations: [\n *     { operation: \"REPLACE\", path: \"/name\", value: \"Updated Organization Name\" },\n *     { operation: \"REMOVE\", path: \"/description\" }\n *   ]\n * });\n * ```\n *\n * @example\n * ```typescript\n * // Using custom fetcher (e.g., axios-based httpClient)\n * await updateOrganization({\n *   baseUrl: \"https://api.asgardeo.io/t/<ORG>\",\n *   organizationId: \"0d5e071b-d3d3-475d-b3c6-1a20ee2fa9b1\",\n *   operations: [\n *     { operation: \"REPLACE\", path: \"/name\", value: \"Updated Organization Name\" }\n *   ],\n *   fetcher: async (url, config) => {\n *     const response = await httpClient({\n *       url,\n *       method: config.method,\n *       headers: config.headers,\n *       data: config.body,\n *       ...config\n *     });\n *     // Convert axios-like response to fetch-like Response\n *     return {\n *       ok: response.status >= 200 && response.status < 300,\n *       status: response.status,\n *       statusText: response.statusText,\n *       json: () => Promise.resolve(response.data),\n *       text: () => Promise.resolve(typeof response.data === 'string' ? response.data : JSON.stringify(response.data))\n *     } as Response;\n *   }\n * });\n * ```\n */\nconst updateOrganization = async ({\n  baseUrl,\n  organizationId,\n  operations,\n  fetcher,\n  ...requestConfig\n}: UpdateOrganizationConfig): Promise<OrganizationDetails> => {\n  try {\n    new URL(baseUrl);\n  } catch (error) {\n    throw new AsgardeoAPIError(\n      `Invalid base URL provided. ${error?.toString()}`,\n      'updateOrganization-ValidationError-001',\n      'javascript',\n      400,\n      'The provided `baseUrl` does not adhere to the URL schema.',\n    );\n  }\n\n  if (!organizationId) {\n    throw new AsgardeoAPIError(\n      'Organization ID is required',\n      'updateOrganization-ValidationError-002',\n      'javascript',\n      400,\n      'Invalid Request',\n    );\n  }\n\n  if (!operations || !Array.isArray(operations) || operations.length === 0) {\n    throw new AsgardeoAPIError(\n      'Operations array is required and cannot be empty',\n      'updateOrganization-ValidationError-003',\n      'javascript',\n      400,\n      'Invalid Request',\n    );\n  }\n\n  const fetchFn = fetcher || fetch;\n  const resolvedUrl = `${baseUrl}/api/server/v1/organizations/${organizationId}`;\n\n  const requestInit: RequestInit = {\n    ...requestConfig,\n    method: 'PATCH',\n    headers: {\n      'Content-Type': 'application/json',\n      Accept: 'application/json',\n      ...requestConfig.headers,\n    },\n    body: JSON.stringify(operations),\n  };\n\n  try {\n    const response: Response = await fetchFn(resolvedUrl, requestInit);\n\n    if (!response?.ok) {\n      const errorText = await response.text();\n\n      throw new AsgardeoAPIError(\n        `Failed to update organization: ${errorText}`,\n        'updateOrganization-ResponseError-001',\n        'javascript',\n        response.status,\n        response.statusText,\n      );\n    }\n\n    return (await response.json()) as OrganizationDetails;\n  } catch (error) {\n    if (error instanceof AsgardeoAPIError) {\n      throw error;\n    }\n\n    throw new AsgardeoAPIError(\n      `Network or parsing error: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      'updateOrganization-NetworkError-001',\n      'javascript',\n      0,\n      'Network Error',\n    );\n  }\n};\n\n/**\n * Helper function to convert field updates to patch operations format.\n * Uses REMOVE operation when the value is empty, otherwise uses REPLACE.\n *\n * @param payload - Object containing field updates\n * @returns Array of patch operations\n */\nexport const createPatchOperations = (\n  payload: Record<string, any>,\n): Array<{\n  operation: 'REPLACE' | 'REMOVE';\n  path: string;\n  value?: any;\n}> => {\n  return Object.entries(payload).map(([key, value]) => {\n    if (isEmpty(value)) {\n      return {\n        operation: 'REMOVE' as const,\n        path: `/${key}`,\n      };\n    }\n\n    return {\n      operation: 'REPLACE' as const,\n      path: `/${key}`,\n      value,\n    };\n  });\n};\n\nexport default updateOrganization;\n", "/**\n * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport {User} from '../models/user';\nimport AsgardeoAPIError from '../errors/AsgardeoAPIError';\n\n/**\n * Configuration for the updateMeProfile request\n */\nexport interface UpdateMeProfileConfig extends Omit<RequestInit, 'method' | 'body'> {\n  /**\n   * The absolute API endpoint.\n   */\n  url?: string;\n  /**\n   * The base path of the API endpoint.\n   */\n  baseUrl?: string;\n  /**\n   * The value object to patch (SCIM2 PATCH value)\n   */\n  payload: any;\n  /**\n   * Optional custom fetcher function.\n   * If not provided, native fetch will be used\n   */\n  fetcher?: (url: string, config: RequestInit) => Promise<Response>;\n}\n\n/**\n * Updates the user profile information at the specified SCIM2 Me endpoint.\n *\n * @param config - Configuration object with URL, payload and optional request config.\n * @returns A promise that resolves with the updated user profile information.\n * @example\n * ```typescript\n * // Using default fetch\n * await updateMeProfile({\n *   url: \"https://api.asgardeo.io/t/<ORG>/scim2/Me\",\n *   payload: { \"urn:scim:wso2:schema\": { mobileNumbers: [\"0777933830\"] } }\n * });\n * ```\n *\n * @example\n * ```typescript\n * // Using custom fetcher (e.g., axios-based httpClient)\n * await updateMeProfile({\n *   url: \"https://api.asgardeo.io/t/<ORG>/scim2/Me\",\n *   payload: { \"urn:scim:wso2:schema\": { mobileNumbers: [\"0777933830\"] } },\n *   fetcher: async (url, config) => {\n *     const response = await httpClient({\n *       url,\n *       method: config.method,\n *       headers: config.headers,\n *       data: config.body,\n *       ...config\n *     });\n *     // Convert axios-like response to fetch-like Response\n *     return {\n *       ok: response.status >= 200 && response.status < 300,\n *       status: response.status,\n *       statusText: response.statusText,\n *       json: () => Promise.resolve(response.data),\n *       text: () => Promise.resolve(typeof response.data === 'string' ? response.data : JSON.stringify(response.data))\n *     } as Response;\n *   }\n * });\n * ```\n */\nconst updateMeProfile = async ({\n  url,\n  baseUrl,\n  payload,\n  fetcher,\n  ...requestConfig\n}: UpdateMeProfileConfig): Promise<User> => {\n  try {\n    new URL(url ?? baseUrl);\n  } catch (error) {\n    throw new AsgardeoAPIError(\n      `Invalid URL provided. ${error?.toString()}`,\n      'updateMeProfile-ValidationError-001',\n      'javascript',\n      400,\n      'The provided `url` or `baseUrl` path does not adhere to the URL schema.',\n    );\n  }\n\n  const data = {\n    Operations: [\n      {\n        op: 'replace',\n        value: payload,\n      },\n    ],\n    schemas: ['urn:ietf:params:scim:api:messages:2.0:PatchOp'],\n  };\n\n  const fetchFn = fetcher || fetch;\n  const resolvedUrl: string = url ?? `${baseUrl}/scim2/Me`;\n\n  const requestInit: RequestInit = {\n    method: 'PATCH',\n    ...requestConfig,\n    headers: {\n      ...requestConfig.headers,\n      'Content-Type': 'application/scim+json',\n      Accept: 'application/json',\n    },\n    body: JSON.stringify(data),\n  };\n\n  try {\n    const response: Response = await fetchFn(resolvedUrl, requestInit);\n\n    if (!response?.ok) {\n      const errorText = await response.text();\n\n      throw new AsgardeoAPIError(\n        `Failed to update user profile: ${errorText}`,\n        'updateMeProfile-ResponseError-001',\n        'javascript',\n        response.status,\n        response.statusText,\n      );\n    }\n\n    return (await response.json()) as User;\n  } catch (error) {\n    if (error instanceof AsgardeoAPIError) {\n      throw error;\n    }\n\n    throw new AsgardeoAPIError(\n      `Network or parsing error: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      'updateMeProfile-NetworkError-001',\n      'javascript',\n      0,\n      'Network Error',\n    );\n  }\n};\n\nexport default updateMeProfile;\n", "/**\n * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport {BrandingPreference} from '../models/branding-preference';\nimport AsgardeoAPIError from '../errors/AsgardeoAPIError';\n\n/**\n * Configuration for the getBrandingPreference request\n */\nexport interface GetBrandingPreferenceConfig extends Omit<RequestInit, 'method'> {\n  /**\n   * The base URL for the API endpoint.\n   */\n  baseUrl: string;\n  /**\n   * Locale for the branding preference\n   */\n  locale?: string;\n  /**\n   * Name of the branding preference\n   */\n  name?: string;\n  /**\n   * Type of the branding preference\n   */\n  type?: string;\n  /**\n   * Optional custom fetcher function.\n   * If not provided, native fetch will be used\n   */\n  fetcher?: (url: string, config: RequestInit) => Promise<Response>;\n}\n\n/**\n * Retrieves branding preference configuration.\n *\n * @param config - Configuration object containing baseUrl, optional query parameters, and request config.\n * @returns A promise that resolves with the branding preference information.\n * @example\n * ```typescript\n * // Using default fetch\n * try {\n *   const response = await getBrandingPreference({\n *     baseUrl: \"https://api.asgardeo.io/t/<ORGANIZATION>\",\n *     locale: \"en-US\",\n *     name: \"my-branding\",\n *     type: \"org\"\n *   });\n *   console.log(response.theme);\n * } catch (error) {\n *   if (error instanceof AsgardeoAPIError) {\n *     console.error('Failed to get branding preference:', error.message);\n *   }\n * }\n * ```\n *\n * @example\n * ```typescript\n * // Using custom fetcher (e.g., axios-based httpClient)\n * try {\n *   const response = await getBrandingPreference({\n *     baseUrl: \"https://api.asgardeo.io/t/<ORGANIZATION>\",\n *     locale: \"en-US\",\n *     name: \"my-branding\",\n *     type: \"org\",\n *     fetcher: async (url, config) => {\n *       const response = await httpClient({\n *         url,\n *         method: config.method,\n *         headers: config.headers,\n *         ...config\n *       });\n *       // Convert axios-like response to fetch-like Response\n *       return {\n *         ok: response.status >= 200 && response.status < 300,\n *         status: response.status,\n *         statusText: response.statusText,\n *         json: () => Promise.resolve(response.data),\n *         text: () => Promise.resolve(typeof response.data === 'string' ? response.data : JSON.stringify(response.data))\n *       } as Response;\n *     }\n *   });\n *   console.log(response.theme);\n * } catch (error) {\n *   if (error instanceof AsgardeoAPIError) {\n *     console.error('Failed to get branding preference:', error.message);\n *   }\n * }\n * ```\n */\nconst getBrandingPreference = async ({\n  baseUrl,\n  locale,\n  name,\n  type,\n  fetcher,\n  ...requestConfig\n}: GetBrandingPreferenceConfig): Promise<BrandingPreference> => {\n  try {\n    new URL(baseUrl);\n  } catch (error) {\n    throw new AsgardeoAPIError(\n      `Invalid base URL provided. ${error?.toString()}`,\n      'getBrandingPreference-ValidationError-001',\n      'javascript',\n      400,\n      'The provided `baseUrl` does not adhere to the URL schema.',\n    );\n  }\n\n  const queryParams: URLSearchParams = new URLSearchParams(\n    Object.fromEntries(\n      Object.entries({\n        locale: locale || '',\n        name: name || '',\n        type: type || '',\n      }).filter(([, value]: [string, string]) => Boolean(value)),\n    ),\n  );\n\n  const fetchFn = fetcher || fetch;\n  const resolvedUrl = `${baseUrl}/api/server/v1/branding-preference/resolve${\n    queryParams.toString() ? `?${queryParams.toString()}` : ''\n  }`;\n\n  const requestInit: RequestInit = {\n    ...requestConfig,\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      Accept: 'application/json',\n      ...requestConfig.headers,\n    },\n  };\n\n  try {\n    const response: Response = await fetchFn(resolvedUrl, requestInit);\n\n    if (!response?.ok) {\n      const errorText = await response.text();\n\n      throw new AsgardeoAPIError(\n        `Failed to get branding preference: ${errorText}`,\n        'getBrandingPreference-ResponseError-001',\n        'javascript',\n        response.status,\n        response.statusText,\n      );\n    }\n\n    const data = (await response.json()) as BrandingPreference;\n    return data;\n  } catch (error) {\n    if (error instanceof AsgardeoAPIError) {\n      throw error;\n    }\n\n    throw new AsgardeoAPIError(\n      `Network or parsing error: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      'getBrandingPreference-NetworkError-001',\n      'javascript',\n      0,\n      'Network Error',\n    );\n  }\n};\n\nexport default getBrandingPreference;\n", "/**\n * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/**\n * Constants representing Application Native Authentication related configurations and constants.\n */\nconst ApplicationNativeAuthenticationConstants = {\n  SupportedAuthenticators: {\n    IdentifierFirst: 'SWRlbnRpZmllckV4ZWN1dG9yOkxPQ0FM',\n    EmailOtp: 'ZW1haWwtb3RwLWF1dGhlbnRpY2F0b3I6TE9DQUw',\n    Totp: 'dG90cDpMT0NBTA',\n    UsernamePassword: 'QmFzaWNBdXRoZW50aWNhdG9yOkxPQ0FM',\n    PushNotification: 'cHVzaC1ub3RpZmljYXRpb24tYXV0aGVudGljYXRvcjpMT0NBTA',\n    Passkey: 'RklET0F1dGhlbnRpY2F0b3I6TE9DQUw',\n    SmsOtp: 'c21zLW90cC1hdXRoZW50aWNhdG9yOkxPQ0FM',\n    MagicLink: 'TWFnaWNMaW5rQXV0aGVudGljYXRvcjpMT0NBTA',\n    Google: 'R29vZ2xlT0lEQ0F1dGhlbnRpY2F0b3I6R29vZ2xl',\n    GitHub: 'R2l0aHViQXV0aGVudGljYXRvcjpHaXRIdWI',\n    Microsoft: 'T3BlbklEQ29ubmVjdEF1dGhlbnRpY2F0b3I6TWljcm9zb2Z0',\n    Facebook: 'RmFjZWJvb2tBdXRoZW50aWNhdG9yOkZhY2Vib29r',\n    LinkedIn: 'TGlua2VkSW5PSURDOkxpbmtlZElu',\n    SignInWithEthereum: 'T3BlbklEQ29ubmVjdEF1dGhlbnRpY2F0b3I6U2lnbiBJbiBXaXRoIEV0aGVyZXVt',\n  },\n} as const;\n\nexport default ApplicationNativeAuthenticationConstants;\n", "/**\n * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/**\n * Constants for vendor-specific configurations.\n * By default, the vendor is inferred as Asgardeo.\n *\n * @example\n * ```typescript\n *  // Using the vendor prefix in a URL\n * const apiUrl = `${VendorConstants.VENDOR_PREFIX}/api/v1/resource`;\n * ```\n */\nconst VendorConstants: {\n  VENDOR_PREFIX: string;\n} = {\n  /**\n   * The prefix used for vendor-specific API endpoints, CSS classes, or other identifiers.\n   */\n  VENDOR_PREFIX: 'asgardeo',\n} as const;\n\nexport default VendorConstants;\n", "/**\n * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nexport interface EmbeddedSignInFlowInitiateResponse {\n  flowId: string;\n  flowStatus: EmbeddedSignInFlowStatus;\n  flowType: EmbeddedSignInFlowType;\n  links: EmbeddedSignInFlowLink[];\n  nextStep: {\n    authenticators: EmbeddedSignInFlowAuthenticator[];\n    stepType: EmbeddedSignInFlowStepType;\n  };\n}\n\nexport enum EmbeddedSignInFlowStatus {\n  FailCompleted = 'FAIL_COMPLETED',\n  FailIncomplete = 'FAIL_INCOMPLETE',\n  Incomplete = 'INCOMPLETE',\n  SuccessCompleted = 'SUCCESS_COMPLETED',\n}\n\nexport enum EmbeddedSignInFlowType {\n  Authentication = 'AUTHENTICATION',\n}\n\nexport enum EmbeddedSignInFlowStepType {\n  AuthenticatorPrompt = 'AUTHENTICATOR_PROMPT',\n  MultiOptionsPrompt = 'MULTI_OPTIONS_PROMPT',\n}\n\nexport interface EmbeddedSignInFlowAuthenticator {\n  authenticator: string;\n  authenticatorId: string;\n  idp: string;\n  metadata: {\n    i18nKey: string;\n    params: {\n      confidential: boolean;\n      displayName: string;\n      i18nKey: string;\n      order: number;\n      param: string;\n      type: EmbeddedSignInFlowAuthenticatorParamType;\n    }[];\n    promptType: EmbeddedSignInFlowAuthenticatorPromptType;\n  };\n  requiredParams: string[];\n}\n\nexport interface EmbeddedSignInFlowLink {\n  href: string;\n  method: string;\n  name: string;\n}\n\nexport interface EmbeddedSignInFlowHandleRequestPayload {\n  flowId: string;\n  selectedAuthenticator: {\n    authenticatorId: string;\n    params: Record<string, string>;\n  };\n}\n\nexport interface EmbeddedSignInFlowHandleResponse {\n  authData: Record<string, any>;\n  flowStatus: string;\n}\n\nexport enum EmbeddedSignInFlowAuthenticatorParamType {\n  Integer = 'INTEGER',\n  MultiValued = 'MULTI_VALUED',\n  String = 'STRING',\n}\n\nexport enum EmbeddedSignInFlowAuthenticatorExtendedParamType {\n  Otp = 'OTPCode',\n}\n\nexport enum EmbeddedSignInFlowAuthenticatorKnownIdPType {\n  Local = 'LOCAL',\n}\n\nexport enum EmbeddedSignInFlowAuthenticatorPromptType {\n  /**\n   * Prompt for internal system use, such as API keys or tokens.\n   */\n  InternalPrompt = 'INTERNAL_PROMPT',\n  /**\n   * Prompt for redirection to another page or service.\n   */\n  RedirectionPrompt = 'REDIRECTION_PROMPT',\n  /**\n   * Prompt for user input, typically for username/password or similar credentials.\n   */\n  UserPrompt = 'USER_PROMPT',\n}\n", "/**\n * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nexport enum FlowMode {\n  /**\n   * This mode is suitable for embedded sign-in, sign-up, etc. flows where the authentication\n   * UIs are rendered within the application.\n   * @see {@link https://is.docs.wso2.com/en/7.1.0/references/app-native-authentication/}\n   */\n  Embedded = 'DIRECT',\n  /**\n   * Traditional redirect based sign-in, sign-up, etc. flows where the authentication\n   * UIs are from a external Identity Provider (ex: WSO2 Identity Server or Asgardeo).\n   */\n  Redirect = 'REDIRECTION',\n}\n", "/**\n * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nexport interface SchemaAttribute {\n  name: string;\n  type: string;\n  multiValued: boolean;\n  description?: string;\n  required?: boolean;\n  caseExact: boolean;\n  mutability: string;\n  returned: string;\n  uniqueness: string;\n  displayName?: string;\n  displayOrder?: string;\n  regEx?: string;\n  supportedByDefault?: string;\n  sharedProfileValueResolvingMethod?: string;\n  subAttributes?: SchemaAttribute[];\n}\n\n/**\n * Represents a SCIM2 schema definition\n */\nexport interface Schema {\n  /** Schema identifier */\n  id: string;\n  /** Schema name */\n  name: string;\n  /** Schema description */\n  description: string;\n  /** Schema attributes */\n  attributes: SchemaAttribute[];\n}\n\nexport interface FlattenedSchema extends Schema {\n  schemaId: string;\n}\n\n/**\n * Well-known SCIM2 schema IDs\n */\nexport enum WellKnownSchemaIds {\n  /** Core Schema */\n  Core = 'urn:ietf:params:scim:schemas:core:2.0',\n  /** User Schema */\n  User = 'urn:ietf:params:scim:schemas:core:2.0:User',\n  /** Enterprise User Schema */\n  EnterpriseUser = 'urn:ietf:params:scim:schemas:extension:enterprise:2.0:User',\n  /** System User Schema */\n  SystemUser = 'urn:scim:wso2:schema',\n  /** Custom User Schema */\n  CustomUser = 'urn:scim:schemas:extension:custom:User',\n}\n", "/**\n * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nexport enum FieldType {\n  Text = 'TEXT',\n  Password = 'PASSWORD',\n  Email = 'EMAIL',\n  Number = 'NUMBER',\n  Select = 'SELECT',\n  Checkbox = 'CHECKBOX',\n  Radio = 'RADIO',\n  Otp = 'OTP',\n  Date = 'DATE',\n  Time = 'TIME',\n  Textarea = 'TEXTAREA',\n}\n", "/**\n * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport {AllOrganizationsApiResponse} from './models/organization';\nimport {AsgardeoClient, SignInOptions, SignOutOptions, SignUpOptions} from './models/client';\nimport {Config} from './models/config';\nimport {EmbeddedFlowExecuteRequestPayload, EmbeddedFlowExecuteResponse} from './models/embedded-flow';\nimport {EmbeddedSignInFlowHandleRequestPayload} from './models/embedded-signin-flow';\nimport {TokenResponse} from './models/token';\nimport {Organization} from './models/organization';\nimport {User, UserProfile} from './models/user';\n\n/**\n * Base class for implementing Asgardeo clients.\n * This class provides the core functionality for managing user authentication and sessions.\n *\n * @typeParam T - Configuration type that extends Config.\n */\nabstract class AsgardeoJavaScriptClient<T = Config> implements AsgardeoClient<T> {\n  abstract switchOrganization(organization: Organization, sessionId?: string): Promise<TokenResponse | Response>;\n\n  abstract initialize(config: T): Promise<boolean>;\n\n  abstract getUser(options?: any): Promise<User>;\n\n  abstract getAllOrganizations(options?: any, sessionId?: string): Promise<AllOrganizationsApiResponse>;\n\n  abstract getMyOrganizations(options?: any, sessionId?: string): Promise<Organization[]>;\n\n  abstract getCurrentOrganization(sessionId?: string): Promise<Organization | null>;\n\n  abstract getUserProfile(options?: any): Promise<UserProfile>;\n\n  abstract isLoading(): boolean;\n\n  abstract isSignedIn(): Promise<boolean>;\n\n  abstract updateUserProfile(payload: any, userId?: string): Promise<User>;\n\n  abstract getConfiguration(): T;\n\n  abstract signIn(\n    options?: SignInOptions,\n    sessionId?: string,\n    onSignInSuccess?: (afterSignInUrl: string) => void,\n  ): Promise<User>;\n  abstract signIn(\n    payload: EmbeddedSignInFlowHandleRequestPayload,\n    request: Request,\n    sessionId?: string,\n    onSignInSuccess?: (afterSignInUrl: string) => void,\n  ): Promise<User>;\n\n  abstract signOut(options?: SignOutOptions, afterSignOut?: (afterSignOutUrl: string) => void): Promise<string>;\n  abstract signOut(\n    options?: SignOutOptions,\n    sessionId?: string,\n    afterSignOut?: (afterSignOutUrl: string) => void,\n  ): Promise<string>;\n\n  abstract signUp(options?: SignUpOptions): Promise<void>;\n  abstract signUp(payload: EmbeddedFlowExecuteRequestPayload): Promise<EmbeddedFlowExecuteResponse>;\n  abstract signUp(payload?: unknown): Promise<void> | Promise<EmbeddedFlowExecuteResponse>;\n}\n\nexport default AsgardeoJavaScriptClient;\n", "/**\n * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a cop  // Shadows\n  if (theme.shadows?.small) {\n    cssVars[`--${prefix}-shadow-small`] = theme.shadows.small;\n  }\n  if (theme.shadows?.medium) {\n    cssVars[`--${prefix}-shadow-medium`] = theme.shadows.medium;\n  }\n  if (theme.shadows?.large) {\n    cssVars[`--${prefix}-shadow-large`] = theme.shadows.large;\n  }\n\n  // Typography - Font Family\n  if (theme.typography?.fontFamily) {\n    cssVars[`--${prefix}-typography-fontFamily`] = theme.typography.fontFamily;\n  }\n\n  // Typography - Font Sizesense at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport {Theme, ThemeConfig, ThemeVars} from './types';\nimport {RecursivePartial} from '../models/utility-types';\nimport VendorConstants from '../constants/VendorConstants';\n\nconst lightTheme: ThemeConfig = {\n  colors: {\n    action: {\n      active: 'rgba(0, 0, 0, 0.54)',\n      hover: 'rgba(0, 0, 0, 0.04)',\n      hoverOpacity: 0.04,\n      selected: 'rgba(0, 0, 0, 0.08)',\n      selectedOpacity: 0.08,\n      disabled: 'rgba(0, 0, 0, 0.26)',\n      disabledBackground: 'rgba(0, 0, 0, 0.12)',\n      disabledOpacity: 0.38,\n      focus: 'rgba(0, 0, 0, 0.12)',\n      focusOpacity: 0.12,\n      activatedOpacity: 0.12,\n    },\n    primary: {\n      main: '#1a73e8',\n      contrastText: '#ffffff',\n    },\n    secondary: {\n      main: '#424242',\n      contrastText: '#ffffff',\n    },\n    background: {\n      surface: '#ffffff',\n      disabled: '#f0f0f0',\n      body: {\n        main: '#1a1a1a',\n      },\n    },\n    error: {\n      main: '#d32f2f',\n      contrastText: '#ffffff',\n    },\n    success: {\n      main: '#4caf50',\n      contrastText: '#ffffff',\n    },\n    warning: {\n      main: '#ff9800',\n      contrastText: '#ffffff',\n    },\n    text: {\n      primary: '#1a1a1a',\n      secondary: '#666666',\n    },\n    border: '#e0e0e0',\n  },\n  spacing: {\n    unit: 8,\n  },\n  borderRadius: {\n    small: '4px',\n    medium: '8px',\n    large: '16px',\n  },\n  shadows: {\n    small: '0 2px 8px rgba(0, 0, 0, 0.1)',\n    medium: '0 4px 16px rgba(0, 0, 0, 0.15)',\n    large: '0 8px 32px rgba(0, 0, 0, 0.2)',\n  },\n  typography: {\n    fontFamily: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif',\n    fontSizes: {\n      xs: '0.75rem', // 12px\n      sm: '0.875rem', // 14px\n      md: '1rem', // 16px\n      lg: '1.125rem', // 18px\n      xl: '1.25rem', // 20px\n      '2xl': '1.5rem', // 24px\n      '3xl': '2.125rem', // 34px\n    },\n    fontWeights: {\n      normal: 400,\n      medium: 500,\n      semibold: 600,\n      bold: 700,\n    },\n    lineHeights: {\n      tight: 1.2,\n      normal: 1.4,\n      relaxed: 1.6,\n    },\n  },\n  images: {\n    favicon: {},\n    logo: {},\n  },\n};\n\nconst darkTheme: ThemeConfig = {\n  colors: {\n    action: {\n      active: 'rgba(255, 255, 255, 0.70)',\n      hover: 'rgba(255, 255, 255, 0.04)',\n      hoverOpacity: 0.04,\n      selected: 'rgba(255, 255, 255, 0.08)',\n      selectedOpacity: 0.08,\n      disabled: 'rgba(255, 255, 255, 0.26)',\n      disabledBackground: 'rgba(255, 255, 255, 0.12)',\n      disabledOpacity: 0.38,\n      focus: 'rgba(255, 255, 255, 0.12)',\n      focusOpacity: 0.12,\n      activatedOpacity: 0.12,\n    },\n    primary: {\n      main: '#1a73e8',\n      contrastText: '#ffffff',\n    },\n    secondary: {\n      main: '#424242',\n      contrastText: '#ffffff',\n    },\n    background: {\n      surface: '#121212',\n      disabled: '#1f1f1f',\n      body: {\n        main: '#ffffff',\n      },\n    },\n    error: {\n      main: '#d32f2f',\n      contrastText: '#ffffff',\n    },\n    success: {\n      main: '#4caf50',\n      contrastText: '#ffffff',\n    },\n    warning: {\n      main: '#ff9800',\n      contrastText: '#ffffff',\n    },\n    text: {\n      primary: '#ffffff',\n      secondary: '#b3b3b3',\n    },\n    border: '#404040',\n  },\n  spacing: {\n    unit: 8,\n  },\n  borderRadius: {\n    small: '4px',\n    medium: '8px',\n    large: '16px',\n  },\n  shadows: {\n    small: '0 2px 8px rgba(0, 0, 0, 0.3)',\n    medium: '0 4px 16px rgba(0, 0, 0, 0.4)',\n    large: '0 8px 32px rgba(0, 0, 0, 0.5)',\n  },\n  typography: {\n    fontFamily: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif',\n    fontSizes: {\n      xs: '0.75rem', // 12px\n      sm: '0.875rem', // 14px\n      md: '1rem', // 16px\n      lg: '1.125rem', // 18px\n      xl: '1.25rem', // 20px\n      '2xl': '1.5rem', // 24px\n      '3xl': '2.125rem', // 34px\n    },\n    fontWeights: {\n      normal: 400,\n      medium: 500,\n      semibold: 600,\n      bold: 700,\n    },\n    lineHeights: {\n      tight: 1.2,\n      normal: 1.4,\n      relaxed: 1.6,\n    },\n  },\n  images: {\n    favicon: {},\n    logo: {},\n  },\n};\n\nconst toCssVariables = (theme: ThemeConfig): Record<string, string> => {\n  const cssVars: Record<string, string> = {};\n  const prefix = theme.cssVarPrefix || VendorConstants.VENDOR_PREFIX;\n\n  // Colors - Action\n  if (theme.colors?.action?.active) {\n    cssVars[`--${prefix}-color-action-active`] = theme.colors.action.active;\n  }\n  if (theme.colors?.action?.hover) {\n    cssVars[`--${prefix}-color-action-hover`] = theme.colors.action.hover;\n  }\n  if (theme.colors?.action?.hoverOpacity !== undefined) {\n    cssVars[`--${prefix}-color-action-hoverOpacity`] = theme.colors.action.hoverOpacity.toString();\n  }\n  if (theme.colors?.action?.selected) {\n    cssVars[`--${prefix}-color-action-selected`] = theme.colors.action.selected;\n  }\n  if (theme.colors?.action?.selectedOpacity !== undefined) {\n    cssVars[`--${prefix}-color-action-selectedOpacity`] = theme.colors.action.selectedOpacity.toString();\n  }\n  if (theme.colors?.action?.disabled) {\n    cssVars[`--${prefix}-color-action-disabled`] = theme.colors.action.disabled;\n  }\n  if (theme.colors?.action?.disabledBackground) {\n    cssVars[`--${prefix}-color-action-disabledBackground`] = theme.colors.action.disabledBackground;\n  }\n  if (theme.colors?.action?.disabledOpacity !== undefined) {\n    cssVars[`--${prefix}-color-action-disabledOpacity`] = theme.colors.action.disabledOpacity.toString();\n  }\n  if (theme.colors?.action?.focus) {\n    cssVars[`--${prefix}-color-action-focus`] = theme.colors.action.focus;\n  }\n  if (theme.colors?.action?.focusOpacity !== undefined) {\n    cssVars[`--${prefix}-color-action-focusOpacity`] = theme.colors.action.focusOpacity.toString();\n  }\n  if (theme.colors?.action?.activatedOpacity !== undefined) {\n    cssVars[`--${prefix}-color-action-activatedOpacity`] = theme.colors.action.activatedOpacity.toString();\n  }\n\n  // Colors - Primary\n  if (theme.colors?.primary?.main) {\n    cssVars[`--${prefix}-color-primary-main`] = theme.colors.primary.main;\n  }\n  if (theme.colors?.primary?.contrastText) {\n    cssVars[`--${prefix}-color-primary-contrastText`] = theme.colors.primary.contrastText;\n  }\n\n  // Colors - Secondary\n  if (theme.colors?.secondary?.main) {\n    cssVars[`--${prefix}-color-secondary-main`] = theme.colors.secondary.main;\n  }\n  if (theme.colors?.secondary?.contrastText) {\n    cssVars[`--${prefix}-color-secondary-contrastText`] = theme.colors.secondary.contrastText;\n  }\n\n  // Colors - Background\n  if (theme.colors?.background?.surface) {\n    cssVars[`--${prefix}-color-background-surface`] = theme.colors.background.surface;\n  }\n  if (theme.colors?.background?.disabled) {\n    cssVars[`--${prefix}-color-background-disabled`] = theme.colors.background.disabled;\n  }\n  if (theme.colors?.background?.body?.main) {\n    cssVars[`--${prefix}-color-background-body-main`] = theme.colors.background.body.main;\n  }\n\n  // Colors - Error\n  if (theme.colors?.error?.main) {\n    cssVars[`--${prefix}-color-error-main`] = theme.colors.error.main;\n  }\n  if (theme.colors?.error?.contrastText) {\n    cssVars[`--${prefix}-color-error-contrastText`] = theme.colors.error.contrastText;\n  }\n\n  // Colors - Success\n  if (theme.colors?.success?.main) {\n    cssVars[`--${prefix}-color-success-main`] = theme.colors.success.main;\n  }\n  if (theme.colors?.success?.contrastText) {\n    cssVars[`--${prefix}-color-success-contrastText`] = theme.colors.success.contrastText;\n  }\n\n  // Colors - Warning\n  if (theme.colors?.warning?.main) {\n    cssVars[`--${prefix}-color-warning-main`] = theme.colors.warning.main;\n  }\n  if (theme.colors?.warning?.contrastText) {\n    cssVars[`--${prefix}-color-warning-contrastText`] = theme.colors.warning.contrastText;\n  }\n\n  // Colors - Text\n  if (theme.colors?.text?.primary) {\n    cssVars[`--${prefix}-color-text-primary`] = theme.colors.text.primary;\n  }\n  if (theme.colors?.text?.secondary) {\n    cssVars[`--${prefix}-color-text-secondary`] = theme.colors.text.secondary;\n  }\n\n  // Colors - Border\n  if (theme.colors?.border) {\n    cssVars[`--${prefix}-color-border`] = theme.colors.border;\n  }\n\n  // Spacing\n  if (theme.spacing?.unit !== undefined) {\n    cssVars[`--${prefix}-spacing-unit`] = `${theme.spacing.unit}px`;\n  }\n\n  // Border Radius\n  if (theme.borderRadius?.small) {\n    cssVars[`--${prefix}-border-radius-small`] = theme.borderRadius.small;\n  }\n  if (theme.borderRadius?.medium) {\n    cssVars[`--${prefix}-border-radius-medium`] = theme.borderRadius.medium;\n  }\n  if (theme.borderRadius?.large) {\n    cssVars[`--${prefix}-border-radius-large`] = theme.borderRadius.large;\n  }\n\n  // Shadows\n  if (theme.shadows?.small) {\n    cssVars[`--${prefix}-shadow-small`] = theme.shadows.small;\n  }\n  if (theme.shadows?.medium) {\n    cssVars[`--${prefix}-shadow-medium`] = theme.shadows.medium;\n  }\n  if (theme.shadows?.large) {\n    cssVars[`--${prefix}-shadow-large`] = theme.shadows.large;\n  }\n\n  // Typography - Font Family\n  if (theme.typography?.fontFamily) {\n    cssVars[`--${prefix}-typography-fontFamily`] = theme.typography.fontFamily;\n  }\n\n  // Typography - Font Sizes\n  if (theme.typography?.fontSizes?.xs) {\n    cssVars[`--${prefix}-typography-fontSize-xs`] = theme.typography.fontSizes.xs;\n  }\n  if (theme.typography?.fontSizes?.sm) {\n    cssVars[`--${prefix}-typography-fontSize-sm`] = theme.typography.fontSizes.sm;\n  }\n  if (theme.typography?.fontSizes?.md) {\n    cssVars[`--${prefix}-typography-fontSize-md`] = theme.typography.fontSizes.md;\n  }\n  if (theme.typography?.fontSizes?.lg) {\n    cssVars[`--${prefix}-typography-fontSize-lg`] = theme.typography.fontSizes.lg;\n  }\n  if (theme.typography?.fontSizes?.xl) {\n    cssVars[`--${prefix}-typography-fontSize-xl`] = theme.typography.fontSizes.xl;\n  }\n  if (theme.typography?.fontSizes?.['2xl']) {\n    cssVars[`--${prefix}-typography-fontSize-2xl`] = theme.typography.fontSizes['2xl'];\n  }\n  if (theme.typography?.fontSizes?.['3xl']) {\n    cssVars[`--${prefix}-typography-fontSize-3xl`] = theme.typography.fontSizes['3xl'];\n  }\n\n  // Typography - Font Weights\n  if (theme.typography?.fontWeights?.normal !== undefined) {\n    cssVars[`--${prefix}-typography-fontWeight-normal`] = theme.typography.fontWeights.normal.toString();\n  }\n  if (theme.typography?.fontWeights?.medium !== undefined) {\n    cssVars[`--${prefix}-typography-fontWeight-medium`] = theme.typography.fontWeights.medium.toString();\n  }\n  if (theme.typography?.fontWeights?.semibold !== undefined) {\n    cssVars[`--${prefix}-typography-fontWeight-semibold`] = theme.typography.fontWeights.semibold.toString();\n  }\n  if (theme.typography?.fontWeights?.bold !== undefined) {\n    cssVars[`--${prefix}-typography-fontWeight-bold`] = theme.typography.fontWeights.bold.toString();\n  }\n\n  // Typography - Line Heights\n  if (theme.typography?.lineHeights?.tight !== undefined) {\n    cssVars[`--${prefix}-typography-lineHeight-tight`] = theme.typography.lineHeights.tight.toString();\n  }\n  if (theme.typography?.lineHeights?.normal !== undefined) {\n    cssVars[`--${prefix}-typography-lineHeight-normal`] = theme.typography.lineHeights.normal.toString();\n  }\n  if (theme.typography?.lineHeights?.relaxed !== undefined) {\n    cssVars[`--${prefix}-typography-lineHeight-relaxed`] = theme.typography.lineHeights.relaxed.toString();\n  }\n\n  // Images\n  if (theme.images) {\n    Object.keys(theme.images).forEach(imageKey => {\n      const imageConfig = theme.images![imageKey];\n      if (imageConfig?.url) {\n        cssVars[`--${prefix}-image-${imageKey}-url`] = imageConfig.url;\n      }\n      if (imageConfig?.title) {\n        cssVars[`--${prefix}-image-${imageKey}-title`] = imageConfig.title;\n      }\n      if (imageConfig?.alt) {\n        cssVars[`--${prefix}-image-${imageKey}-alt`] = imageConfig.alt;\n      }\n    });\n  }\n\n  return cssVars;\n};\n\nconst toThemeVars = (theme: ThemeConfig): ThemeVars => {\n  const prefix = theme.cssVarPrefix || VendorConstants.VENDOR_PREFIX;\n\n  const themeVars: ThemeVars = {\n    colors: {\n      action: {\n        active: `var(--${prefix}-color-action-active)`,\n        hover: `var(--${prefix}-color-action-hover)`,\n        hoverOpacity: `var(--${prefix}-color-action-hoverOpacity)`,\n        selected: `var(--${prefix}-color-action-selected)`,\n        selectedOpacity: `var(--${prefix}-color-action-selectedOpacity)`,\n        disabled: `var(--${prefix}-color-action-disabled)`,\n        disabledBackground: `var(--${prefix}-color-action-disabledBackground)`,\n        disabledOpacity: `var(--${prefix}-color-action-disabledOpacity)`,\n        focus: `var(--${prefix}-color-action-focus)`,\n        focusOpacity: `var(--${prefix}-color-action-focusOpacity)`,\n        activatedOpacity: `var(--${prefix}-color-action-activatedOpacity)`,\n      },\n      primary: {\n        main: `var(--${prefix}-color-primary-main)`,\n        contrastText: `var(--${prefix}-color-primary-contrastText)`,\n      },\n      secondary: {\n        main: `var(--${prefix}-color-secondary-main)`,\n        contrastText: `var(--${prefix}-color-secondary-contrastText)`,\n      },\n      background: {\n        surface: `var(--${prefix}-color-background-surface)`,\n        disabled: `var(--${prefix}-color-background-disabled)`,\n        body: {\n          main: `var(--${prefix}-color-background-body-main)`,\n        },\n      },\n      error: {\n        main: `var(--${prefix}-color-error-main)`,\n        contrastText: `var(--${prefix}-color-error-contrastText)`,\n      },\n      success: {\n        main: `var(--${prefix}-color-success-main)`,\n        contrastText: `var(--${prefix}-color-success-contrastText)`,\n      },\n      warning: {\n        main: `var(--${prefix}-color-warning-main)`,\n        contrastText: `var(--${prefix}-color-warning-contrastText)`,\n      },\n      text: {\n        primary: `var(--${prefix}-color-text-primary)`,\n        secondary: `var(--${prefix}-color-text-secondary)`,\n      },\n      border: `var(--${prefix}-color-border)`,\n    },\n    spacing: {\n      unit: `var(--${prefix}-spacing-unit)`,\n    },\n    borderRadius: {\n      small: `var(--${prefix}-border-radius-small)`,\n      medium: `var(--${prefix}-border-radius-medium)`,\n      large: `var(--${prefix}-border-radius-large)`,\n    },\n    shadows: {\n      small: `var(--${prefix}-shadow-small)`,\n      medium: `var(--${prefix}-shadow-medium)`,\n      large: `var(--${prefix}-shadow-large)`,\n    },\n    typography: {\n      fontFamily: `var(--${prefix}-typography-fontFamily)`,\n      fontSizes: {\n        xs: `var(--${prefix}-typography-fontSize-xs)`,\n        sm: `var(--${prefix}-typography-fontSize-sm)`,\n        md: `var(--${prefix}-typography-fontSize-md)`,\n        lg: `var(--${prefix}-typography-fontSize-lg)`,\n        xl: `var(--${prefix}-typography-fontSize-xl)`,\n        '2xl': `var(--${prefix}-typography-fontSize-2xl)`,\n        '3xl': `var(--${prefix}-typography-fontSize-3xl)`,\n      },\n      fontWeights: {\n        normal: `var(--${prefix}-typography-fontWeight-normal)`,\n        medium: `var(--${prefix}-typography-fontWeight-medium)`,\n        semibold: `var(--${prefix}-typography-fontWeight-semibold)`,\n        bold: `var(--${prefix}-typography-fontWeight-bold)`,\n      },\n      lineHeights: {\n        tight: `var(--${prefix}-typography-lineHeight-tight)`,\n        normal: `var(--${prefix}-typography-lineHeight-normal)`,\n        relaxed: `var(--${prefix}-typography-lineHeight-relaxed)`,\n      },\n    },\n  };\n\n  // Add images if they exist\n  if (theme.images) {\n    themeVars.images = {};\n    Object.keys(theme.images).forEach(imageKey => {\n      const imageConfig = theme.images![imageKey];\n      themeVars.images![imageKey] = {\n        url: imageConfig?.url ? `var(--${prefix}-image-${imageKey}-url)` : undefined,\n        title: imageConfig?.title ? `var(--${prefix}-image-${imageKey}-title)` : undefined,\n        alt: imageConfig?.alt ? `var(--${prefix}-image-${imageKey}-alt)` : undefined,\n      };\n    });\n  }\n\n  return themeVars;\n};\n\nconst createTheme = (config: RecursivePartial<ThemeConfig> = {}, isDark = false): Theme => {\n  const baseTheme = isDark ? darkTheme : lightTheme;\n\n  const mergedConfig = {\n    ...baseTheme,\n    ...config,\n    colors: {\n      ...baseTheme.colors,\n      ...config.colors,\n      action: {\n        ...baseTheme.colors.action,\n        ...(config.colors?.action || {}),\n      },\n      secondary: {\n        ...baseTheme.colors.secondary,\n        ...(config.colors?.secondary || {}),\n      },\n    },\n    spacing: {\n      ...baseTheme.spacing,\n      ...config.spacing,\n    },\n    borderRadius: {\n      ...baseTheme.borderRadius,\n      ...config.borderRadius,\n    },\n    shadows: {\n      ...baseTheme.shadows,\n      ...config.shadows,\n    },\n    typography: {\n      ...baseTheme.typography,\n      ...config.typography,\n      fontSizes: {\n        ...baseTheme.typography.fontSizes,\n        ...(config.typography?.fontSizes || {}),\n      },\n      fontWeights: {\n        ...baseTheme.typography.fontWeights,\n        ...(config.typography?.fontWeights || {}),\n      },\n      lineHeights: {\n        ...baseTheme.typography.lineHeights,\n        ...(config.typography?.lineHeights || {}),\n      },\n    },\n    images: {\n      ...baseTheme.images,\n      ...config.images,\n    },\n  } as ThemeConfig;\n\n  return {\n    ...mergedConfig,\n    cssVariables: toCssVariables(mergedConfig),\n    vars: toThemeVars(mergedConfig),\n  };\n};\n\nexport default createTheme;\n", "/**\n * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/**\n * Checks if a value is a plain object (not an array, function, date, etc.)\n *\n * @param value - The value to check\n * @returns True if the value is a plain object\n */\nconst isPlainObject = (value: unknown): value is Record<string, unknown> => {\n  return (\n    typeof value === 'object' &&\n    value !== null &&\n    !Array.isArray(value) &&\n    !(value instanceof Date) &&\n    !(value instanceof RegExp) &&\n    Object.prototype.toString.call(value) === '[object Object]'\n  );\n};\n\n/**\n * Recursively merges the properties of source objects into a target object.\n * Similar to Lodash's merge function, this creates a deep copy and merges\n * nested objects recursively. Arrays and non-plain objects are replaced entirely.\n *\n * @param target - The target object to merge into\n * @param sources - One or more source objects to merge from\n * @returns A new object with merged properties\n *\n * @example\n * ```typescript\n * const obj1 = { a: 1, b: { x: 1, y: 2 } };\n * const obj2 = { b: { y: 3, z: 4 }, c: 3 };\n * const result = deepMerge(obj1, obj2);\n * // Result: { a: 1, b: { x: 1, y: 3, z: 4 }, c: 3 }\n * ```\n *\n * @example\n * ```typescript\n * const config = { theme: { colors: { primary: 'blue' } } };\n * const userPrefs = { theme: { colors: { secondary: 'red' } } };\n * const merged = deepMerge(config, userPrefs);\n * // Result: { theme: { colors: { primary: 'blue', secondary: 'red' } } }\n * ```\n */\nconst deepMerge = <T extends Record<string, any>>(\n  target: T,\n  ...sources: Array<Record<string, any> | undefined | null>\n): T => {\n  if (!target || typeof target !== 'object') {\n    throw new Error('Target must be an object');\n  }\n\n  const result = {...target} as T;\n\n  sources.forEach(source => {\n    if (!source || typeof source !== 'object') {\n      return;\n    }\n\n    Object.keys(source).forEach(key => {\n      const sourceValue = source[key];\n      const targetValue = (result as any)[key];\n\n      if (isPlainObject(sourceValue) && isPlainObject(targetValue)) {\n        (result as any)[key] = deepMerge(targetValue, sourceValue);\n      } else if (sourceValue !== undefined) {\n        (result as any)[key] = sourceValue;\n      }\n    });\n  });\n\n  return result;\n};\n\nexport default deepMerge;\n", "/**\n * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport AsgardeoRuntimeError from '../errors/AsgardeoRuntimeError';\n\n/**\n * Extracts the organization handle from an Asgardeo base URL.\n *\n * This function parses Asgardeo URLs with the standard pattern:\n * - https://dev.asgardeo.io/t/{orgHandle}\n * - https://stage.asgardeo.io/t/{orgHandle}\n * - https://prod.asgardeo.io/t/{orgHandle}\n * - https://{subdomain}.asgardeo.io/t/{orgHandle}\n *\n * @param baseUrl - The base URL of the Asgardeo identity server\n * @returns The extracted organization handle\n * @throws {AsgardeoRuntimeError} When the URL doesn't match the expected Asgardeo pattern,\n *   indicating a custom domain is configured and organizationHandle must be provided explicitly\n *\n * @example\n * ```typescript\n * // Standard Asgardeo URLs\n * const handle1 = deriveOrganizationHandleFromBaseUrl('https://dev.asgardeo.io/t/dxlab');\n * // Returns: 'dxlab'\n *\n * const handle2 = deriveOrganizationHandleFromBaseUrl('https://stage.asgardeo.io/t/myorg');\n * // Returns: 'myorg'\n *\n * // Custom domain - throws error\n * deriveOrganizationHandleFromBaseUrl('https://custom.example.com/auth');\n * // Throws: AsgardeoRuntimeError\n * ```\n */\nconst deriveOrganizationHandleFromBaseUrl = (baseUrl?: string): string => {\n  if (!baseUrl) {\n    throw new AsgardeoRuntimeError(\n      'Base URL is required to derive organization handle.',\n      'javascript-deriveOrganizationHandleFromBaseUrl-ValidationError-001',\n      'javascript',\n      'A valid base URL must be provided to extract the organization handle.',\n    );\n  }\n\n  let parsedUrl: URL;\n\n  try {\n    parsedUrl = new URL(baseUrl);\n  } catch (error) {\n    throw new AsgardeoRuntimeError(\n      `Invalid base URL format: ${baseUrl}`,\n      'javascript-deriveOrganizationHandleFromBaseUrl-ValidationError-002',\n      'javascript',\n      'The provided base URL does not conform to valid URL syntax.',\n    );\n  }\n\n  // Check if the hostname matches the Asgardeo pattern: *.asgardeo.io\n  const hostname = parsedUrl.hostname.toLowerCase();\n  if (!hostname.endsWith('.asgardeo.io')) {\n    throw new AsgardeoRuntimeError(\n      'Organization handle is required since a custom domain is configured.',\n      'javascript-deriveOrganizationHandleFromBaseUrl-CustomDomainError-001',\n      'javascript',\n      'The provided base URL uses a custom domain. Please provide the organizationHandle explicitly in the configuration.',\n    );\n  }\n\n  // Extract the organization handle from the path pattern: /t/{orgHandle}\n  const pathSegments = parsedUrl.pathname.split('/').filter(segment => segment.length > 0);\n\n  if (pathSegments.length < 2 || pathSegments[0] !== 't') {\n    throw new AsgardeoRuntimeError(\n      'Organization handle is required since a custom domain is configured.',\n      'javascript-deriveOrganizationHandleFromBaseUrl-CustomDomainError-002',\n      'javascript',\n      'The provided base URL does not follow the expected Asgardeo URL pattern (/t/{orgHandle}). Please provide the organizationHandle explicitly in the configuration.',\n    );\n  }\n\n  const organizationHandle = pathSegments[1];\n\n  if (!organizationHandle || organizationHandle.trim().length === 0) {\n    throw new AsgardeoRuntimeError(\n      'Organization handle is required since a custom domain is configured.',\n      'javascript-deriveOrganizationHandleFromBaseUrl-CustomDomainError-003',\n      'javascript',\n      'The organization handle could not be extracted from the base URL. Please provide the organizationHandle explicitly in the configuration.',\n    );\n  }\n\n  return organizationHandle;\n};\n\nexport default deriveOrganizationHandleFromBaseUrl;\n", "/**\n * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport {Schema, FlattenedSchema} from '../models/scim2-schema';\n\n/**\n * Flattens nested schema attributes into a flat structure for easier processing\n *\n * This function processes SCIM2 schemas and creates a flattened representation by:\n * - Processing sub-attributes and creating dot-notation names (e.g., 'name.givenName')\n * - Adding schema ID reference to each flattened attribute\n * - Preserving all original attribute properties while adding schema context\n * - Only including leaf-level attributes (sub-attributes) and top-level simple attributes\n *\n * @param schemas - Array of SCIM2 schemas containing nested attribute structures\n * @returns Array of flattened schema attributes with dot-notation names and schema references\n *\n * @example\n * ```typescript\n * const schemas = [\n *   {\n *     id: 'urn:ietf:params:scim:schemas:core:2.0:User',\n *     attributes: [\n *       {\n *         name: 'userName',\n *         type: 'string',\n *         multiValued: false\n *       },\n *       {\n *         name: 'name',\n *         type: 'complex',\n *         multiValued: false,\n *         subAttributes: [\n *           { name: 'givenName', type: 'string', multiValued: false },\n *           { name: 'familyName', type: 'string', multiValued: false }\n *         ]\n *       }\n *     ]\n *   }\n * ];\n *\n * const flattened = flattenUserSchema(schemas);\n * // Result: [\n * //   { name: 'userName', type: 'string', multiValued: false, schemaId: 'urn:ietf:params:scim:schemas:core:2.0:User' },\n * //   { name: 'name.givenName', type: 'string', multiValued: false, schemaId: 'urn:ietf:params:scim:schemas:core:2.0:User' },\n * //   { name: 'name.familyName', type: 'string', multiValued: false, schemaId: 'urn:ietf:params:scim:schemas:core:2.0:User' }\n * // ]\n * ```\n */\nconst flattenUserSchema = (schemas: Schema[]): FlattenedSchema[] => {\n  const flattenedAttributes: FlattenedSchema[] = [];\n\n  schemas.forEach(schema => {\n    if (schema.attributes && Array.isArray(schema.attributes)) {\n      schema.attributes.forEach(attribute => {\n        // If the attribute has sub-attributes, only add the flattened sub-attributes\n        if (attribute.subAttributes && Array.isArray(attribute.subAttributes)) {\n          attribute.subAttributes.forEach(subAttribute => {\n            flattenedAttributes.push({\n              ...subAttribute,\n              name: `${attribute.name}.${subAttribute.name}`,\n              schemaId: schema.id,\n            } as unknown as FlattenedSchema);\n          });\n        } else {\n          // If it's a simple attribute (no sub-attributes), add it directly\n          flattenedAttributes.push({\n            ...attribute,\n            schemaId: schema.id,\n          } as unknown as FlattenedSchema);\n        }\n      });\n    }\n  });\n\n  return flattenedAttributes;\n};\n\nexport default flattenUserSchema;\n", "/**\n * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/**\n * Gets the value at path of object. If the resolved value is undefined,\n * the defaultValue is returned in its place.\n * Similar to Lodash's get() function\n *\n * @param object - The object to query\n * @param path - The path of the property to get\n * @param defaultValue - The value returned for undefined resolved values\n * @returns The resolved value\n */\nconst get = (object: any, path: string | string[], defaultValue?: any): any => {\n  if (!object || !path) return defaultValue;\n\n  const pathArray = Array.isArray(path) ? path : path.split('.');\n\n  const result = pathArray.reduce((current, key) => {\n    return current?.[key];\n  }, object);\n\n  return result !== undefined ? result : defaultValue;\n};\n\nexport default get;\n", "/**\n * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/**\n * Sets the value at path of object. If a portion of path doesn't exist,\n * it's created. Arrays are created for missing index properties while\n * objects are created for all other missing properties.\n * Similar to Lodash's set() function\n *\n * @param object - The object to modify\n * @param path - The path of the property to set\n * @param value - The value to set\n * @returns The object\n */\nconst set = (object: any, path: string | string[], value: any): any => {\n  if (!object || !path) return object;\n\n  const pathArray = Array.isArray(path) ? path : path.split('.');\n  const lastIndex = pathArray.length - 1;\n\n  pathArray.reduce((current, key, index) => {\n    if (index === lastIndex) {\n      current[key] = value;\n    } else {\n      if (!(key in current) || typeof current[key] !== 'object' || current[key] === null) {\n        // Create array if next key is numeric, otherwise create object\n        const nextKey = pathArray[index + 1];\n        current[key] = /^\\d+$/.test(nextKey) ? [] : {};\n      }\n    }\n    return current[key];\n  }, object);\n\n  return object;\n};\n\nexport default set;\n", "/**\n * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport get from './get';\nimport set from './set';\nimport {User} from '../models/user';\n\n/**\n * Creates a profile structure from ME response based on processed schemas\n *\n * This function processes each schema attribute and populates the profile dynamically by:\n * - Extracting values from the ME response using the schema attribute names\n * - Handling multi-valued attributes by converting single values to arrays when needed\n * - Setting appropriate default values based on schema type and multiValued properties\n * - Using dynamic property setting to build the final profile object\n *\n * @param meResponse - The ME API response containing user data\n * @param processedSchemas - The processed and flattened schemas with name, type, and multiValued properties\n * @returns Flat profile object with dynamically populated user attributes\n *\n * @example\n * ```typescript\n * const meResponse = {\n *   userName: 'john.doe',\n *   emails: ['john@example.com', 'john.doe@work.com'],\n *   name: { givenName: 'John', familyName: 'Doe' }\n * };\n *\n * const schemas = [\n *   { name: 'userName', type: 'STRING', multiValued: false },\n *   { name: 'emails', type: 'STRING', multiValued: true },\n *   { name: 'name.givenName', type: 'STRING', multiValued: false }\n * ];\n *\n * const profile = generateUserProfile(meResponse, schemas);\n * // Result: {\n * //   userName: 'john.doe',\n * //   emails: ['john@example.com', 'john.doe@work.com'],\n * //   'name.givenName': 'John'\n * // }\n * ```\n */\nconst generateUserProfile = (meResponse: any, processedSchemas: any[]): User => {\n  const profile: User = {};\n\n  processedSchemas.forEach(schema => {\n    const {name, type, multiValued} = schema;\n\n    if (!name) return;\n\n    let value = get(meResponse, name);\n\n    if (value !== undefined) {\n      if (multiValued && !Array.isArray(value)) {\n        value = [value];\n      }\n    } else {\n      if (multiValued) {\n        value = undefined;\n      } else if (type === 'STRING') {\n        value = '';\n      } else {\n        value = undefined;\n      }\n    }\n\n    set(profile, name, value);\n  });\n\n  return profile;\n};\n\nexport default generateUserProfile;\n", "/**\n * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com). All Rights Reserved.\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport PKCEConstants from '../constants/PKCEConstants';\nimport {TemporaryStore} from '../models/store';\nimport generateStateParamForRequestCorrelation from './generateStateParamForRequestCorrelation';\n\n/**\n * Gets the latest PKCE storage key from the temporary store.\n *\n * @param tempStore - The object that holds temporary PKCE-related data (e.g., sessionStorage).\n * @returns The latest PKCE storage key or null if no keys exist.\n */\nconst getLatestPkceStorageKey = (tempStore: TemporaryStore): string | null => {\n  const keys: string[] = [];\n\n  Object.keys(tempStore).forEach((key: string) => {\n    if (key.startsWith(PKCEConstants.Storage.StorageKeys.CODE_VERIFIER)) {\n      keys.push(key);\n    }\n  });\n\n  const lastKey: string | undefined = keys.sort().pop();\n\n  return lastKey ?? null;\n};\n\n/**\n * Finds the latest state parameter based on the most recent PKCE storage key.\n *\n * This utility combines the functionality of finding the latest PKCE key and generating\n * the corresponding state parameter for request correlation.\n *\n * @param tempStore - The object that holds temporary PKCE-related data (e.g., sessionStorage).\n * @param state - Optional state string to prepend to the request correlation.\n * @returns The latest state parameter string or null if no PKCE keys exist.\n *\n * @example\n * const latestState = getLatestStateParam(sessionStorage, \"myState\");\n * // Returns: \"myState_request_2\" (if latest PKCE key is pkce_code_verifier_2)\n *\n * const latestStateNoPrefix = getLatestStateParam(sessionStorage);\n * // Returns: \"request_2\" (if latest PKCE key is pkce_code_verifier_2)\n *\n * const noKeys = getLatestStateParam(emptyStorage);\n * // Returns: null (if no PKCE keys exist)\n */\nconst getLatestStateParam = (tempStore: TemporaryStore, state?: string): string | null => {\n  const latestPkceKey = getLatestPkceStorageKey(tempStore);\n\n  if (!latestPkceKey) {\n    return null;\n  }\n\n  return generateStateParamForRequestCorrelation(latestPkceKey, state);\n};\n\nexport default getLatestStateParam;\n", "/**\n * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport get from './get';\nimport {User} from '../models/user';\n\n/**\n * Generates a flattened user profile from a response object and schema definitions.\n *\n * This function processes user data according to schema specifications, creating\n * a flat object with dot notation keys instead of nested objects. Multi-valued\n * properties and type-specific defaults are handled appropriately.\n *\n * Additionally, any fields present in the response but not defined in the schema\n * will be included to ensure no user data is lost during flattening.\n *\n * @param meResponse - The response object containing user data\n * @param processedSchemas - Array of schema objects defining field properties\n * @param processedSchemas[].name - The field name/path for the property\n * @param processedSchemas[].type - The data type of the field (e.g., 'STRING')\n * @param processedSchemas[].multiValued - Whether the field can contain multiple values\n *\n * @returns A flattened user profile object with dot notation keys\n *\n * @example\n * ```typescript\n * const schemas = [\n *   { name: 'name.givenName', type: 'STRING', multiValued: false },\n *   { name: 'emails', type: 'STRING', multiValued: true }\n * ];\n * const response = {\n *   name: { givenName: 'John' },\n *   emails: 'john@example.com',\n *   country: 'US' // This will be included even if not in schema\n * };\n * const profile = generateFlattenedUserProfile(response, schemas);\n * // Result: { \"name.givenName\": 'John', emails: ['john@example.com'], country: 'US' }\n * ```\n */\nconst generateFlattenedUserProfile = (meResponse: any, processedSchemas: any[]): User => {\n  const profile: User = {};\n\n  const allSchemaNames: string[] = processedSchemas.map((schema: any) => schema.name).filter(Boolean);\n\n  // First, process all schema-defined fields\n  processedSchemas.forEach((schema: any) => {\n    const {name, type, multiValued} = schema;\n\n    if (!name) return;\n\n    // Skip this property if it's a parent of other flattened properties\n    // e.g., skip \"name\" if \"name.givenName\" or \"name.familyName\" exists\n    // skip \"roles\" if \"roles.default\" exists\n    const hasChildProperties: boolean = allSchemaNames.some(\n      (schemaName: string) => schemaName !== name && schemaName.startsWith(`${name}.`),\n    );\n\n    if (hasChildProperties) {\n      // Skip this parent property\n      return;\n    }\n\n    let value: any = get(meResponse, name);\n\n    // If value not found at top level, check within schema namespaces\n    if (value === undefined) {\n      const schemaNamespaces: string[] = [\n        'urn:ietf:params:scim:schemas:core:2.0:User',\n        'urn:ietf:params:scim:schemas:extension:enterprise:2.0:User',\n        'urn:scim:wso2:schema',\n        'urn:scim:schemas:extension:custom:User',\n      ];\n\n      schemaNamespaces.some((namespace: string) => {\n        if (meResponse[namespace]) {\n          // Try the field name directly within the namespace\n          if (meResponse[namespace][name] !== undefined) {\n            value = meResponse[namespace][name];\n            return true; // Break out of some()\n          }\n          // Also try using get() for nested paths within the namespace\n          const nestedValue: any = get(meResponse[namespace], name);\n          if (nestedValue !== undefined) {\n            value = nestedValue;\n            return true; // Break out of some()\n          }\n        }\n        return false;\n      });\n    }\n\n    if (value !== undefined) {\n      if (multiValued && !Array.isArray(value)) {\n        value = [value];\n      }\n    } else if (multiValued) {\n      value = undefined;\n    } else if (type === 'STRING') {\n      value = '';\n    } else {\n      value = undefined;\n    }\n\n    profile[name] = value;\n  });\n\n  // Then, include any additional fields from meResponse that aren't in the schema\n  // This ensures fields like 'country' are not missed if they exist in the response\n  const flattenObject = (obj: any, prefix: string = ''): void => {\n    if (obj && typeof obj === 'object' && !Array.isArray(obj)) {\n      Object.keys(obj).forEach((key: string) => {\n        const fullKey: string = prefix ? `${prefix}.${key}` : key;\n        const value: any = obj[key];\n\n        // Skip if this field is already processed by schema\n        if (Object.prototype.hasOwnProperty.call(profile, fullKey)) {\n          return;\n        }\n\n        // Skip if this is a parent of schema-defined fields\n        const hasSchemaChildProperties: boolean = allSchemaNames.some((schemaName: string) =>\n          schemaName.startsWith(`${fullKey}.`),\n        );\n\n        if (hasSchemaChildProperties) {\n          // Recursively process child properties\n          flattenObject(value, fullKey);\n        } else {\n          // Include the field as-is\n          profile[fullKey] = value;\n        }\n      });\n    }\n  };\n\n  flattenObject(meResponse);\n\n  return profile;\n};\n\nexport default generateFlattenedUserProfile;\n", "/**\n * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nexport {default as en_US} from './en-US';\n", "/**\n * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/* eslint-disable sort-keys */\n\nimport {I18nTranslations, I18nMetadata, I18nBundle} from '../models/i18n';\n\nconst translations: I18nTranslations = {\n  /* |---------------------------------------------------------------| */\n  /* |                        Elements                               | */\n  /* |---------------------------------------------------------------| */\n\n  //* Buttons */\n  'elements.buttons.signIn': 'Sign In',\n  'elements.buttons.signOut': 'Sign Out',\n  'elements.buttons.signUp': 'Sign Up',\n  'elements.buttons.facebook': 'Continue with Facebook',\n  'elements.buttons.google': 'Continue with Google',\n  'elements.buttons.github': 'Continue with GitHub',\n  'elements.buttons.microsoft': 'Continue with Microsoft',\n  'elements.buttons.linkedin': 'Continue with LinkedIn',\n  'elements.buttons.ethereum': 'Continue with Sign In Ethereum',\n  'elements.buttons.multi.option': 'Continue with {connection}',\n  'elements.buttons.social': 'Continue with {connection}',\n\n  /* Fields */\n  'elements.fields.placeholder': 'Enter your {field}',\n\n  /* |---------------------------------------------------------------| */\n  /* |                        Widgets                                | */\n  /* |---------------------------------------------------------------| */\n\n  /* Base Sign In */\n  'signin.title': 'Sign In',\n  'signin.subtitle': 'Enter your credentials to continue.',\n\n  /* Base Sign Up */\n  'signup.title': 'Sign Up',\n  'signup.subtitle': 'Create a new account to get started.',\n\n  /* Email OTP */\n  'email.otp.title': 'OTP Verification',\n  'email.otp.subtitle': 'Enter the code sent to your email address.',\n  'email.otp.submit.button': 'Continue',\n\n  /* Identifier First */\n  'identifier.first.title': 'Sign In',\n  'identifier.first.subtitle': 'Enter your username or email address.',\n  'identifier.first.submit.button': 'Continue',\n\n  /* SMS OTP */\n  'sms.otp.title': 'OTP Verification',\n  'sms.otp.subtitle': 'Enter the code sent to your phone number.',\n  'sms.otp.submit.button': 'Continue',\n\n  /* TOTP */\n  'totp.title': 'Verify Your Identity',\n  'totp.subtitle': 'Enter the code from your authenticator app.',\n  'totp.submit.button': 'Continue',\n\n  /* Username Password */\n  'username.password.submit.button': 'Continue',\n  'username.password.title': 'Sign In',\n  'username.password.subtitle': 'Enter your username and password to continue.',\n\n  /* |---------------------------------------------------------------| */\n  /* |                     Organization Switcher                     | */\n  /* |---------------------------------------------------------------| */\n\n  'organization.switcher.select.organization': 'Select Organization',\n  'organization.switcher.switch.organization': 'Switch Organization',\n  'organization.switcher.loading.organizations': 'Loading organizations...',\n  'organization.switcher.members': 'members',\n  'organization.switcher.member': 'member',\n  'organization.switcher.create.organization': 'Create Organization',\n  'organization.switcher.manage.organizations': 'Manage Organizations',\n  'organization.switcher.manage.button': 'Manage',\n  'organization.switcher.organizations.title': 'Organizations',\n  'organization.switcher.switch.button': 'Switch',\n  'organization.switcher.no.access': 'No Access',\n  'organization.switcher.status.label': 'Status:',\n  'organization.switcher.showing.count': 'Showing {showing} of {total} organizations',\n  'organization.switcher.refresh.button': 'Refresh',\n  'organization.switcher.load.more': 'Load More Organizations',\n  'organization.switcher.loading.more': 'Loading...',\n  'organization.switcher.no.organizations': 'No organizations found',\n  'organization.switcher.error.prefix': 'Error:',\n  'organization.profile.title': 'Organization Profile',\n  'organization.profile.loading': 'Loading organization...',\n  'organization.profile.error': 'Failed to load organization',\n\n  'organization.create.title': 'Create Organization',\n  'organization.create.name.label': 'Organization Name',\n  'organization.create.name.placeholder': 'Enter organization name',\n  'organization.create.handle.label': 'Organization Handle',\n  'organization.create.handle.placeholder': 'my-organization',\n  'organization.create.description.label': 'Description',\n  'organization.create.description.placeholder': 'Enter organization description',\n  'organization.create.button': 'Create Organization',\n  'organization.create.creating': 'Creating...',\n  'organization.create.cancel': 'Cancel',\n\n  /* |---------------------------------------------------------------| */\n  /* |                        Messages                               | */\n  /* |---------------------------------------------------------------| */\n\n  'messages.loading': 'Loading...',\n\n  /* |---------------------------------------------------------------| */\n  /* |                        Errors                                 | */\n  /* |---------------------------------------------------------------| */\n\n  'errors.title': 'Error',\n  'errors.sign.in.initialization': 'An error occurred while initializing. Please try again later.',\n  'errors.sign.in.flow.failure': 'An error occurred during the sign-in flow. Please try again later.',\n  'errors.sign.in.flow.completion.failure':\n    'An error occurred while completing the sign-in flow. Please try again later.',\n  'errors.sign.in.flow.passkeys.failure': 'An error occurred while signing in with passkeys. Please try again later.',\n  'errors.sign.in.flow.passkeys.completion.failure':\n    'An error occurred while completing the passkeys sign-in flow. Please try again later.',\n};\n\nconst metadata: I18nMetadata = {\n  localeCode: 'en-US',\n  countryCode: 'US',\n  languageCode: 'en',\n  displayName: 'English (United States)',\n  direction: 'ltr',\n};\n\nconst en_US: I18nBundle = {\n  metadata,\n  translations,\n};\n\nexport default en_US;\n", "/**\n * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport {I18nBundle, I18nTranslations} from '../models/i18n';\nimport * as i18n from '../i18n';\n\n/**\n * Get internationalization bundles for the specified locale.\n *\n * @param locale - The locale to get the bundle for (defaults to 'en-US')\n * @returns The i18n bundle for the specified locale\n */\nconst getI18nBundles = () => {\n  return i18n;\n};\n\nexport default getI18nBundles;\n", "/**\n * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/**\n * Removes a trailing slash from a path string if it exists.\n *\n * @param path - The string path to process\n * @returns The path without a trailing slash\n *\n * @example\n * ```typescript\n * removeTrailingSlash('/path/to/something/') // returns '/path/to/something'\n * removeTrailingSlash('/path/to/something') // returns '/path/to/something'\n * ```\n */\nconst removeTrailingSlash = (path: string): string => (path.endsWith('/') ? path.slice(0, -1) : path);\n\nexport default removeTrailingSlash;\n", "/**\n * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport AsgardeoRuntimeError from '../errors/AsgardeoRuntimeError';\nimport {\n  EmbeddedSignInFlowAuthenticatorExtendedParamType,\n  EmbeddedSignInFlowAuthenticatorParamType,\n} from '../models/embedded-signin-flow';\nimport {FieldType} from '../models/field';\n\nconst resolveFieldType = (field: any): FieldType => {\n  if (field.type === EmbeddedSignInFlowAuthenticatorParamType.String) {\n    // Check if there's a `param` property and if it matches a known type.\n    if (field.param === EmbeddedSignInFlowAuthenticatorExtendedParamType.Otp) {\n      return FieldType.Otp;\n    } else if (field?.confidential) {\n      return FieldType.Password;\n    }\n\n    return FieldType.Text;\n  }\n\n  throw new AsgardeoRuntimeError(\n    'Field type is not supported: ' + field.type,\n    'resolveFieldType-Invalid-001',\n    'javascript',\n    'The provided field type is not supported. Please check the field configuration.',\n  );\n};\n\nexport default resolveFieldType;\n", "/**\n * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport AsgardeoRuntimeError from '../errors/AsgardeoRuntimeError';\nimport {EmbeddedSignInFlowAuthenticatorExtendedParamType} from '../models/embedded-signin-flow';\nimport {FieldType} from '../models/field';\n\nconst resolveFieldName = (field: any): string => {\n  if (field.param) {\n    return field.param;\n  }\n\n  throw new AsgardeoRuntimeError(\n    'Field name is not supported: ',\n    'resolveFieldName-Invalid-001',\n    'javascript',\n    'The provided field name is not supported. Please check the field configuration.',\n  );\n};\n\nexport default resolveFieldName;\n", "/**\n * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport VendorConstants from '../constants/VendorConstants';\n\n/**\n * Adds a vendor-specific prefix to a CSS class name.\n *\n * @param className - The original CSS class name to be prefixed\n * @returns A new string with the vendor prefix added to the class name\n *\n * @example\n * ```typescript\n * // Usage with clsx\n * clsx(withVendorCSSClassPrefix('sign-in-button'), className)\n * // Result: \"wso2-sign-in-button\"\n * ```\n */\nconst withVendorCSSClassPrefix = (className: string): string => `${VendorConstants.VENDOR_PREFIX}-${className}`;\n\nexport default withVendorCSSClassPrefix;\n", "/**\n * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport {BrandingPreference, ThemeVariant} from '../models/branding-preference';\nimport {Theme, ThemeConfig} from '../theme/types';\nimport createTheme from '../theme/createTheme';\n\n/**\n * Safely extracts a color value from the branding preference structure\n */\nconst extractColorValue = (colorVariant?: {main?: string; contrastText?: string}) => {\n  return colorVariant?.main;\n};\n\n/**\n * Safely extracts contrast text color from the branding preference structure\n */\nconst extractContrastText = (colorVariant?: {main?: string; contrastText?: string}) => {\n  return colorVariant?.contrastText;\n};\n\n/**\n * Transforms a ThemeVariant from branding preference to ThemeConfig\n */\nconst transformThemeVariant = (themeVariant: ThemeVariant, isDark = false): Partial<ThemeConfig> => {\n  const colors = themeVariant.colors;\n  const buttons = themeVariant.buttons;\n  const inputs = themeVariant.inputs;\n  const images = themeVariant.images;\n\n  return {\n    colors: {\n      action: {\n        active: isDark ? 'rgba(255, 255, 255, 0.70)' : 'rgba(0, 0, 0, 0.54)',\n        hover: isDark ? 'rgba(255, 255, 255, 0.04)' : 'rgba(0, 0, 0, 0.04)',\n        hoverOpacity: 0.04,\n        selected: isDark ? 'rgba(255, 255, 255, 0.08)' : 'rgba(0, 0, 0, 0.08)',\n        selectedOpacity: 0.08,\n        disabled: isDark ? 'rgba(255, 255, 255, 0.26)' : 'rgba(0, 0, 0, 0.26)',\n        disabledBackground: isDark ? 'rgba(255, 255, 255, 0.12)' : 'rgba(0, 0, 0, 0.12)',\n        disabledOpacity: 0.38,\n        focus: isDark ? 'rgba(255, 255, 255, 0.12)' : 'rgba(0, 0, 0, 0.12)',\n        focusOpacity: 0.12,\n        activatedOpacity: 0.12,\n      },\n      primary: {\n        main: extractColorValue(colors?.primary),\n        contrastText: extractContrastText(colors?.primary),\n      },\n      secondary: {\n        main: extractColorValue(colors?.secondary),\n        contrastText: extractContrastText(colors?.secondary),\n      },\n      background: {\n        surface: extractColorValue(colors?.background?.surface),\n        disabled: extractColorValue(colors?.background?.surface),\n        body: {\n          main: extractColorValue(colors?.background?.body),\n        },\n      },\n      text: {\n        primary: colors?.text?.primary,\n        secondary: colors?.text?.secondary,\n      },\n      border: colors?.outlined?.default,\n      error: {\n        main: extractColorValue(colors?.alerts?.error),\n        contrastText: extractContrastText(colors?.alerts?.error),\n      },\n      success: {\n        main: extractColorValue(colors?.alerts?.info),\n        contrastText: extractContrastText(colors?.alerts?.info),\n      },\n      warning: {\n        main: extractColorValue(colors?.alerts?.warning),\n        contrastText: extractContrastText(colors?.alerts?.warning),\n      },\n    },\n    // Extract border radius from buttons or inputs\n    borderRadius: {\n      small: buttons?.primary?.base?.border?.borderRadius || inputs?.base?.border?.borderRadius,\n      medium: buttons?.secondary?.base?.border?.borderRadius,\n      large: buttons?.externalConnection?.base?.border?.borderRadius,\n    },\n    // Extract and transform images\n    images: {\n      favicon: images?.favicon\n        ? {\n            url: images.favicon.imgURL,\n            title: images.favicon.title,\n            alt: images.favicon.altText,\n          }\n        : undefined,\n      logo: images?.logo\n        ? {\n            url: images.logo.imgURL,\n            title: images.logo.title,\n            alt: images.logo.altText,\n          }\n        : undefined,\n    },\n  };\n};\n\n/**\n * Transforms branding preference response to Theme object\n *\n * @param brandingPreference - The branding preference response from getBrandingPreference\n * @param forceTheme - Optional parameter to force a specific theme ('light' or 'dark'),\n *                     if not provided, will use the activeTheme from branding preference\n * @returns Theme object that can be used with the theme system\n *\n * The function extracts the following from branding preference:\n * - Colors (primary, secondary, background, text, alerts, etc.)\n * - Border radius from buttons and inputs\n * - Images (logo and favicon with their URLs, titles, and alt text)\n * - Typography settings\n *\n * @example\n * ```typescript\n * const brandingPreference = await getBrandingPreference({ baseUrl: \"...\" });\n * const theme = transformBrandingPreferenceToTheme(brandingPreference);\n *\n * // Access image URLs via CSS variables\n * // Logo: var(--wso2-image-logo-url)\n * // Favicon: var(--wso2-image-favicon-url)\n *\n * // Force light theme regardless of branding preference activeTheme\n * const lightTheme = transformBrandingPreferenceToTheme(brandingPreference, 'light');\n * ```\n */\nexport const transformBrandingPreferenceToTheme = (\n  brandingPreference: BrandingPreference,\n  forceTheme?: 'light' | 'dark',\n): Theme => {\n  // Extract theme configuration\n  const themeConfig = brandingPreference?.preference?.theme;\n\n  if (!themeConfig) {\n    // If no theme config is provided, return default light theme\n    return createTheme({}, false);\n  }\n\n  // Determine which theme variant to use\n  let activeThemeKey: string;\n  if (forceTheme) {\n    activeThemeKey = forceTheme.toUpperCase();\n  } else {\n    activeThemeKey = themeConfig.activeTheme || 'LIGHT';\n  }\n\n  // Get the theme variant (LIGHT or DARK)\n  const themeVariant = themeConfig[activeThemeKey as keyof typeof themeConfig] as ThemeVariant;\n\n  if (!themeVariant) {\n    // If the specified theme variant doesn't exist, fallback to light theme\n    const fallbackVariant = themeConfig.LIGHT || themeConfig.DARK;\n    if (fallbackVariant) {\n      const transformedConfig = transformThemeVariant(fallbackVariant, activeThemeKey === 'DARK');\n      return createTheme(transformedConfig, activeThemeKey === 'DARK');\n    }\n    // If no theme variants exist, return default theme\n    return createTheme({}, activeThemeKey === 'DARK');\n  }\n\n  // Transform the theme variant to ThemeConfig\n  const transformedConfig = transformThemeVariant(themeVariant, activeThemeKey === 'DARK');\n\n  // Create the theme using the transformed config\n  return createTheme(transformedConfig, activeThemeKey === 'DARK');\n};\n\nexport default transformBrandingPreferenceToTheme;\n"],
  "mappings": "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",
  "names": ["tokenResponse", "EmbeddedFlowType", "EmbeddedFlowStatus", "EmbeddedFlowResponseType", "EmbeddedFlowComponentType", "EmbeddedSignInFlowStatus", "EmbeddedSignInFlowType", "EmbeddedSignInFlowStepType", "EmbeddedSignInFlowAuthenticatorParamType", "EmbeddedSignInFlowAuthenticatorKnownIdPType", "EmbeddedSignInFlowAuthenticatorPromptType", "FlowMode", "WellKnownSchemaIds", "FieldType", "transformedConfig"]
}
