/**
 * Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com).
 *
 * WSO2 LLC. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
import { User } from '../models/user';
/**
 * Configuration for the updateMeProfile request
 */
export interface UpdateMeProfileConfig extends Omit<RequestInit, 'method' | 'body'> {
    /**
     * The absolute API endpoint.
     */
    url?: string;
    /**
     * The base path of the API endpoint.
     */
    baseUrl?: string;
    /**
     * The value object to patch (SCIM2 PATCH value)
     */
    payload: any;
    /**
     * Optional custom fetcher function.
     * If not provided, native fetch will be used
     */
    fetcher?: (url: string, config: RequestInit) => Promise<Response>;
}
/**
 * Updates the user profile information at the specified SCIM2 Me endpoint.
 *
 * @param config - Configuration object with URL, payload and optional request config.
 * @returns A promise that resolves with the updated user profile information.
 * @example
 * ```typescript
 * // Using default fetch
 * await updateMeProfile({
 *   url: "https://api.asgardeo.io/t/<ORG>/scim2/Me",
 *   payload: { "urn:scim:wso2:schema": { mobileNumbers: ["0777933830"] } }
 * });
 * ```
 *
 * @example
 * ```typescript
 * // Using custom fetcher (e.g., axios-based httpClient)
 * await updateMeProfile({
 *   url: "https://api.asgardeo.io/t/<ORG>/scim2/Me",
 *   payload: { "urn:scim:wso2:schema": { mobileNumbers: ["0777933830"] } },
 *   fetcher: async (url, config) => {
 *     const response = await httpClient({
 *       url,
 *       method: config.method,
 *       headers: config.headers,
 *       data: config.body,
 *       ...config
 *     });
 *     // Convert axios-like response to fetch-like Response
 *     return {
 *       ok: response.status >= 200 && response.status < 300,
 *       status: response.status,
 *       statusText: response.statusText,
 *       json: () => Promise.resolve(response.data),
 *       text: () => Promise.resolve(typeof response.data === 'string' ? response.data : JSON.stringify(response.data))
 *     } as Response;
 *   }
 * });
 * ```
 */
declare const updateMeProfile: ({ url, baseUrl, payload, fetcher, ...requestConfig }: UpdateMeProfileConfig) => Promise<User>;
export default updateMeProfile;
