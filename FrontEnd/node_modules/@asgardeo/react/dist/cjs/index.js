var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);

// src/index.ts
var index_exports = {};
__export(index_exports, {
  Alert: () => Alert_default,
  AlertDescription: () => AlertDescription,
  AlertTitle: () => AlertTitle,
  AsgardeoContext: () => AsgardeoContext_default,
  AsgardeoLoading: () => AsgardeoLoading_default,
  AsgardeoProvider: () => AsgardeoProvider_default,
  BaseCreateOrganization: () => BaseCreateOrganization,
  BaseOrganization: () => BaseOrganization_default,
  BaseOrganizationList: () => BaseOrganizationList_default,
  BaseOrganizationProfile: () => BaseOrganizationProfile_default,
  BaseOrganizationSwitcher: () => BaseOrganizationSwitcher_default,
  BaseSignIn: () => BaseSignIn_default,
  BaseSignInButton: () => BaseSignInButton_default,
  BaseSignOutButton: () => BaseSignOutButton_default,
  BaseSignUp: () => BaseSignUp_default,
  BaseSignUpButton: () => BaseSignUpButton_default,
  BaseUser: () => BaseUser_default,
  BaseUserDropdown: () => BaseUserDropdown_default,
  BaseUserProfile: () => BaseUserProfile_default,
  BrandingContext: () => BrandingContext_default,
  BrandingProvider: () => BrandingProvider_default,
  BuildingAlt: () => BuildingAlt_default,
  Button: () => Button_default,
  Card: () => Card_default,
  CardAction: () => CardAction,
  CardContent: () => CardContent,
  CardDescription: () => CardDescription,
  CardFooter: () => CardFooter,
  CardHeader: () => CardHeader,
  CardTitle: () => CardTitle,
  Checkbox: () => Checkbox_default,
  CircleAlert: () => CircleAlert_default,
  CircleCheck: () => CircleCheck_default,
  CreateOrganization: () => CreateOrganization,
  DatePicker: () => DatePicker_default,
  Divider: () => Divider_default,
  EmailOtp: () => EmailOtp_default,
  Eye: () => Eye_default,
  EyeOff: () => EyeOff_default,
  FacebookButton: () => FacebookButton_default,
  FieldFactory: () => FieldFactory,
  FlowContext: () => FlowContext_default,
  FlowProvider: () => FlowProvider_default,
  FormControl: () => FormControl_default,
  GitHubButton: () => GitHubButton_default,
  GoogleButton: () => GoogleButton_default,
  I18nContext: () => I18nContext_default,
  I18nProvider: () => I18nProvider_default,
  IdentifierFirst: () => IdentifierFirst_default,
  Info: () => Info_default,
  InputLabel: () => InputLabel_default,
  KeyValueInput: () => KeyValueInput_default,
  LinkedInButton: () => LinkedInButton_default,
  LogOut: () => LogOut_default,
  Logo: () => Logo_default,
  MicrosoftButton: () => MicrosoftButton_default,
  MultiInput: () => MultiInput_default,
  MultiOptionButton: () => MultiOptionButton_default,
  Organization: () => Organization_default,
  OrganizationContext: () => OrganizationContext_default,
  OrganizationList: () => OrganizationList_default,
  OrganizationProfile: () => OrganizationProfile_default,
  OrganizationProvider: () => OrganizationProvider_default,
  OrganizationSwitcher: () => OrganizationSwitcher_default,
  OtpField: () => OtpField_default,
  PasswordField: () => PasswordField_default,
  Select: () => Select_default,
  SignIn: () => SignIn_default,
  SignInButton: () => SignInButton_default,
  SignInWithEthereumButton: () => SignInWithEthereumButton_default,
  SignOutButton: () => SignOutButton_default,
  SignUp: () => SignUp_default,
  SignUpButton: () => SignUpButton_default,
  SignedIn: () => SignedIn_default,
  SignedOut: () => SignedOut_default,
  SmsOtp: () => SmsOtp_default,
  SocialButton: () => SocialButton_default,
  Spinner: () => Spinner_default,
  TextField: () => TextField_default,
  ThemeContext: () => ThemeContext_default,
  ThemeProvider: () => ThemeProvider_default,
  Totp: () => Totp_default,
  TriangleAlert: () => TriangleAlert_default,
  Typography: () => Typography_default,
  User: () => User_default,
  UserContext: () => UserContext_default,
  UserDropdown: () => UserDropdown_default,
  UserIcon: () => User_default2,
  UserProfile: () => UserProfile_default,
  UserProvider: () => UserProvider_default,
  UsernamePassword: () => UsernamePassword_default,
  createField: () => createField,
  createOrganization: () => createOrganization_default,
  createPatchOperations: () => import_browser64.createPatchOperations,
  createSignInOption: () => createSignInOption,
  createSignInOptionFromAuthenticator: () => createSignInOptionFromAuthenticator,
  getAllOrganizations: () => getAllOrganizations_default,
  getMeOrganizations: () => getMeOrganizations_default,
  getMeProfile: () => getScim2Me_default,
  getOrganization: () => getOrganization_default,
  getSchemas: () => getSchemas_default,
  updateMeProfile: () => updateMeProfile_default,
  updateOrganization: () => updateOrganization_default,
  useAsgardeo: () => useAsgardeo_default,
  useBranding: () => useBranding_default,
  useBrandingContext: () => useBrandingContext_default,
  useBrowserUrl: () => useBrowserUrl_default,
  useFlow: () => useFlow_default,
  useForm: () => useForm_default,
  useI18n: () => useI18n_default,
  useOrganization: () => useOrganization_default,
  useTheme: () => useTheme_default,
  useTranslation: () => useTranslation_default,
  useUser: () => useUser_default,
  validateFieldValue: () => validateFieldValue
});
module.exports = __toCommonJS(index_exports);

// src/contexts/Asgardeo/AsgardeoProvider.tsx
var import_browser13 = require("@asgardeo/browser");
var import_react15 = require("react");

// src/contexts/Asgardeo/AsgardeoContext.ts
var import_react = require("react");
var AsgardeoContext = (0, import_react.createContext)({
  organizationHandle: void 0,
  applicationId: void 0,
  signInUrl: void 0,
  signUpUrl: void 0,
  afterSignInUrl: void 0,
  baseUrl: void 0,
  isInitialized: false,
  isLoading: true,
  isSignedIn: false,
  organization: null,
  signIn: null,
  signOut: null,
  signUp: null,
  user: null
});
AsgardeoContext.displayName = "AsgardeoContext";
var AsgardeoContext_default = AsgardeoContext;

// src/AsgardeoReactClient.ts
var import_browser6 = require("@asgardeo/browser");

// src/__temp__/api.ts
var import_browser = require("@asgardeo/browser");
var _AuthAPI = class _AuthAPI {
  constructor(spaClient) {
    __publicField(this, "_authState", _AuthAPI.DEFAULT_STATE);
    __publicField(this, "_client");
    __publicField(this, "_isLoading");
    this._client = spaClient ?? import_browser.AsgardeoSPAClient.getInstance();
    this.getState = this.getState.bind(this);
    this.init = this.init.bind(this);
    this.signIn = this.signIn.bind(this);
    this.signOut = this.signOut.bind(this);
    this.updateState = this.updateState.bind(this);
  }
  _setIsLoading(isLoading) {
    this._isLoading = isLoading;
  }
  _getIsLoading() {
    return this._isLoading;
  }
  isLoading() {
    return this._getIsLoading();
  }
  /**
   * Method to return Auth Client instance authentication state.
   *
   * @return {AuthStateInterface} Authentication State.
   */
  getState() {
    return this._authState;
  }
  /**
   * Method to initialize the AuthClient instance.
   *
   * @param {Config} config - `dispatch` function from React Auth Context.
   */
  async init(config) {
    return this._client.initialize(config);
  }
  /**
   * Method to get the configuration data.
   *
   * @returns {Promise<AuthClientConfig<Config>>} - A promise that resolves with the configuration data.
   */
  async getConfigData() {
    return this._client.getConfigData();
  }
  /**
   * Method to get the configuration data.
   *
   * @returns {Promise<AuthClientConfig<Config>>} - A promise that resolves with the configuration data.
   */
  async isInitialized() {
    return this._client.isInitialized();
  }
  /**
   * Method to handle user Sign In requests.
   *
   * @param {any} dispatch - `dispatch` function from React Auth Context.
   * @param {AuthStateInterface} state - Current authentication state in React Auth Context.
   * @param {any} callback - Action to trigger on successful sign in.
   */
  async signIn(config, authorizationCode, sessionState, authState, callback, tokenRequestConfig) {
    return this._client.signIn(config, authorizationCode, sessionState, authState, tokenRequestConfig).then(async (response) => {
      if (!response) {
        return null;
      }
      if (await this._client.isSignedIn()) {
        const stateToUpdate = {
          displayName: response.displayName,
          email: response.email,
          isSignedIn: true,
          isLoading: false,
          isSigningOut: false,
          username: response.username
        };
        this.updateState(stateToUpdate);
        this._setIsLoading(false);
        if (callback) {
          callback(response);
        }
      }
      return response;
    }).catch((error) => Promise.reject(error));
  }
  /**
   * Method to handle user Sign Out requests.
   *
   * @param {any} dispatch - `dispatch` function from React Auth Context.
   * @param {AuthStateInterface} state - Current authentication state in React Auth Context.
   * @param {any} callback - Action to trigger on successful sign out.
   */
  signOut(callback) {
    return this._client.signOut().then((response) => {
      if (callback) {
        callback(response);
      }
      return response;
    }).catch((error) => Promise.reject(error));
  }
  /**
   * Method to update Auth Client instance authentication state.
   *
   * @param {AuthStateInterface} state - State values to update in authentication state.
   */
  updateState(state) {
    this._authState = { ...this._authState, ...state };
  }
  /**
   * This method returns a Promise that resolves with the basic user information obtained from the ID token.
   *
   * @return {Promise<User>} - A promise that resolves with the user information.
   */
  async getUser() {
    return this._client.getUser();
  }
  /**
   * This method sends an API request to a protected endpoint.
   * The access token is automatically attached to the header of the request.
   * This is the only way by which protected endpoints can be accessed
   * when the web worker is used to store session information.
   *
   * @param {HttpRequestConfig} config -  The config object containing attributes necessary to send a request.
   *
   * @return {Promise<Response>} - Returns a Promise that resolves with the response to the request.
   */
  async httpRequest(config) {
    return this._client.httpRequest(config);
  }
  /**
   * This method sends multiple API requests to a protected endpoint.
   * The access token is automatically attached to the header of the request.
   * This is the only way by which multiple requests can be sent to protected endpoints
   * when the web worker is used to store session information.
   *
   * @param {HttpRequestConfig[]} config -  The config object containing attributes necessary to send a request.
   *
   * @return {Promise<Response>} - Returns a Promise that resolves with the responses to the requests.
   */
  async httpRequestAll(configs) {
    return this._client.httpRequestAll(configs);
  }
  /**
   * This method allows you to send a request with a custom grant.
   *
   * @param {CustomGrantRequestParams} config - The request parameters.
   *
   * @return {Promise<Response | SignInResponse>} - A Promise that resolves with
   * the value returned by the custom grant request.
   */
  exchangeToken(config, callback, dispatch) {
    return this._client.exchangeToken(config).then((response) => {
      if (!response) {
        return null;
      }
      if (config.returnsSession) {
        this.updateState({
          ...this.getState(),
          ...response,
          isSignedIn: true,
          isLoading: false
        });
        dispatch({ ...response, isSignedIn: true, isLoading: false });
      }
      callback && callback(response);
      return response;
    }).catch((error) => Promise.reject(error));
  }
  /**
   * This method ends a user session. The access token is revoked and the session information is destroyed.
   *
   * @return {Promise<boolean>} - A promise that resolves with `true` if the process is successful.
   */
  async revokeAccessToken(dispatch) {
    return this._client.revokeAccessToken().then(() => {
      this.updateState({ ..._AuthAPI.DEFAULT_STATE, isLoading: false });
      dispatch(_AuthAPI.DEFAULT_STATE);
      return true;
    }).catch((error) => Promise.reject(error));
  }
  /**
   * This method returns a Promise that resolves with an object containing the service endpoints.
   *
   * @return {Promise<ServiceResourcesType} - A Promise that resolves with an object containing the service endpoints.
   */
  async getOpenIDProviderEndpoints() {
    return this._client.getOpenIDProviderEndpoints();
  }
  /**
   * This methods returns the Axios http client.
   *
   * @return {HttpClientInstance} - The Axios HTTP client.
   */
  async getHttpClient() {
    return this._client.getHttpClient();
  }
  /**
   * This method decodes the payload of the id token and returns it.
   *
   * @return {Promise<DecodedIDTokenPayloadInterface>} - A Promise that resolves with
   * the decoded payload of the id token.
   */
  async getDecodedIdToken(sessionId) {
    return this._client.getDecodedIdToken(sessionId);
  }
  /**
   * This method decodes the payload of the idp id token and returns it.
   *
   * @return {Promise<DecodedIDTokenPayloadInterface>} - A Promise that resolves with
   * the decoded payload of the idp id token.
   */
  async getDecodedIDPIDToken() {
    return this._client.getDecodedIdToken();
  }
  /**
   * This method returns the ID token.
   *
   * @return {Promise<string>} - A Promise that resolves with the id token.
   */
  async getIdToken() {
    return this._client.getIdToken();
  }
  /**
   * This method return a Promise that resolves with the access token.
   *
   * **This method will not return the access token if the storage type is set to `webWorker`.**
   *
   * @return {Promise<string>} - A Promise that resolves with the access token.
   */
  async getAccessToken() {
    return this._client.getAccessToken();
  }
  /**
   * This method return a Promise that resolves with the idp access token.
   *
   * **This method will not return the idp access token if the storage type is set to `webWorker`.**
   * **This can be used to access the IDP access token when custom auth grant functionalities are used**
   *
   * @return {Promise<string>} - A Promise that resolves with the idp access token.
   */
  async getIDPAccessToken() {
    return this._client.getIDPAccessToken();
  }
  /**
   * This method refreshes the access token.
   *
   * @return {TokenResponseInterface} - A Promise that resolves with an object containing
   * information about the refreshed access token.
   */
  async refreshAccessToken() {
    return this._client.refreshAccessToken();
  }
  /**
   * This method specifies if the user is authenticated or not.
   *
   * @return {Promise<boolean>} - A Promise that resolves with `true` if teh user is authenticated.
   */
  async isSignedIn() {
    return this._client.isSignedIn();
  }
  /**
   * This method specifies if the session is active or not.
   *
   * @return {Promise<boolean>} - A Promise that resolves with `true` if there is an active session.
   */
  async isSessionActive() {
    return this._client.isSessionActive();
  }
  /**
   * This method enables callback functions attached to the http client.
   *
   * @return {Promise<boolean>} - A promise that resolves with True.
   *
   */
  async enableHttpHandler() {
    return this._client.enableHttpHandler();
  }
  /**
   * This method disables callback functions attached to the http client.
   *
   * @return {Promise<boolean>} - A promise that resolves with True.
   */
  async disableHttpHandler() {
    return this._client.disableHttpHandler();
  }
  /**
   * This method updates the configuration that was passed into the constructor when instantiating this class.
   *
   * @param {Partial<AuthClientConfig<T>>} config - A config object to update the SDK configurations with.
   */
  async reInitialize(config) {
    return this._client.reInitialize(config);
  }
  on(hook, callback, id) {
    if (hook === import_browser.Hooks.CustomGrant) {
      return this._client.on(hook, callback, id);
    }
    return this._client.on(hook, callback);
  }
  /**
   * This method allows you to sign in silently.
   * First, this method sends a prompt none request to see if there is an active user session in the identity server.
   * If there is one, then it requests the access token and stores it. Else, it returns false.
   *
   * @return {Promise<User | boolean>} - A Promise that resolves with the user information after signing in
   * or with `false` if the user is not signed in.
   *
   * @example
   *```
   * client.trySignInSilently()
   *```
   */
  async trySignInSilently(state, dispatch, additionalParams, tokenRequestConfig) {
    return this._client.trySignInSilently(additionalParams, tokenRequestConfig).then(async (response) => {
      if (!response) {
        this.updateState({ ...this.getState(), isLoading: false });
        dispatch({ ...state, isLoading: false });
        return false;
      }
      if (await this._client.isSignedIn()) {
        const basicUserInfo = response;
        const stateToUpdate = {
          displayName: basicUserInfo.displayName,
          email: basicUserInfo.email,
          isSignedIn: true,
          isLoading: false,
          isSigningOut: false,
          username: basicUserInfo.username
        };
        this.updateState(stateToUpdate);
        dispatch({ ...state, ...stateToUpdate });
      }
      return response;
    }).catch((error) => Promise.reject(error));
  }
};
__publicField(_AuthAPI, "DEFAULT_STATE");
var AuthAPI = _AuthAPI;
AuthAPI.DEFAULT_STATE = {
  displayName: "",
  email: "",
  isSignedIn: false,
  isLoading: true,
  username: ""
};
var api_default = AuthAPI;

// src/api/getMeOrganizations.ts
var import_browser2 = require("@asgardeo/browser");
var httpClient = import_browser2.AsgardeoSPAClient.getInstance().httpRequest.bind(import_browser2.AsgardeoSPAClient.getInstance());
var getMeOrganizations = async ({ fetcher, ...requestConfig }) => {
  const defaultFetcher = async (url, config) => {
    const response = await httpClient({
      url,
      method: config.method || "GET",
      headers: config.headers
    });
    return {
      ok: response.status >= 200 && response.status < 300,
      status: response.status,
      statusText: response.statusText || "",
      json: () => Promise.resolve(response.data),
      text: () => Promise.resolve(typeof response.data === "string" ? response.data : JSON.stringify(response.data))
    };
  };
  return (0, import_browser2.getMeOrganizations)({
    ...requestConfig,
    fetcher: fetcher || defaultFetcher
  });
};
var getMeOrganizations_default = getMeOrganizations;

// src/api/getScim2Me.ts
var import_browser3 = require("@asgardeo/browser");
var httpClient2 = import_browser3.AsgardeoSPAClient.getInstance().httpRequest.bind(import_browser3.AsgardeoSPAClient.getInstance());
var getScim2Me = async ({ fetcher, ...requestConfig }) => {
  const defaultFetcher = async (url, config) => {
    const response = await httpClient2({
      url,
      method: config.method || "GET",
      headers: config.headers
    });
    return {
      ok: response.status >= 200 && response.status < 300,
      status: response.status,
      statusText: response.statusText || "",
      json: () => Promise.resolve(response.data),
      text: () => Promise.resolve(typeof response.data === "string" ? response.data : JSON.stringify(response.data))
    };
  };
  return (0, import_browser3.getScim2Me)({
    ...requestConfig,
    fetcher: fetcher || defaultFetcher
  });
};
var getScim2Me_default = getScim2Me;

// src/api/getSchemas.ts
var import_browser4 = require("@asgardeo/browser");
var httpClient3 = import_browser4.AsgardeoSPAClient.getInstance().httpRequest.bind(import_browser4.AsgardeoSPAClient.getInstance());
var getSchemas = async ({ fetcher, ...requestConfig }) => {
  const defaultFetcher = async (url, config) => {
    const response = await httpClient3({
      url,
      method: config.method || "GET",
      headers: config.headers
    });
    return {
      ok: response.status >= 200 && response.status < 300,
      status: response.status,
      statusText: response.statusText || "",
      json: () => Promise.resolve(response.data),
      text: () => Promise.resolve(typeof response.data === "string" ? response.data : JSON.stringify(response.data))
    };
  };
  return (0, import_browser4.getSchemas)({
    ...requestConfig,
    fetcher: fetcher || defaultFetcher
  });
};
var getSchemas_default = getSchemas;

// src/api/getAllOrganizations.ts
var import_browser5 = require("@asgardeo/browser");
var httpClient4 = import_browser5.AsgardeoSPAClient.getInstance().httpRequest.bind(import_browser5.AsgardeoSPAClient.getInstance());
var getAllOrganizations = async ({
  fetcher,
  ...requestConfig
}) => {
  const defaultFetcher = async (url, config) => {
    const response = await httpClient4({
      url,
      method: config.method || "GET",
      headers: config.headers
    });
    return {
      ok: response.status >= 200 && response.status < 300,
      status: response.status,
      statusText: response.statusText || "",
      json: () => Promise.resolve(response.data),
      text: () => Promise.resolve(typeof response.data === "string" ? response.data : JSON.stringify(response.data))
    };
  };
  return (0, import_browser5.getAllOrganizations)({
    ...requestConfig,
    fetcher: fetcher || defaultFetcher
  });
};
var getAllOrganizations_default = getAllOrganizations;

// src/AsgardeoReactClient.ts
var AsgardeoReactClient = class extends import_browser6.AsgardeoBrowserClient {
  constructor() {
    super();
    __publicField(this, "asgardeo");
    this.asgardeo = new api_default();
  }
  initialize(config) {
    let resolvedOrganizationHandle = config?.organizationHandle;
    if (!resolvedOrganizationHandle) {
      resolvedOrganizationHandle = (0, import_browser6.deriveOrganizationHandleFromBaseUrl)(config?.baseUrl);
    }
    return this.asgardeo.init({ ...config, organizationHandle: resolvedOrganizationHandle });
  }
  async updateUserProfile(payload, userId) {
    throw new Error("Not implemented");
  }
  async getUser(options) {
    try {
      let baseUrl = options?.baseUrl;
      if (!baseUrl) {
        const configData = await this.asgardeo.getConfigData();
        baseUrl = configData?.baseUrl;
      }
      const profile = await getScim2Me_default({ baseUrl });
      const schemas = await getSchemas_default({ baseUrl });
      return (0, import_browser6.generateUserProfile)(profile, (0, import_browser6.flattenUserSchema)(schemas));
    } catch (error) {
      return (0, import_browser6.extractUserClaimsFromIdToken)(await this.getDecodedIdToken());
    }
  }
  async getDecodedIdToken(sessionId) {
    return this.asgardeo.getDecodedIdToken(sessionId);
  }
  async getUserProfile(options) {
    try {
      let baseUrl = options?.baseUrl;
      if (!baseUrl) {
        const configData = await this.asgardeo.getConfigData();
        baseUrl = configData?.baseUrl;
      }
      const profile = await getScim2Me_default({ baseUrl });
      const schemas = await getSchemas_default({ baseUrl });
      const processedSchemas = (0, import_browser6.flattenUserSchema)(schemas);
      const output = {
        schemas: processedSchemas,
        flattenedProfile: (0, import_browser6.generateFlattenedUserProfile)(profile, processedSchemas),
        profile
      };
      return output;
    } catch (error) {
      return {
        schemas: [],
        flattenedProfile: (0, import_browser6.extractUserClaimsFromIdToken)(await this.getDecodedIdToken()),
        profile: (0, import_browser6.extractUserClaimsFromIdToken)(await this.getDecodedIdToken())
      };
    }
  }
  async getMyOrganizations(options, sessionId) {
    try {
      let baseUrl = options?.baseUrl;
      if (!baseUrl) {
        const configData = await this.asgardeo.getConfigData();
        baseUrl = configData?.baseUrl;
      }
      return getMeOrganizations_default({ baseUrl });
    } catch (error) {
      throw new import_browser6.AsgardeoRuntimeError(
        `Failed to fetch the user's associated organizations: ${error instanceof Error ? error.message : String(error)}`,
        "AsgardeoReactClient-getMyOrganizations-RuntimeError-001",
        "react",
        "An error occurred while fetching associated organizations of the signed-in user."
      );
    }
  }
  async getAllOrganizations(options, sessionId) {
    try {
      let baseUrl = options?.baseUrl;
      if (!baseUrl) {
        const configData = await this.asgardeo.getConfigData();
        baseUrl = configData?.baseUrl;
      }
      return getAllOrganizations_default({ baseUrl });
    } catch (error) {
      throw new import_browser6.AsgardeoRuntimeError(
        `Failed to fetch all organizations: ${error instanceof Error ? error.message : String(error)}`,
        "AsgardeoReactClient-getAllOrganizations-RuntimeError-001",
        "react",
        "An error occurred while fetching all the organizations associated with the user."
      );
    }
  }
  async getCurrentOrganization() {
    const idToken = await this.getDecodedIdToken();
    return {
      orgHandle: idToken?.org_handle,
      name: idToken?.org_name,
      id: idToken?.org_id
    };
  }
  async switchOrganization(organization, sessionId) {
    try {
      const configData = await this.asgardeo.getConfigData();
      const scopes = configData?.scopes;
      if (!organization.id) {
        throw new import_browser6.AsgardeoRuntimeError(
          "Organization ID is required for switching organizations",
          "react-AsgardeoReactClient-SwitchOrganizationError-001",
          "react",
          "The organization object must contain a valid ID to perform the organization switch."
        );
      }
      const exchangeConfig = {
        attachToken: false,
        data: {
          client_id: "{{clientId}}",
          grant_type: "organization_switch",
          scope: "{{scopes}}",
          switching_organization: organization.id,
          token: "{{accessToken}}"
        },
        id: "organization-switch",
        returnsSession: true,
        signInRequired: true
      };
      return await this.asgardeo.exchangeToken(
        exchangeConfig,
        (user) => {
        },
        () => null
      );
    } catch (error) {
      throw new import_browser6.AsgardeoRuntimeError(
        `Failed to switch organization: ${error.message || error}`,
        "react-AsgardeoReactClient-SwitchOrganizationError-003",
        "react",
        "An error occurred while switching to the specified organization. Please try again."
      );
    }
  }
  isLoading() {
    return this.asgardeo.isLoading();
  }
  async isInitialized() {
    return this.asgardeo.isInitialized();
  }
  isSignedIn() {
    return this.asgardeo.isSignedIn();
  }
  getConfiguration() {
    return this.asgardeo.getConfigData();
  }
  async signIn(...args) {
    const arg1 = args[0];
    const arg2 = args[1];
    if (typeof arg1 === "object" && "flowId" in arg1 && typeof arg2 === "object" && "url" in arg2) {
      return (0, import_browser6.executeEmbeddedSignInFlow)({
        payload: arg1,
        url: arg2.url
      });
    }
    return await this.asgardeo.signIn(arg1);
  }
  async signOut(...args) {
    if (args[1] && typeof args[1] !== "function") {
      throw new Error("The second argument must be a function.");
    }
    const response = await this.asgardeo.signOut(args[1]);
    return Promise.resolve(String(response));
  }
  async signUp(...args) {
    if (args.length === 0) {
      throw new import_browser6.AsgardeoRuntimeError(
        "No arguments provided for signUp method.",
        "react-AsgardeoReactClient-ValidationError-001",
        "react",
        "The signUp method requires at least one argument, either a SignUpOptions object or an EmbeddedFlowExecuteRequestPayload."
      );
    }
    const firstArg = args[0];
    if (typeof firstArg === "object" && "flowType" in firstArg) {
      const configData = await this.asgardeo.getConfigData();
      const baseUrl = configData?.baseUrl;
      return (0, import_browser6.executeEmbeddedSignUpFlow)({
        baseUrl,
        payload: firstArg
      });
    }
    throw new import_browser6.AsgardeoRuntimeError(
      "Not implemented",
      "react-AsgardeoReactClient-ValidationError-002",
      "react",
      "The signUp method with SignUpOptions is not implemented in the React client."
    );
  }
};
var AsgardeoReactClient_default = AsgardeoReactClient;

// src/hooks/useBrowserUrl.ts
var import_browser7 = require("@asgardeo/browser");
var useBrowserUrl = () => {
  const hasAuthParams = (url, afterSignInUrl) => (0, import_browser7.hasAuthParamsInUrl)() && new URL(url.origin + url.pathname).toString() === new URL(afterSignInUrl).toString() || // authParams?.authorizationCode || // FIXME: These are sent externally. Need to see what we can do about this.
  url.searchParams.get("error") !== null;
  return { hasAuthParams };
};
var useBrowserUrl_default = useBrowserUrl;

// src/contexts/Flow/FlowProvider.tsx
var import_react3 = require("react");

// src/contexts/Flow/FlowContext.ts
var import_react2 = require("react");
var FlowContext = (0, import_react2.createContext)(void 0);
FlowContext.displayName = "FlowContext";
var FlowContext_default = FlowContext;

// src/contexts/Flow/FlowProvider.tsx
var import_jsx_runtime = require("react/jsx-runtime");
var FlowProvider = ({
  children,
  initialStep = null,
  initialTitle = "",
  initialSubtitle,
  onFlowChange
}) => {
  const [currentStep, setCurrentStepState] = (0, import_react3.useState)(initialStep);
  const [title, setTitle] = (0, import_react3.useState)(initialTitle);
  const [subtitle, setSubtitle] = (0, import_react3.useState)(initialSubtitle);
  const [messages, setMessages] = (0, import_react3.useState)([]);
  const [error, setError] = (0, import_react3.useState)(null);
  const [isLoading, setIsLoading] = (0, import_react3.useState)(false);
  const [showBackButton, setShowBackButton] = (0, import_react3.useState)(false);
  const [onGoBack, setOnGoBack] = (0, import_react3.useState)(void 0);
  const setCurrentStep = (0, import_react3.useCallback)(
    (step) => {
      setCurrentStepState(step);
      if (step) {
        setTitle(step.title);
        setSubtitle(step.subtitle);
        setShowBackButton(step.canGoBack ?? false);
      }
      onFlowChange?.(step);
    },
    [onFlowChange]
  );
  const addMessage = (0, import_react3.useCallback)((message) => {
    const messageWithId = {
      ...message,
      id: message.id ?? `msg-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`
    };
    setMessages((prev) => [...prev, messageWithId]);
  }, []);
  const removeMessage = (0, import_react3.useCallback)((messageId) => {
    setMessages((prev) => prev.filter((msg) => msg.id !== messageId));
  }, []);
  const clearMessages = (0, import_react3.useCallback)(() => {
    setMessages([]);
  }, []);
  const reset = (0, import_react3.useCallback)(() => {
    setCurrentStepState(initialStep);
    setTitle(initialTitle);
    setSubtitle(initialSubtitle);
    setMessages([]);
    setError(null);
    setIsLoading(false);
    setShowBackButton(false);
    setOnGoBack(void 0);
  }, [initialStep, initialTitle, initialSubtitle]);
  const navigateToFlow = (0, import_react3.useCallback)(
    (flowType, options) => {
      const stepId = `${flowType}-${Date.now()}`;
      const step = {
        id: stepId,
        type: flowType,
        title: options?.title,
        subtitle: options?.subtitle,
        canGoBack: flowType !== "signin",
        // Usually allow going back except for main signin
        metadata: options?.metadata
      };
      setCurrentStep(step);
      clearMessages();
      setError(null);
    },
    [setCurrentStep, clearMessages]
  );
  const contextValue = (0, import_react3.useMemo)(
    () => ({
      currentStep,
      setCurrentStep,
      title,
      setTitle,
      subtitle,
      setSubtitle,
      messages,
      addMessage,
      removeMessage,
      clearMessages,
      error,
      setError,
      isLoading,
      setIsLoading,
      showBackButton,
      setShowBackButton,
      onGoBack,
      setOnGoBack,
      reset,
      navigateToFlow
    }),
    [
      currentStep,
      setCurrentStep,
      title,
      subtitle,
      messages,
      addMessage,
      removeMessage,
      clearMessages,
      error,
      isLoading,
      showBackButton,
      onGoBack,
      reset,
      navigateToFlow
    ]
  );
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(FlowContext_default.Provider, { value: contextValue, children });
};
var FlowProvider_default = FlowProvider;

// src/contexts/I18n/I18nProvider.tsx
var import_react5 = require("react");
var import_browser8 = require("@asgardeo/browser");
var import_browser9 = require("@asgardeo/browser");

// src/contexts/I18n/I18nContext.ts
var import_react4 = require("react");
var I18nContext = (0, import_react4.createContext)(null);
I18nContext.displayName = "I18nContext";
var I18nContext_default = I18nContext;

// src/contexts/I18n/I18nProvider.tsx
var import_jsx_runtime2 = require("react/jsx-runtime");
var I18N_LANGUAGE_STORAGE_KEY = "asgardeo-i18n-language";
var detectBrowserLanguage = () => {
  if (typeof window !== "undefined" && window.navigator) {
    return window.navigator.language || "en-US";
  }
  return "en-US";
};
var getStoredLanguage = () => {
  if (typeof window !== "undefined" && window.localStorage) {
    try {
      return window.localStorage.getItem(I18N_LANGUAGE_STORAGE_KEY);
    } catch (error) {
      return null;
    }
  }
  return null;
};
var storeLanguage = (language) => {
  if (typeof window !== "undefined" && window.localStorage) {
    try {
      window.localStorage.setItem(I18N_LANGUAGE_STORAGE_KEY, language);
    } catch (error) {
      console.warn("Failed to store language preference:", error);
    }
  }
};
var I18nProvider = ({
  children,
  preferences
}) => {
  const defaultBundles = (0, import_browser9.getI18nBundles)();
  const determineInitialLanguage = () => {
    const configLanguage = preferences?.language;
    const storedLanguage = getStoredLanguage();
    const browserLanguage = detectBrowserLanguage();
    const fallbackLanguage2 = preferences?.fallbackLanguage || "en-US";
    return configLanguage || storedLanguage || browserLanguage || fallbackLanguage2;
  };
  const [currentLanguage, setCurrentLanguage] = (0, import_react5.useState)(determineInitialLanguage);
  const mergedBundles = (0, import_react5.useMemo)(() => {
    const merged = {};
    Object.entries(defaultBundles).forEach(([key, bundle]) => {
      const languageKey = key.replace("_", "-");
      merged[languageKey] = bundle;
    });
    if (preferences?.bundles) {
      Object.entries(preferences.bundles).forEach(([key, userBundle]) => {
        if (merged[key]) {
          merged[key] = {
            ...merged[key],
            translations: (0, import_browser8.deepMerge)(merged[key].translations, userBundle.translations),
            metadata: userBundle.metadata ? { ...merged[key].metadata, ...userBundle.metadata } : merged[key].metadata
          };
        } else {
          merged[key] = userBundle;
        }
      });
    }
    return merged;
  }, [defaultBundles, preferences?.bundles]);
  const fallbackLanguage = preferences?.fallbackLanguage || "en-US";
  (0, import_react5.useEffect)(() => {
    storeLanguage(currentLanguage);
  }, [currentLanguage]);
  const t = (0, import_react5.useCallback)(
    (key, params) => {
      let translation;
      const currentBundle = mergedBundles[currentLanguage];
      if (currentBundle?.translations[key]) {
        translation = currentBundle.translations[key];
      }
      if (!translation && currentLanguage !== fallbackLanguage) {
        const fallbackBundle = mergedBundles[fallbackLanguage];
        if (fallbackBundle?.translations[key]) {
          translation = fallbackBundle.translations[key];
        }
      }
      if (!translation) {
        translation = key;
      }
      if (params && Object.keys(params).length > 0) {
        return Object.entries(params).reduce((acc, [paramKey, paramValue]) => {
          return acc.replace(new RegExp(`\\{${paramKey}\\}`, "g"), String(paramValue));
        }, translation);
      }
      return translation;
    },
    [mergedBundles, currentLanguage, fallbackLanguage]
  );
  const setLanguage = (0, import_react5.useCallback)(
    (language) => {
      if (mergedBundles[language]) {
        setCurrentLanguage(language);
      } else {
        console.warn(
          `Language '${language}' is not available. Available languages: ${Object.keys(mergedBundles).join(", ")}`
        );
      }
    },
    [mergedBundles]
  );
  const contextValue = (0, import_react5.useMemo)(
    () => ({
      currentLanguage,
      fallbackLanguage,
      bundles: mergedBundles,
      setLanguage,
      t
    }),
    [currentLanguage, fallbackLanguage, mergedBundles, setLanguage, t]
  );
  return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(I18nContext_default.Provider, { value: contextValue, children });
};
var I18nProvider_default = I18nProvider;

// src/contexts/Organization/OrganizationProvider.tsx
var import_browser10 = require("@asgardeo/browser");
var import_react7 = require("react");

// src/contexts/Organization/OrganizationContext.ts
var import_react6 = require("react");
var OrganizationContext = (0, import_react6.createContext)({
  createOrganization: () => null,
  currentOrganization: null,
  error: null,
  getAllOrganizations: () => Promise.resolve({
    count: 0,
    organizations: []
  }),
  isLoading: false,
  myOrganizations: null,
  revalidateMyOrganizations: () => Promise.resolve([]),
  switchOrganization: () => Promise.resolve()
});
OrganizationContext.displayName = "OrganizationContext";
var OrganizationContext_default = OrganizationContext;

// src/contexts/Organization/OrganizationProvider.tsx
var import_jsx_runtime3 = require("react/jsx-runtime");
var OrganizationProvider = ({
  children,
  currentOrganization,
  onError,
  myOrganizations,
  onOrganizationSwitch,
  revalidateMyOrganizations,
  getAllOrganizations: getAllOrganizations2,
  createOrganization: createOrganization2
}) => {
  const [isLoading, setIsLoading] = (0, import_react7.useState)(false);
  const [error, setError] = (0, import_react7.useState)(null);
  const switchOrganization = (0, import_react7.useCallback)(
    async (organization) => {
      if (!onOrganizationSwitch) {
        throw new import_browser10.AsgardeoRuntimeError(
          "onOrganizationSwitch callback is required",
          "OrganizationProvider-SwitchError-001",
          "react",
          "The onOrganizationSwitch callback must be provided to handle organization switching."
        );
      }
      setIsLoading(true);
      setError(null);
      try {
        await onOrganizationSwitch(organization);
      } catch (switchError) {
        const errorMessage = switchError instanceof Error ? switchError.message : "Failed to switch organization";
        setError(errorMessage);
        if (onError) {
          onError(errorMessage);
        }
        throw switchError;
      } finally {
        setIsLoading(false);
      }
    },
    [onOrganizationSwitch, onError]
  );
  const contextValue = (0, import_react7.useMemo)(
    () => ({
      createOrganization: createOrganization2,
      currentOrganization,
      error,
      getAllOrganizations: getAllOrganizations2,
      isLoading,
      myOrganizations,
      revalidateMyOrganizations,
      switchOrganization
    }),
    [
      currentOrganization,
      error,
      isLoading,
      myOrganizations,
      switchOrganization,
      revalidateMyOrganizations,
      getAllOrganizations2,
      createOrganization2
    ]
  );
  return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(OrganizationContext_default.Provider, { value: contextValue, children });
};
var OrganizationProvider_default = OrganizationProvider;

// src/contexts/Theme/ThemeProvider.tsx
var import_react11 = require("react");
var import_browser11 = require("@asgardeo/browser");

// src/contexts/Theme/ThemeContext.ts
var import_react8 = require("react");
var ThemeContext = (0, import_react8.createContext)(null);
ThemeContext.displayName = "ThemeContext";
var ThemeContext_default = ThemeContext;

// src/contexts/Branding/useBrandingContext.ts
var import_react10 = require("react");

// src/contexts/Branding/BrandingContext.ts
var import_react9 = require("react");
var BrandingContext = (0, import_react9.createContext)(null);
BrandingContext.displayName = "BrandingContext";
var BrandingContext_default = BrandingContext;

// src/contexts/Branding/useBrandingContext.ts
var useBrandingContext = () => {
  const context = (0, import_react10.useContext)(BrandingContext_default);
  if (!context) {
    throw new Error("useBrandingContext must be used within a BrandingProvider");
  }
  return context;
};
var useBrandingContext_default = useBrandingContext;

// src/contexts/Theme/ThemeProvider.tsx
var import_jsx_runtime4 = require("react/jsx-runtime");
var applyThemeToDOM = (theme) => {
  Object.entries(theme.cssVariables).forEach(([key, value]) => {
    document.documentElement.style.setProperty(key, value);
  });
};
var ThemeProvider = ({
  children,
  theme: themeConfig,
  mode = "system",
  detection = {},
  inheritFromBranding = true
}) => {
  const [colorScheme, setColorScheme] = (0, import_react11.useState)(() => {
    if (mode === "light" || mode === "dark") {
      return mode;
    }
    if (mode === "branding") {
      return (0, import_browser11.detectThemeMode)("system", detection);
    }
    return (0, import_browser11.detectThemeMode)(mode, detection);
  });
  let brandingTheme = null;
  let brandingActiveTheme = null;
  let isBrandingLoading = false;
  let brandingError = null;
  try {
    const brandingContext = useBrandingContext_default();
    brandingTheme = brandingContext.theme;
    brandingActiveTheme = brandingContext.activeTheme;
    isBrandingLoading = brandingContext.isLoading;
    brandingError = brandingContext.error;
  } catch (error) {
    if (inheritFromBranding) {
      console.warn(
        "ThemeProvider: inheritFromBranding is enabled but BrandingProvider is not available. Make sure to wrap your app with BrandingProvider or AsgardeoProvider with branding preferences."
      );
    }
  }
  (0, import_react11.useEffect)(() => {
    if (inheritFromBranding && brandingActiveTheme) {
      if (mode === "branding") {
        setColorScheme(brandingActiveTheme);
      } else if (mode === "system" && !isBrandingLoading) {
        setColorScheme(brandingActiveTheme);
      }
    }
  }, [inheritFromBranding, brandingActiveTheme, mode, isBrandingLoading]);
  const finalThemeConfig = (0, import_react11.useMemo)(() => {
    if (!inheritFromBranding || !brandingTheme) {
      return themeConfig;
    }
    const brandingThemeConfig = {
      colors: brandingTheme.colors,
      borderRadius: brandingTheme.borderRadius,
      shadows: brandingTheme.shadows,
      spacing: brandingTheme.spacing,
      images: brandingTheme.images
    };
    return {
      ...brandingThemeConfig,
      ...themeConfig,
      colors: {
        ...brandingThemeConfig.colors,
        ...themeConfig?.colors
      },
      borderRadius: {
        ...brandingThemeConfig.borderRadius,
        ...themeConfig?.borderRadius
      },
      shadows: {
        ...brandingThemeConfig.shadows,
        ...themeConfig?.shadows
      },
      spacing: {
        ...brandingThemeConfig.spacing,
        ...themeConfig?.spacing
      },
      images: {
        ...brandingThemeConfig.images,
        ...themeConfig?.images
      }
    };
  }, [inheritFromBranding, brandingTheme, themeConfig]);
  const theme = (0, import_react11.useMemo)(() => (0, import_browser11.createTheme)(finalThemeConfig, colorScheme === "dark"), [finalThemeConfig, colorScheme]);
  const handleThemeChange = (0, import_react11.useCallback)((isDark) => {
    setColorScheme(isDark ? "dark" : "light");
  }, []);
  const toggleTheme = (0, import_react11.useCallback)(() => {
    setColorScheme((prev) => prev === "light" ? "dark" : "light");
  }, []);
  (0, import_react11.useEffect)(() => {
    let observer = null;
    let mediaQuery = null;
    if (mode === "branding") {
      return null;
    }
    if (mode === "class") {
      const targetElement = detection.targetElement || document.documentElement;
      if (targetElement) {
        observer = (0, import_browser11.createClassObserver)(targetElement, handleThemeChange, detection);
      }
    } else if (mode === "system") {
      if (!inheritFromBranding || !brandingActiveTheme) {
        mediaQuery = (0, import_browser11.createMediaQueryListener)(handleThemeChange);
      }
    }
    return () => {
      if (observer) {
        observer.disconnect();
      }
      if (mediaQuery) {
        if (mediaQuery.removeEventListener) {
          mediaQuery.removeEventListener("change", handleThemeChange);
        } else {
          mediaQuery.removeListener(handleThemeChange);
        }
      }
    };
  }, [mode, detection, handleThemeChange, inheritFromBranding, brandingActiveTheme]);
  (0, import_react11.useEffect)(() => {
    applyThemeToDOM(theme);
  }, [theme]);
  const value = {
    theme,
    colorScheme,
    toggleTheme,
    isBrandingLoading,
    brandingError,
    inheritFromBranding
  };
  return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(ThemeContext_default.Provider, { value, children });
};
var ThemeProvider_default = ThemeProvider;

// src/contexts/Branding/BrandingProvider.tsx
var import_react12 = require("react");
var import_browser12 = require("@asgardeo/browser");
var import_jsx_runtime5 = require("react/jsx-runtime");
var BrandingProvider = ({
  children,
  brandingPreference: externalBrandingPreference,
  forceTheme,
  enabled = true,
  isLoading: externalIsLoading = false,
  error: externalError = null,
  refetch: externalRefetch
}) => {
  const [theme, setTheme] = (0, import_react12.useState)(null);
  const [activeTheme, setActiveTheme] = (0, import_react12.useState)(null);
  (0, import_react12.useEffect)(() => {
    if (!enabled || !externalBrandingPreference) {
      setTheme(null);
      setActiveTheme(null);
      return;
    }
    const activeThemeFromBranding = externalBrandingPreference?.preference?.theme?.activeTheme;
    let extractedActiveTheme = null;
    if (activeThemeFromBranding) {
      const themeMode = activeThemeFromBranding.toLowerCase();
      if (themeMode === "light" || themeMode === "dark") {
        extractedActiveTheme = themeMode;
      }
    }
    setActiveTheme(extractedActiveTheme);
    const transformedTheme = (0, import_browser12.transformBrandingPreferenceToTheme)(externalBrandingPreference, forceTheme);
    setTheme(transformedTheme);
  }, [externalBrandingPreference, forceTheme, enabled]);
  (0, import_react12.useEffect)(() => {
    if (!enabled) {
      setTheme(null);
      setActiveTheme(null);
    }
  }, [enabled]);
  const fetchBranding = (0, import_react12.useCallback)(async () => {
    if (externalRefetch) {
      await externalRefetch();
    }
  }, [externalRefetch]);
  const value = {
    brandingPreference: externalBrandingPreference || null,
    theme,
    activeTheme,
    isLoading: externalIsLoading,
    error: externalError,
    fetchBranding,
    refetch: externalRefetch || fetchBranding
  };
  return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(BrandingContext_default.Provider, { value, children });
};
var BrandingProvider_default = BrandingProvider;

// src/contexts/User/UserProvider.tsx
var import_react14 = require("react");

// src/contexts/User/UserContext.ts
var import_react13 = require("react");
var UserContext = (0, import_react13.createContext)({
  profile: null,
  schemas: null,
  flattenedProfile: null,
  revalidateProfile: () => null,
  updateProfile: () => null,
  onUpdateProfile: () => null
});
UserContext.displayName = "UserContext";
var UserContext_default = UserContext;

// src/contexts/User/UserProvider.tsx
var import_jsx_runtime6 = require("react/jsx-runtime");
var UserProvider = ({
  children,
  profile,
  revalidateProfile,
  onUpdateProfile,
  updateProfile
}) => {
  const contextValue = (0, import_react14.useMemo)(
    () => ({
      schemas: profile?.schemas,
      profile: profile?.profile,
      flattenedProfile: profile?.flattenedProfile,
      revalidateProfile,
      updateProfile,
      onUpdateProfile
    }),
    [profile, onUpdateProfile, revalidateProfile, updateProfile]
  );
  return /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(UserContext_default.Provider, { value: contextValue, children });
};
var UserProvider_default = UserProvider;

// src/contexts/Asgardeo/AsgardeoProvider.tsx
var import_jsx_runtime7 = require("react/jsx-runtime");
var AsgardeoProvider = ({
  afterSignInUrl = window.location.origin,
  afterSignOutUrl = window.location.origin,
  baseUrl: _baseUrl,
  clientId,
  children,
  scopes,
  preferences,
  signInUrl,
  signUpUrl,
  organizationHandle,
  applicationId,
  ...rest
}) => {
  const reRenderCheckRef = (0, import_react15.useRef)(false);
  const asgardeo = (0, import_react15.useMemo)(() => new AsgardeoReactClient_default(), []);
  const { hasAuthParams } = useBrowserUrl_default();
  const [user, setUser] = (0, import_react15.useState)(null);
  const [currentOrganization, setCurrentOrganization] = (0, import_react15.useState)(null);
  const [isSignedInSync, setIsSignedInSync] = (0, import_react15.useState)(false);
  const [isInitializedSync, setIsInitializedSync] = (0, import_react15.useState)(false);
  const [myOrganizations, setMyOrganizations] = (0, import_react15.useState)([]);
  const [userProfile, setUserProfile] = (0, import_react15.useState)(null);
  const [baseUrl, setBaseUrl] = (0, import_react15.useState)(_baseUrl);
  const [config, setConfig] = (0, import_react15.useState)({
    applicationId,
    organizationHandle,
    afterSignInUrl,
    afterSignOutUrl,
    baseUrl,
    clientId,
    scopes,
    signUpUrl,
    signInUrl,
    ...rest
  });
  const [brandingPreference, setBrandingPreference] = (0, import_react15.useState)(null);
  const [isBrandingLoading, setIsBrandingLoading] = (0, import_react15.useState)(false);
  const [brandingError, setBrandingError] = (0, import_react15.useState)(null);
  const [hasFetchedBranding, setHasFetchedBranding] = (0, import_react15.useState)(false);
  (0, import_react15.useEffect)(() => {
    setBaseUrl(_baseUrl);
    if (_baseUrl !== baseUrl) {
      setHasFetchedBranding(false);
      setBrandingPreference(null);
      setBrandingError(null);
    }
  }, [_baseUrl, baseUrl]);
  (0, import_react15.useEffect)(() => {
    (async () => {
      await asgardeo.initialize(config);
      setConfig(await asgardeo.getConfiguration());
    })();
  }, []);
  (0, import_react15.useEffect)(() => {
    if (reRenderCheckRef.current) {
      return;
    }
    reRenderCheckRef.current = true;
    (async () => {
      if (await asgardeo.isSignedIn()) {
        await updateSession();
        return;
      }
      if (hasAuthParams(new URL(window.location.href), afterSignInUrl)) {
        try {
          await signIn(
            { callOnlyOnRedirect: true }
            // authParams?.authorizationCode,
            // authParams?.sessionState,
            // authParams?.state,
          );
        } catch (error) {
          if (error && Object.prototype.hasOwnProperty.call(error, "code")) {
          }
        }
      }
    })();
  }, []);
  (0, import_react15.useEffect)(() => {
    let interval;
    (async () => {
      try {
        const status = await asgardeo.isSignedIn();
        setIsSignedInSync(status);
        if (!status) {
          interval = setInterval(async () => {
            const newStatus = await asgardeo.isSignedIn();
            if (newStatus) {
              setIsSignedInSync(true);
              clearInterval(interval);
            }
          }, 1e3);
        }
      } catch (error) {
        setIsSignedInSync(false);
      }
    })();
    return () => {
      if (interval) {
        clearInterval(interval);
      }
    };
  }, [asgardeo]);
  (0, import_react15.useEffect)(() => {
    (async () => {
      try {
        const status = await asgardeo.isInitialized();
        setIsInitializedSync(status);
      } catch (error) {
        setIsInitializedSync(false);
      }
    })();
  }, [asgardeo]);
  const updateSession = async () => {
    let _baseUrl2 = baseUrl;
    if ((await asgardeo.getDecodedIdToken())?.["user_org"]) {
      _baseUrl2 = `${(await asgardeo.getConfiguration()).baseUrl}/o`;
      setBaseUrl(_baseUrl2);
    }
    setUser(await asgardeo.getUser({ baseUrl: _baseUrl2 }));
    setUserProfile(await asgardeo.getUserProfile({ baseUrl: _baseUrl2 }));
    setCurrentOrganization(await asgardeo.getCurrentOrganization());
    setMyOrganizations(await asgardeo.getMyOrganizations());
  };
  const fetchBranding = (0, import_react15.useCallback)(async () => {
    if (!baseUrl) {
      return;
    }
    if (isBrandingLoading) {
      return;
    }
    setIsBrandingLoading(true);
    setBrandingError(null);
    try {
      const getBrandingConfig = {
        baseUrl,
        locale: preferences?.i18n?.language
        // Add other branding config options as needed
      };
      const brandingData = await (0, import_browser13.getBrandingPreference)(getBrandingConfig);
      setBrandingPreference(brandingData);
      setHasFetchedBranding(true);
    } catch (err) {
      const errorMessage = err instanceof Error ? err : new Error("Failed to fetch branding preference");
      setBrandingError(errorMessage);
      setBrandingPreference(null);
      setHasFetchedBranding(true);
    } finally {
      setIsBrandingLoading(false);
    }
  }, [baseUrl, preferences?.i18n?.language]);
  const refetchBranding = (0, import_react15.useCallback)(async () => {
    setHasFetchedBranding(false);
    await fetchBranding();
  }, [fetchBranding]);
  (0, import_react15.useEffect)(() => {
    const shouldFetchBranding = preferences?.theme?.inheritFromBranding !== false;
    if (shouldFetchBranding && isInitializedSync && baseUrl && !hasFetchedBranding && !isBrandingLoading) {
      fetchBranding();
    }
  }, [
    preferences?.theme?.inheritFromBranding,
    isInitializedSync,
    baseUrl,
    hasFetchedBranding,
    isBrandingLoading,
    fetchBranding
  ]);
  const signIn = async (...args) => {
    try {
      const response = await asgardeo.signIn(...args);
      if (await asgardeo.isSignedIn()) {
        await updateSession();
      }
      return response;
    } catch (error) {
      throw new Error(`Error while signing in: ${error}`);
    }
  };
  const signUp = async (payload) => {
    try {
      return await asgardeo.signUp(payload);
    } catch (error) {
      throw new import_browser13.AsgardeoRuntimeError(
        `Error while signing up: ${error.message || error}`,
        "asgardeo-signUp-Error",
        "react",
        "An error occurred while trying to sign up."
      );
    }
  };
  const signOut = async (options, afterSignOut) => asgardeo.signOut(options, afterSignOut);
  const switchOrganization = async (organization) => {
    try {
      await asgardeo.switchOrganization(organization);
      if (await asgardeo.isSignedIn()) {
        await updateSession();
      }
    } catch (error) {
      throw new import_browser13.AsgardeoRuntimeError(
        `Failed to switch organization: ${error.message || error}`,
        "asgardeo-switchOrganization-Error",
        "react",
        "An error occurred while switching to the specified organization."
      );
    }
  };
  const isDarkMode = (0, import_react15.useMemo)(() => {
    if (!preferences?.theme?.mode || preferences.theme.mode === "system") {
      return window.matchMedia("(prefers-color-scheme: dark)").matches;
    }
    return preferences.theme.mode === "dark";
  }, [preferences?.theme?.mode]);
  const handleProfileUpdate = (payload) => {
    setUser(payload);
    setUserProfile((prev) => ({
      ...prev,
      profile: payload,
      flattenedProfile: (0, import_browser13.generateFlattenedUserProfile)(payload, prev?.schemas)
    }));
  };
  return /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
    AsgardeoContext_default.Provider,
    {
      value: {
        applicationId,
        organizationHandle: config?.organizationHandle,
        signInUrl,
        signUpUrl,
        afterSignInUrl,
        baseUrl,
        isInitialized: isInitializedSync,
        isLoading: asgardeo.isLoading(),
        isSignedIn: isSignedInSync,
        organization: currentOrganization,
        signIn,
        signOut,
        signUp,
        user
      },
      children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(I18nProvider_default, { preferences: preferences?.i18n, children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
        BrandingProvider_default,
        {
          brandingPreference,
          isLoading: isBrandingLoading,
          error: brandingError,
          enabled: preferences?.theme?.inheritFromBranding !== false,
          refetch: refetchBranding,
          children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
            ThemeProvider_default,
            {
              inheritFromBranding: preferences?.theme?.inheritFromBranding,
              theme: preferences?.theme?.overrides,
              mode: isDarkMode ? "dark" : "light",
              children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(FlowProvider_default, { children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(UserProvider_default, { profile: userProfile, onUpdateProfile: handleProfileUpdate, children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
                OrganizationProvider_default,
                {
                  getAllOrganizations: async () => await asgardeo.getAllOrganizations(),
                  myOrganizations,
                  currentOrganization,
                  onOrganizationSwitch: switchOrganization,
                  revalidateMyOrganizations: async () => await asgardeo.getMyOrganizations(),
                  children
                }
              ) }) })
            }
          )
        }
      ) })
    }
  );
};
var AsgardeoProvider_default = AsgardeoProvider;

// src/contexts/Asgardeo/useAsgardeo.ts
var import_react16 = require("react");
var useAsgardeo = () => {
  const context = (0, import_react16.useContext)(AsgardeoContext_default);
  if (!context) {
    throw new Error("useAsgardeo must be used within an AsgardeoProvider");
  }
  return context;
};
var useAsgardeo_default = useAsgardeo;

// src/contexts/User/useUser.ts
var import_react17 = require("react");
var useUser = () => {
  const context = (0, import_react17.useContext)(UserContext_default);
  if (!context) {
    throw new Error("useUser must be used within a UserProvider");
  }
  return context;
};
var useUser_default = useUser;

// src/contexts/Organization/useOrganization.ts
var import_react18 = require("react");
var useOrganization = () => {
  const context = (0, import_react18.useContext)(OrganizationContext_default);
  if (!context) {
    throw new Error("useOrganization must be used within an OrganizationProvider");
  }
  return context;
};
var useOrganization_default = useOrganization;

// src/contexts/Flow/useFlow.ts
var import_react19 = require("react");
var useFlow = () => {
  const context = (0, import_react19.useContext)(FlowContext_default);
  if (!context) {
    throw new Error("useFlow must be used within a FlowProvider");
  }
  return context;
};
var useFlow_default = useFlow;

// src/contexts/I18n/useI18n.ts
var import_react20 = require("react");
var useI18n = () => {
  const context = (0, import_react20.useContext)(I18nContext_default);
  if (!context) {
    throw new Error(
      "useI18n must be used within an I18nProvider. Make sure your component is wrapped with AsgardeoProvider which includes I18nProvider."
    );
  }
  return context;
};
var useI18n_default = useI18n;

// src/contexts/Theme/useTheme.ts
var import_react21 = require("react");
var useTheme = () => {
  const context = (0, import_react21.useContext)(ThemeContext_default);
  if (!context) {
    throw new Error("useTheme must be used within a ThemeProvider");
  }
  return context;
};
var useTheme_default = useTheme;

// src/hooks/useTranslation.ts
var import_react22 = require("react");
var import_browser14 = require("@asgardeo/browser");
var useTranslation = (componentPreferences) => {
  const context = (0, import_react22.useContext)(I18nContext_default);
  if (!context) {
    throw new Error(
      "useTranslation must be used within an I18nProvider. Make sure your component is wrapped with AsgardeoProvider which includes I18nProvider."
    );
  }
  const { t: globalT, currentLanguage, setLanguage, bundles: globalBundles, fallbackLanguage } = context;
  const mergedBundles = (0, import_react22.useMemo)(() => {
    if (!componentPreferences?.bundles) {
      return globalBundles;
    }
    const merged = {};
    Object.entries(globalBundles).forEach(([key, bundle]) => {
      merged[key] = bundle;
    });
    Object.entries(componentPreferences.bundles).forEach(([key, componentBundle]) => {
      if (merged[key]) {
        merged[key] = {
          ...merged[key],
          translations: (0, import_browser14.deepMerge)(merged[key].translations, componentBundle.translations),
          metadata: componentBundle.metadata ? { ...merged[key].metadata, ...componentBundle.metadata } : merged[key].metadata
        };
      } else {
        merged[key] = componentBundle;
      }
    });
    return merged;
  }, [globalBundles, componentPreferences?.bundles]);
  const enhancedT = (0, import_react22.useMemo)(() => {
    if (!componentPreferences?.bundles) {
      return globalT;
    }
    return (key, params) => {
      let translation;
      const currentBundle = mergedBundles[currentLanguage];
      if (currentBundle?.translations[key]) {
        translation = currentBundle.translations[key];
      }
      if (!translation && currentLanguage !== fallbackLanguage) {
        const fallbackBundle = mergedBundles[fallbackLanguage];
        if (fallbackBundle?.translations[key]) {
          translation = fallbackBundle.translations[key];
        }
      }
      if (!translation) {
        translation = key;
      }
      if (params && Object.keys(params).length > 0) {
        return Object.entries(params).reduce((acc, [paramKey, paramValue]) => {
          return acc.replace(new RegExp(`\\{${paramKey}\\}`, "g"), String(paramValue));
        }, translation);
      }
      return translation;
    };
  }, [mergedBundles, currentLanguage, fallbackLanguage, globalT, componentPreferences?.bundles]);
  return {
    t: enhancedT,
    currentLanguage,
    setLanguage,
    availableLanguages: Object.keys(mergedBundles)
  };
};
var useTranslation_default = useTranslation;

// src/hooks/useForm.ts
var import_react23 = require("react");
var useForm = (config = {}) => {
  const {
    initialValues = {},
    fields = [],
    validator,
    validateOnChange = false,
    validateOnBlur = true,
    requiredMessage = "This field is required"
  } = config;
  const [values, setFormValues] = (0, import_react23.useState)({ ...initialValues });
  const [touched, setFormTouched] = (0, import_react23.useState)({});
  const [errors, setFormErrors] = (0, import_react23.useState)({});
  const [isSubmitted, setIsSubmitted] = (0, import_react23.useState)(false);
  const getFieldConfig = (0, import_react23.useCallback)(
    (name) => fields.find((field) => field.name === name),
    [fields]
  );
  const validateField = (0, import_react23.useCallback)(
    (name) => {
      const value = values[name] || "";
      const fieldConfig = getFieldConfig(name);
      if (fieldConfig?.required && (!value || value.trim() === "")) {
        return requiredMessage;
      }
      if (fieldConfig?.validator) {
        const fieldError = fieldConfig.validator(value);
        if (fieldError) return fieldError;
      }
      return null;
    },
    [values, getFieldConfig, requiredMessage]
  );
  const validateForm = (0, import_react23.useCallback)(() => {
    const newErrors = {};
    fields.forEach((field) => {
      const error = validateField(field.name);
      if (error) {
        newErrors[field.name] = error;
      }
    });
    if (validator) {
      const globalErrors = validator(values);
      Object.keys(globalErrors).forEach((key) => {
        if (globalErrors[key]) {
          newErrors[key] = globalErrors[key];
        }
      });
    }
    return {
      isValid: Object.keys(newErrors).length === 0,
      errors: newErrors
    };
  }, [fields, validateField, validator, values]);
  const isValid = Object.keys(errors).length === 0;
  const setValue = (0, import_react23.useCallback)(
    (name, value) => {
      setFormValues((prev) => ({
        ...prev,
        [name]: value
      }));
      if (validateOnChange) {
        const error = validateField(name);
        setFormErrors((prev) => {
          const newErrors = { ...prev };
          if (error) {
            newErrors[name] = error;
          } else {
            delete newErrors[name];
          }
          return newErrors;
        });
      }
    },
    [validateField, validateOnChange]
  );
  const setValues = (0, import_react23.useCallback)((newValues) => {
    setFormValues((prev) => ({
      ...prev,
      ...newValues
    }));
  }, []);
  const setTouched = (0, import_react23.useCallback)(
    (name, isTouched = true) => {
      setFormTouched((prev) => ({
        ...prev,
        [name]: isTouched
      }));
      if (validateOnBlur && isTouched) {
        const error = validateField(name);
        setFormErrors((prev) => {
          const newErrors = { ...prev };
          if (error) {
            newErrors[name] = error;
          } else {
            delete newErrors[name];
          }
          return newErrors;
        });
      }
    },
    [validateField, validateOnBlur]
  );
  const setTouchedFields = (0, import_react23.useCallback)((touchedFields) => {
    setFormTouched((prev) => ({
      ...prev,
      ...touchedFields
    }));
  }, []);
  const touchAllFields = (0, import_react23.useCallback)(() => {
    const allTouched = fields.reduce((acc, field) => {
      acc[field.name] = true;
      return acc;
    }, {});
    setFormTouched(allTouched);
    const validation = validateForm();
    setFormErrors(validation.errors);
  }, [fields, validateForm]);
  const setError = (0, import_react23.useCallback)((name, error) => {
    setFormErrors((prev) => ({
      ...prev,
      [name]: error
    }));
  }, []);
  const setErrors = (0, import_react23.useCallback)((newErrors) => {
    setFormErrors((prev) => ({
      ...prev,
      ...newErrors
    }));
  }, []);
  const clearErrors = (0, import_react23.useCallback)(() => {
    setFormErrors({});
  }, []);
  const reset = (0, import_react23.useCallback)(() => {
    setFormValues({ ...initialValues });
    setFormTouched({});
    setFormErrors({});
    setIsSubmitted(false);
  }, [initialValues]);
  const handleSubmit = (0, import_react23.useCallback)(
    (onSubmit) => async (e) => {
      if (e) {
        e.preventDefault();
      }
      setIsSubmitted(true);
      touchAllFields();
      const validation = validateForm();
      if (validation.isValid) {
        await onSubmit(values);
      }
    },
    [values, touchAllFields, validateForm]
  );
  const getFieldProps = (0, import_react23.useCallback)(
    (name) => {
      const fieldConfig = getFieldConfig(name);
      return {
        error: touched[name] ? errors[name] : void 0,
        name,
        onBlur: () => setTouched(name, true),
        onChange: (value) => setValue(name, value),
        required: fieldConfig?.required || false,
        touched: touched[name] || false,
        value: values[name] || ""
      };
    },
    [values, errors, touched, setValue, setTouched, getFieldConfig]
  );
  return {
    clearErrors,
    errors,
    getFieldProps,
    handleSubmit,
    isSubmitted,
    isValid,
    reset,
    setError,
    setErrors,
    setTouched,
    setTouchedFields,
    setValue,
    setValues,
    touchAllFields,
    touched,
    validateField,
    validateForm,
    values
  };
};
var useForm_default = useForm;

// src/hooks/useBranding.ts
var useBranding = (config = {}) => {
  try {
    return useBrandingContext_default();
  } catch (error) {
    console.warn(
      "useBranding: BrandingProvider not available. Make sure to wrap your app with BrandingProvider or AsgardeoProvider with branding preferences."
    );
    return {
      brandingPreference: null,
      theme: null,
      activeTheme: null,
      isLoading: false,
      error: new Error("BrandingProvider not available"),
      fetchBranding: async () => {
      },
      refetch: async () => {
      }
    };
  }
};
var useBranding_default = useBranding;

// src/components/actions/SignInButton/BaseSignInButton.tsx
var import_browser17 = require("@asgardeo/browser");
var import_clsx3 = __toESM(require("clsx"), 1);
var import_react25 = require("react");

// src/components/primitives/Button/Button.tsx
var import_react24 = require("react");
var import_browser16 = require("@asgardeo/browser");
var import_clsx2 = __toESM(require("clsx"), 1);

// src/components/primitives/Spinner/Spinner.tsx
var import_browser15 = require("@asgardeo/browser");
var import_clsx = require("clsx");
var import_jsx_runtime8 = require("react/jsx-runtime");
var Spinner = ({ size = "medium", color, className, style }) => {
  const { theme } = useTheme_default();
  const spinnerSize = {
    small: "16px",
    medium: "20px",
    large: "32px"
  }[size];
  const spinnerColor = color || theme.vars.colors.primary.main;
  const spinnerStyle = {
    width: spinnerSize,
    height: spinnerSize,
    border: "2px solid transparent",
    borderTop: `2px solid ${spinnerColor}`,
    borderRadius: "50%",
    animation: "asgardeo-spinner-spin 1s linear infinite",
    ...style
  };
  return /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)(import_jsx_runtime8.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("style", { children: `
          @keyframes asgardeo-spinner-spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
          }
        ` }),
    /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(
      "span",
      {
        className: (0, import_clsx.clsx)((0, import_browser15.withVendorCSSClassPrefix)("spinner"), className),
        style: spinnerStyle,
        role: "status",
        "aria-label": "Loading"
      }
    )
  ] });
};
var Spinner_default = Spinner;

// src/components/primitives/Button/Button.tsx
var import_jsx_runtime9 = require("react/jsx-runtime");
var useButtonStyles = (color, variant, size, fullWidth, disabled, loading) => {
  const { theme } = useTheme_default();
  return (0, import_react24.useMemo)(() => {
    const sizeConfig = {
      small: {
        padding: `calc(${theme.vars.spacing.unit} * 0.5) calc(${theme.vars.spacing.unit} * 1)`,
        fontSize: theme.vars.typography.fontSizes.sm,
        minHeight: `calc(${theme.vars.spacing.unit} * 3)`
      },
      medium: {
        padding: `calc(${theme.vars.spacing.unit} * 1) calc(${theme.vars.spacing.unit} * 2)`,
        fontSize: theme.vars.typography.fontSizes.md,
        minHeight: `calc(${theme.vars.spacing.unit} * 4)`
      },
      large: {
        padding: `calc(${theme.vars.spacing.unit} * 1.5) calc(${theme.vars.spacing.unit} * 3)`,
        fontSize: theme.vars.typography.fontSizes.lg,
        minHeight: `calc(${theme.vars.spacing.unit} * 5)`
      }
    };
    const getColorConfig = () => {
      switch (color) {
        case "primary":
          switch (variant) {
            case "solid":
              return {
                backgroundColor: theme.vars.colors.primary.main,
                color: theme.vars.colors.primary.contrastText,
                border: `1px solid ${theme.vars.colors.primary.main}`,
                "&:hover": {
                  backgroundColor: theme.vars.colors.primary.main,
                  opacity: 0.9
                },
                "&:active": {
                  backgroundColor: theme.vars.colors.primary.main,
                  opacity: 0.8
                }
              };
            case "outline":
              return {
                backgroundColor: "transparent",
                color: theme.vars.colors.primary.main,
                border: `1px solid ${theme.vars.colors.primary.main}`,
                "&:hover": {
                  backgroundColor: theme.vars.colors.primary.main,
                  color: theme.vars.colors.primary.contrastText
                },
                "&:active": {
                  backgroundColor: theme.vars.colors.primary.main,
                  color: theme.vars.colors.primary.contrastText,
                  opacity: 0.9
                }
              };
            case "text":
              return {
                backgroundColor: "transparent",
                color: theme.vars.colors.primary.main,
                border: "1px solid transparent",
                "&:hover": {
                  backgroundColor: theme.vars.colors.action.hover
                },
                "&:active": {
                  backgroundColor: theme.vars.colors.action.selected
                }
              };
          }
          break;
        case "secondary":
          switch (variant) {
            case "solid":
              return {
                backgroundColor: theme.vars.colors.secondary.main,
                color: theme.vars.colors.secondary.contrastText,
                border: `1px solid ${theme.vars.colors.secondary.main}`,
                "&:hover": {
                  backgroundColor: theme.vars.colors.secondary.main,
                  opacity: 0.9
                },
                "&:active": {
                  backgroundColor: theme.vars.colors.secondary.main,
                  opacity: 0.8
                }
              };
            case "outline":
              return {
                backgroundColor: "transparent",
                color: theme.vars.colors.secondary.main,
                border: `1px solid ${theme.vars.colors.secondary.main}`,
                "&:hover": {
                  backgroundColor: theme.vars.colors.secondary.main,
                  color: theme.vars.colors.secondary.contrastText
                },
                "&:active": {
                  backgroundColor: theme.vars.colors.secondary.main,
                  color: theme.vars.colors.secondary.contrastText,
                  opacity: 0.9
                }
              };
            case "text":
              return {
                backgroundColor: "transparent",
                color: theme.vars.colors.secondary.main,
                border: "1px solid transparent",
                "&:hover": {
                  backgroundColor: theme.vars.colors.action.hover
                },
                "&:active": {
                  backgroundColor: theme.vars.colors.action.selected
                }
              };
          }
          break;
        case "tertiary":
          switch (variant) {
            case "solid":
              return {
                backgroundColor: theme.vars.colors.text.secondary,
                color: theme.vars.colors.background.surface,
                border: `1px solid ${theme.vars.colors.text.secondary}`,
                "&:hover": {
                  backgroundColor: theme.vars.colors.text.primary,
                  color: theme.vars.colors.background.surface
                },
                "&:active": {
                  backgroundColor: theme.vars.colors.text.primary,
                  color: theme.vars.colors.background.surface,
                  opacity: 0.9
                }
              };
            case "outline":
              return {
                backgroundColor: "transparent",
                color: theme.vars.colors.text.secondary,
                border: `1px solid ${theme.vars.colors.border}`,
                "&:hover": {
                  backgroundColor: theme.vars.colors.action.hover,
                  borderColor: theme.vars.colors.text.secondary
                },
                "&:active": {
                  backgroundColor: theme.vars.colors.action.selected,
                  borderColor: theme.vars.colors.text.primary
                }
              };
            case "text":
              return {
                backgroundColor: "transparent",
                color: theme.vars.colors.text.secondary,
                border: "1px solid transparent",
                "&:hover": {
                  backgroundColor: theme.vars.colors.action.hover,
                  color: theme.vars.colors.text.primary
                },
                "&:active": {
                  backgroundColor: theme.vars.colors.action.selected,
                  color: theme.vars.colors.text.primary
                }
              };
          }
          break;
        default:
          return {};
      }
    };
    const baseStyle = {
      display: "inline-flex",
      alignItems: "center",
      justifyContent: "center",
      gap: `calc(${theme.vars.spacing.unit} * 1)`,
      borderRadius: theme.vars.borderRadius.medium,
      fontWeight: 500,
      cursor: disabled || loading ? "not-allowed" : "pointer",
      transition: "all 0.2s ease-in-out",
      outline: "none",
      textDecoration: "none",
      whiteSpace: "nowrap",
      width: fullWidth ? "100%" : "auto",
      opacity: disabled || loading ? 0.6 : 1,
      ...sizeConfig[size],
      ...getColorConfig()
    };
    return baseStyle;
  }, [theme, color, variant, size, fullWidth, disabled, loading]);
};
var Button = (0, import_react24.forwardRef)(
  ({
    color = "primary",
    variant = "solid",
    size = "medium",
    fullWidth = false,
    loading = false,
    startIcon,
    endIcon,
    children,
    className,
    disabled,
    style,
    ...rest
  }, ref) => {
    const { theme } = useTheme_default();
    const buttonStyle = useButtonStyles(color, variant, size, fullWidth, disabled || false, loading);
    return /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)(
      "button",
      {
        ref,
        style: { ...buttonStyle, ...style },
        className: (0, import_clsx2.default)(
          (0, import_browser16.withVendorCSSClassPrefix)("button"),
          (0, import_browser16.withVendorCSSClassPrefix)(`button-${color}`),
          (0, import_browser16.withVendorCSSClassPrefix)(`button-${variant}`),
          (0, import_browser16.withVendorCSSClassPrefix)(`button-${size}`),
          {
            [(0, import_browser16.withVendorCSSClassPrefix)("button-full-width")]: fullWidth,
            [(0, import_browser16.withVendorCSSClassPrefix)("button-loading")]: loading
          },
          className
        ),
        disabled: disabled || loading,
        ...rest,
        children: [
          loading && /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(
            Spinner_default,
            {
              size,
              color: "currentColor",
              style: {
                width: size === "small" ? `calc(${theme.vars.spacing.unit} * 1.5)` : size === "medium" ? `calc(${theme.vars.spacing.unit} * 2)` : `calc(${theme.vars.spacing.unit} * 2.5)`,
                height: size === "small" ? `calc(${theme.vars.spacing.unit} * 1.5)` : size === "medium" ? `calc(${theme.vars.spacing.unit} * 2)` : `calc(${theme.vars.spacing.unit} * 2.5)`
              }
            }
          ),
          !loading && startIcon && /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("span", { children: startIcon }),
          children && /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(import_jsx_runtime9.Fragment, { children }),
          !loading && endIcon && /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("span", { children: endIcon })
        ]
      }
    );
  }
);
Button.displayName = "Button";
var Button_default = Button;

// src/components/actions/SignInButton/BaseSignInButton.tsx
var import_jsx_runtime10 = require("react/jsx-runtime");
var BaseSignInButton = (0, import_react25.forwardRef)(
  ({ children, className, style, signIn, isLoading, preferences, ...rest }, ref) => {
    if (typeof children === "function") {
      return /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(import_jsx_runtime10.Fragment, { children: children({ isLoading, signIn }) });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
      Button_default,
      {
        ref,
        className: (0, import_clsx3.default)((0, import_browser17.withVendorCSSClassPrefix)("sign-in-button"), className),
        style,
        disabled: isLoading,
        loading: isLoading,
        type: "button",
        ...rest,
        children
      }
    );
  }
);
BaseSignInButton.displayName = "BaseSignInButton";
var BaseSignInButton_default = BaseSignInButton;

// src/components/actions/SignInButton/SignInButton.tsx
var import_browser18 = require("@asgardeo/browser");
var import_react26 = require("react");
var import_jsx_runtime11 = require("react/jsx-runtime");
var SignInButton = (0, import_react26.forwardRef)(({ children, onClick, preferences, ...rest }, ref) => {
  const { signIn, signInUrl } = useAsgardeo_default();
  const { t } = useTranslation_default(preferences?.i18n);
  const [isLoading, setIsLoading] = (0, import_react26.useState)(false);
  const handleSignIn = async (e) => {
    try {
      setIsLoading(true);
      if (signInUrl) {
        window.history.pushState(null, "", signInUrl);
        window.dispatchEvent(new PopStateEvent("popstate", { state: null }));
      } else {
        await signIn();
      }
      if (onClick) {
        onClick(e);
      }
    } catch (error) {
      throw new import_browser18.AsgardeoRuntimeError(
        `Sign in failed: ${error instanceof Error ? error.message : String(error)}`,
        "SignInButton-handleSignIn-RuntimeError-001",
        "react",
        "Something went wrong while trying to sign in. Please try again later."
      );
    } finally {
      setIsLoading(false);
    }
  };
  return /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(
    BaseSignInButton_default,
    {
      ref,
      onClick: handleSignIn,
      isLoading,
      signIn: handleSignIn,
      preferences,
      ...rest,
      children: children ?? t("elements.buttons.signIn")
    }
  );
});
SignInButton.displayName = "SignInButton";
var SignInButton_default = SignInButton;

// src/components/actions/SignOutButton/BaseSignOutButton.tsx
var import_browser19 = require("@asgardeo/browser");
var import_clsx4 = __toESM(require("clsx"), 1);
var import_react27 = require("react");
var import_jsx_runtime12 = require("react/jsx-runtime");
var BaseSignOutButton = (0, import_react27.forwardRef)(
  ({ children, className, style, signOut, isLoading, preferences, ...rest }, ref) => {
    if (typeof children === "function") {
      return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_jsx_runtime12.Fragment, { children: children({ isLoading, signOut }) });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
      Button_default,
      {
        ref,
        className: (0, import_clsx4.default)((0, import_browser19.withVendorCSSClassPrefix)("sign-out-button"), className),
        style,
        disabled: isLoading,
        loading: isLoading,
        type: "button",
        color: "secondary",
        variant: "outline",
        ...rest,
        children
      }
    );
  }
);
BaseSignOutButton.displayName = "BaseSignOutButton";
var BaseSignOutButton_default = BaseSignOutButton;

// src/components/actions/SignOutButton/SignOutButton.tsx
var import_browser20 = require("@asgardeo/browser");
var import_react28 = require("react");
var import_jsx_runtime13 = require("react/jsx-runtime");
var SignOutButton = (0, import_react28.forwardRef)(({ children, onClick, preferences, ...rest }, ref) => {
  const { signOut } = useAsgardeo_default();
  const { t } = useTranslation_default(preferences?.i18n);
  const [isLoading, setIsLoading] = (0, import_react28.useState)(false);
  const handleSignOut = async (e) => {
    try {
      setIsLoading(true);
      await signOut();
      if (onClick) {
        onClick(e);
      }
    } catch (error) {
      throw new import_browser20.AsgardeoRuntimeError(
        `Sign out failed: ${error instanceof Error ? error.message : String(error)}`,
        "SignOutButton-handleSignOut-RuntimeError-001",
        "react",
        "Something went wrong while trying to sign out. Please try again later."
      );
    } finally {
      setIsLoading(false);
    }
  };
  return /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(
    BaseSignOutButton_default,
    {
      ref,
      onClick: handleSignOut,
      isLoading,
      signOut: handleSignOut,
      preferences,
      ...rest,
      children: children ?? t("elements.buttons.signOut")
    }
  );
});
SignOutButton.displayName = "SignOutButton";
var SignOutButton_default = SignOutButton;

// src/components/actions/SignUpButton/BaseSignUpButton.tsx
var import_browser21 = require("@asgardeo/browser");
var import_clsx5 = __toESM(require("clsx"), 1);
var import_react29 = require("react");
var import_jsx_runtime14 = require("react/jsx-runtime");
var BaseSignUpButton = (0, import_react29.forwardRef)(
  ({ children, className, style, signUp, isLoading, preferences, ...rest }, ref) => {
    if (typeof children === "function") {
      return /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(import_jsx_runtime14.Fragment, { children: children({ isLoading, signUp }) });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(
      Button_default,
      {
        ref,
        className: (0, import_clsx5.default)((0, import_browser21.withVendorCSSClassPrefix)("sign-up-button"), className),
        style,
        disabled: isLoading,
        loading: isLoading,
        type: "button",
        color: "primary",
        variant: "outline",
        ...rest,
        children
      }
    );
  }
);
BaseSignUpButton.displayName = "BaseSignUpButton";
var BaseSignUpButton_default = BaseSignUpButton;

// src/components/actions/SignUpButton/SignUpButton.tsx
var import_browser22 = require("@asgardeo/browser");
var import_react30 = require("react");
var import_jsx_runtime15 = require("react/jsx-runtime");
var SignUpButton = (0, import_react30.forwardRef)(({ children, onClick, preferences, ...rest }, ref) => {
  const { signUp, signUpUrl } = useAsgardeo_default();
  const { t } = useTranslation_default(preferences?.i18n);
  const [isLoading, setIsLoading] = (0, import_react30.useState)(false);
  const handleSignUp = async (e) => {
    try {
      setIsLoading(true);
      if (signUpUrl) {
        window.history.pushState(null, "", signUpUrl);
        window.dispatchEvent(new PopStateEvent("popstate", { state: null }));
      } else {
        await signUp();
      }
      if (onClick) {
        onClick(e);
      }
    } catch (error) {
      throw new import_browser22.AsgardeoRuntimeError(
        `Sign up failed: ${error instanceof Error ? error.message : String(error)}`,
        "SignUpButton-handleSignUp-RuntimeError-001",
        "react",
        "Something went wrong while trying to sign up. Please try again later."
      );
    } finally {
      setIsLoading(false);
    }
  };
  return /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(
    BaseSignUpButton_default,
    {
      ref,
      onClick: handleSignUp,
      isLoading,
      signUp: handleSignUp,
      preferences,
      ...rest,
      children: children ?? t("elements.buttons.signUp")
    }
  );
});
SignUpButton.displayName = "SignUpButton";
var SignUpButton_default = SignUpButton;

// src/components/control/SignedIn.tsx
var import_jsx_runtime16 = require("react/jsx-runtime");
var SignedIn = ({
  children,
  fallback = null
}) => {
  const { isSignedIn } = useAsgardeo_default();
  if (!isSignedIn) {
    return /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(import_jsx_runtime16.Fragment, { children: fallback });
  }
  return /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(import_jsx_runtime16.Fragment, { children });
};
SignedIn.displayName = "SignedIn";
var SignedIn_default = SignedIn;

// src/components/control/SignedOut.tsx
var import_jsx_runtime17 = require("react/jsx-runtime");
var SignedOut = ({
  children,
  fallback = null
}) => {
  const { isSignedIn } = useAsgardeo_default();
  if (!isSignedIn) {
    return /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(import_jsx_runtime17.Fragment, { children });
  }
  return /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(import_jsx_runtime17.Fragment, { children: fallback });
};
SignedOut.displayName = "SignedOut";
var SignedOut_default = SignedOut;

// src/components/control/AsgardeoLoading.tsx
var import_jsx_runtime18 = require("react/jsx-runtime");
var AsgardeoLoading = ({
  children,
  fallback = null
}) => {
  const { isLoading } = useAsgardeo_default();
  if (!isLoading) {
    return /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(import_jsx_runtime18.Fragment, { children: fallback });
  }
  return /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(import_jsx_runtime18.Fragment, { children });
};
AsgardeoLoading.displayName = "AsgardeoLoading";
var AsgardeoLoading_default = AsgardeoLoading;

// src/components/presentation/SignIn/BaseSignIn.tsx
var import_browser41 = require("@asgardeo/browser");
var import_clsx16 = require("clsx");
var import_react41 = require("react");

// src/components/presentation/SignIn/options/SignInOptionFactory.tsx
var import_browser36 = require("@asgardeo/browser");

// src/components/presentation/SignIn/options/UsernamePassword.tsx
var import_browser30 = require("@asgardeo/browser");
var import_react33 = require("react");

// src/components/primitives/TextField/TextField.tsx
var import_clsx7 = __toESM(require("clsx"), 1);

// src/components/primitives/Typography/Typography.tsx
var import_clsx6 = __toESM(require("clsx"), 1);
var import_browser23 = require("@asgardeo/browser");
var import_jsx_runtime19 = require("react/jsx-runtime");
var variantMapping = {
  h1: "h1",
  h2: "h2",
  h3: "h3",
  h4: "h4",
  h5: "h5",
  h6: "h6",
  subtitle1: "h6",
  subtitle2: "h6",
  body1: "p",
  body2: "p",
  caption: "span",
  overline: "span",
  button: "span"
};
var Typography = ({
  children,
  variant = "body1",
  component,
  align = "left",
  color = "textPrimary",
  noWrap = false,
  className,
  style = {},
  inline = false,
  fontWeight,
  fontSize,
  lineHeight,
  gutterBottom = false,
  ...rest
}) => {
  const { theme } = useTheme_default();
  const Component = component || variantMapping[variant] || "span";
  const getColorValue = (colorVariant) => {
    switch (colorVariant) {
      case "primary":
        return theme.colors.primary.main;
      case "secondary":
        return theme.colors.secondary.main;
      case "error":
        return theme.colors.error.main;
      case "textPrimary":
        return theme.colors.text.primary;
      case "textSecondary":
        return theme.colors.text.secondary;
      case "inherit":
        return "inherit";
      default:
        return theme.colors.text.primary;
    }
  };
  const getVariantStyles = (variantName) => {
    const baseUnit = theme.spacing.unit;
    switch (variantName) {
      case "h1":
        return {
          fontSize: theme.vars.typography.fontSizes["3xl"],
          // 34px
          fontWeight: 600,
          lineHeight: 1.235,
          letterSpacing: "-0.00735em"
        };
      case "h2":
        return {
          fontSize: theme.vars.typography.fontSizes["2xl"],
          // 24px
          fontWeight: 600,
          lineHeight: 1.334,
          letterSpacing: "0em"
        };
      case "h3":
        return {
          fontSize: theme.vars.typography.fontSizes.xl,
          // 20px
          fontWeight: 600,
          lineHeight: 1.6,
          letterSpacing: "0.0075em"
        };
      case "h4":
        return {
          fontSize: theme.vars.typography.fontSizes.lg,
          // 18px
          fontWeight: 600,
          lineHeight: 1.5,
          letterSpacing: "0.00938em"
        };
      case "h5":
        return {
          fontSize: theme.vars.typography.fontSizes.md,
          // 16px
          fontWeight: 600,
          lineHeight: 1.334,
          letterSpacing: "0em"
        };
      case "h6":
        return {
          fontSize: theme.vars.typography.fontSizes.sm,
          // 14px
          fontWeight: 500,
          lineHeight: 1.6,
          letterSpacing: "0.0075em"
        };
      case "subtitle1":
        return {
          fontSize: theme.vars.typography.fontSizes.md,
          // 16px
          fontWeight: 400,
          lineHeight: 1.75,
          letterSpacing: "0.00938em"
        };
      case "subtitle2":
        return {
          fontSize: theme.vars.typography.fontSizes.sm,
          // 14px
          fontWeight: 500,
          lineHeight: 1.57,
          letterSpacing: "0.00714em"
        };
      case "body1":
        return {
          fontSize: theme.vars.typography.fontSizes.md,
          // 16px
          fontWeight: 400,
          lineHeight: 1.5,
          letterSpacing: "0.00938em"
        };
      case "body2":
        return {
          fontSize: theme.vars.typography.fontSizes.sm,
          // 14px
          fontWeight: 400,
          lineHeight: 1.43,
          letterSpacing: "0.01071em"
        };
      case "caption":
        return {
          fontSize: theme.vars.typography.fontSizes.xs,
          // 12px
          fontWeight: 400,
          lineHeight: 1.66,
          letterSpacing: "0.03333em"
        };
      case "overline":
        return {
          fontSize: theme.vars.typography.fontSizes.xs,
          // 12px
          fontWeight: 400,
          lineHeight: 2.66,
          letterSpacing: "0.08333em",
          textTransform: "uppercase"
        };
      case "button":
        return {
          fontSize: theme.vars.typography.fontSizes.sm,
          // 14px
          fontWeight: 500,
          lineHeight: 1.75,
          letterSpacing: "0.02857em",
          textTransform: "uppercase"
        };
      default:
        return {};
    }
  };
  const variantStyles = getVariantStyles(variant);
  const typographyStyle = {
    margin: 0,
    color: getColorValue(color),
    textAlign: align,
    display: inline ? "inline" : variantMapping[variant] === "span" ? "inline" : "block",
    ...variantStyles,
    // Custom overrides
    ...fontWeight && { fontWeight },
    ...fontSize && { fontSize: typeof fontSize === "number" ? `${fontSize}px` : fontSize },
    ...lineHeight && { lineHeight },
    ...noWrap && {
      overflow: "hidden",
      textOverflow: "ellipsis",
      whiteSpace: "nowrap"
    },
    ...gutterBottom && {
      marginBottom: theme.spacing.unit + "px"
    },
    ...style
  };
  return /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
    Component,
    {
      className: (0, import_clsx6.default)(
        (0, import_browser23.withVendorCSSClassPrefix)("typography"),
        (0, import_browser23.withVendorCSSClassPrefix)(`typography-${variant}`),
        {
          [(0, import_browser23.withVendorCSSClassPrefix)("typography-noWrap")]: noWrap,
          [(0, import_browser23.withVendorCSSClassPrefix)("typography-inline")]: inline,
          [(0, import_browser23.withVendorCSSClassPrefix)("typography-gutterBottom")]: gutterBottom
        },
        className
      ),
      style: typographyStyle,
      ...rest,
      children
    }
  );
};
var Typography_default = Typography;

// src/components/primitives/FormControl/FormControl.tsx
var import_jsx_runtime20 = require("react/jsx-runtime");
var FormControl = ({
  children,
  error,
  helperText,
  className,
  style = {},
  helperTextAlign = "left",
  helperTextMarginLeft
}) => {
  const { theme } = useTheme_default();
  const containerStyle = {
    textAlign: "left",
    marginBottom: `calc(${theme.vars.spacing.unit} * 2)`,
    ...style
  };
  const helperTextStyle = {
    marginTop: `calc(${theme.vars.spacing.unit} / 2)`,
    textAlign: helperTextAlign,
    ...helperTextMarginLeft && { marginLeft: helperTextMarginLeft }
  };
  return /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { style: containerStyle, className, children: [
    children,
    (error || helperText) && /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(Typography_default, { variant: "caption", color: error ? "error" : "textSecondary", style: helperTextStyle, children: error || helperText })
  ] });
};
var FormControl_default = FormControl;

// src/components/primitives/InputLabel/InputLabel.tsx
var import_jsx_runtime21 = require("react/jsx-runtime");
var InputLabel = ({
  children,
  required,
  error,
  style = {},
  variant = "block",
  marginBottom,
  ...rest
}) => {
  const { theme } = useTheme_default();
  const labelStyle = {
    display: variant,
    marginBottom: marginBottom || (variant === "block" ? `calc(${theme.vars.spacing.unit} + 1px)` : "0"),
    color: error ? theme.vars.colors.error.main : theme.vars.colors.text.secondary,
    fontSize: theme.vars.typography.fontSizes.sm,
    fontWeight: variant === "block" ? 500 : "normal",
    ...style
  };
  return /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("label", { style: labelStyle, ...rest, children: [
    children,
    required && /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("span", { style: { color: theme.vars.colors.error.main }, children: " *" })
  ] });
};
var InputLabel_default = InputLabel;

// src/components/primitives/TextField/TextField.tsx
var import_browser24 = require("@asgardeo/browser");
var import_jsx_runtime22 = require("react/jsx-runtime");
var TextField = ({
  label,
  error,
  required,
  className,
  disabled,
  helperText,
  startIcon,
  endIcon,
  onStartIconClick,
  onEndIconClick,
  type = "text",
  style = {},
  ...rest
}) => {
  const { theme } = useTheme_default();
  const hasStartIcon = !!startIcon;
  const hasEndIcon = !!endIcon;
  const leftPadding = hasStartIcon ? theme.spacing.unit * 5 : theme.spacing.unit * 1.5;
  const rightPadding = hasEndIcon ? theme.spacing.unit * 5 : theme.spacing.unit * 1.5;
  const inputStyle = {
    width: "100%",
    padding: `${theme.spacing.unit}px ${rightPadding}px ${theme.spacing.unit}px ${leftPadding}px`,
    border: `1px solid ${error ? theme.colors.error.main : theme.colors.border}`,
    borderRadius: theme.borderRadius.medium,
    fontSize: "1rem",
    color: theme.colors.text.primary,
    backgroundColor: disabled ? theme.colors.background.disabled : theme.colors.background.surface,
    outline: "none",
    transition: "border-color 0.2s ease"
  };
  const inputContainerStyle = {
    position: "relative",
    display: "flex",
    alignItems: "center"
  };
  const iconButtonStyle = {
    position: "absolute",
    background: "none",
    border: "none",
    cursor: disabled ? "not-allowed" : "pointer",
    padding: theme.spacing.unit / 2,
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    color: theme.colors.text.secondary,
    opacity: disabled ? 0.5 : 1,
    top: "50%",
    transform: "translateY(-50%)"
  };
  const startIconStyle = {
    ...iconButtonStyle,
    left: theme.spacing.unit
  };
  const endIconStyle = {
    ...iconButtonStyle,
    right: theme.spacing.unit
  };
  return /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)(
    FormControl_default,
    {
      error,
      helperText,
      className: (0, import_clsx7.default)((0, import_browser24.withVendorCSSClassPrefix)("text-field"), className),
      style,
      children: [
        label && /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(InputLabel_default, { required, error: !!error, children: label }),
        /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { style: inputContainerStyle, children: [
          startIcon && /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
            "div",
            {
              style: startIconStyle,
              onClick: onStartIconClick,
              role: onStartIconClick ? "button" : void 0,
              tabIndex: onStartIconClick && !disabled ? 0 : void 0,
              "aria-label": "Start icon",
              children: startIcon
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
            "input",
            {
              style: inputStyle,
              type,
              disabled,
              "aria-invalid": !!error,
              "aria-required": required,
              ...rest
            }
          ),
          endIcon && /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
            "div",
            {
              style: endIconStyle,
              onClick: onEndIconClick,
              role: onEndIconClick ? "button" : void 0,
              tabIndex: onEndIconClick && !disabled ? 0 : void 0,
              "aria-label": "End icon",
              children: endIcon
            }
          )
        ] })
      ]
    }
  );
};
var TextField_default = TextField;

// src/components/primitives/Select/Select.tsx
var import_clsx8 = __toESM(require("clsx"), 1);
var import_browser25 = require("@asgardeo/browser");
var import_jsx_runtime23 = require("react/jsx-runtime");
var Select = ({
  label,
  error,
  className,
  required,
  disabled,
  helperText,
  options,
  style = {},
  ...rest
}) => {
  const { theme } = useTheme_default();
  const selectStyle = {
    width: "100%",
    padding: `${theme.vars.spacing.unit} calc(${theme.vars.spacing.unit} * 1.5)`,
    border: `1px solid ${error ? theme.vars.colors.error.main : theme.vars.colors.border}`,
    borderRadius: theme.vars.borderRadius.medium,
    fontSize: theme.vars.typography.fontSizes.md,
    color: theme.vars.colors.text.primary,
    backgroundColor: disabled ? theme.vars.colors.background.disabled : theme.vars.colors.background.surface,
    outline: "none",
    transition: "border-color 0.2s ease",
    appearance: "none",
    backgroundImage: `url('data:image/svg+xml;charset=US-ASCII,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22292.4%22%20height%3D%22292.4%22%3E%3Cpath%20fill%3D%22%23${theme.colors.text.secondary.replace(
      "#",
      ""
    )}%22%20d%3D%22M287%2069.4a17.6%2017.6%200%200%200-13-5.4H18.4c-5%200-9.3%201.8-12.9%205.4A17.6%2017.6%200%200%200%200%2082.2c0%205%201.8%209.3%205.4%2012.9l128%20127.9c3.6%203.6%207.8%205.4%2012.8%205.4s9.2-1.8%2012.8-5.4L287%2095c3.5-3.5%205.4-7.8%205.4-12.8%200-5-1.9-9.2-5.5-12.8z%22%2F%3E%3C%2Fsvg%3E')`,
    backgroundRepeat: "no-repeat",
    backgroundPosition: "right .7em top 50%",
    backgroundSize: ".65em auto"
  };
  return /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)(
    FormControl_default,
    {
      error,
      helperText,
      className: (0, import_clsx8.default)((0, import_browser25.withVendorCSSClassPrefix)("select"), className),
      style,
      children: [
        label && /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(InputLabel_default, { required, error: !!error, children: label }),
        /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("select", { style: selectStyle, disabled, "aria-invalid": !!error, "aria-required": required, ...rest, children: options.map((option) => /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("option", { value: option.value, children: option.label }, option.value)) })
      ]
    }
  );
};
var Select_default = Select;

// src/components/primitives/OtpField/OtpField.tsx
var import_react31 = require("react");
var import_clsx9 = __toESM(require("clsx"), 1);
var import_browser26 = require("@asgardeo/browser");
var import_jsx_runtime24 = require("react/jsx-runtime");
var OtpField = ({
  label,
  error,
  className,
  required,
  disabled,
  helperText,
  length = 6,
  value = "",
  onChange,
  onComplete,
  type = "text",
  placeholder = "",
  style = {},
  autoFocus = false,
  pattern
}) => {
  const { theme } = useTheme_default();
  const [otp, setOtp] = (0, import_react31.useState)(Array(length).fill(""));
  const inputRefs = (0, import_react31.useRef)([]);
  (0, import_react31.useEffect)(() => {
    inputRefs.current = inputRefs.current.slice(0, length);
  }, [length]);
  (0, import_react31.useEffect)(() => {
    if (value) {
      const newOtp = value.split("").slice(0, length);
      while (newOtp.length < length) {
        newOtp.push("");
      }
      setOtp(newOtp);
    } else {
      setOtp(Array(length).fill(""));
    }
  }, [value, length]);
  (0, import_react31.useEffect)(() => {
    if (autoFocus && inputRefs.current[0]) {
      inputRefs.current[0].focus();
    }
  }, [autoFocus]);
  const inputContainerStyle = {
    display: "flex",
    gap: theme.vars.spacing.unit,
    justifyContent: "space-between",
    alignItems: "center",
    flexWrap: "wrap"
  };
  const inputStyle = {
    width: `calc(${theme.vars.spacing.unit} * 6)`,
    height: `calc(${theme.vars.spacing.unit} * 6)`,
    textAlign: "center",
    fontSize: theme.vars.typography.fontSizes.xl,
    fontWeight: 500,
    border: `2px solid ${error ? theme.vars.colors.error.main : theme.vars.colors.border}`,
    borderRadius: theme.vars.borderRadius.medium,
    color: theme.vars.colors.text.primary,
    backgroundColor: disabled ? theme.vars.colors.background.disabled : theme.vars.colors.background.surface,
    outline: "none",
    transition: "border-color 0.2s ease, box-shadow 0.2s ease"
  };
  const focusedInputStyle = {
    borderColor: error ? theme.vars.colors.error.main : theme.vars.colors.primary.main,
    boxShadow: `0 0 0 2px ${error ? theme.vars.colors.error.main + "20" : theme.vars.colors.primary.main + "20"}`
  };
  const handleChange = (index, event) => {
    const newValue = event.target.value;
    if (newValue.length > 1) return;
    if (type === "number" && newValue && !/^\d$/.test(newValue)) return;
    if (pattern && newValue && !new RegExp(pattern).test(newValue)) return;
    const newOtp = [...otp];
    newOtp[index] = newValue;
    setOtp(newOtp);
    const otpValue = newOtp.join("");
    onChange?.({ target: { value: otpValue } });
    if (newValue && index < length - 1) {
      inputRefs.current[index + 1]?.focus();
    }
    if (newOtp.every((digit) => digit !== "") && onComplete) {
      onComplete(otpValue);
    }
  };
  const handleKeyDown = (index, event) => {
    if (event.key === "Backspace") {
      if (!otp[index] && index > 0) {
        const newOtp = [...otp];
        newOtp[index - 1] = "";
        setOtp(newOtp);
        inputRefs.current[index - 1]?.focus();
        onChange?.({ target: { value: newOtp.join("") } });
      } else if (otp[index]) {
        const newOtp = [...otp];
        newOtp[index] = "";
        setOtp(newOtp);
        onChange?.({ target: { value: newOtp.join("") } });
      }
    } else if (event.key === "ArrowLeft" && index > 0) {
      inputRefs.current[index - 1]?.focus();
    } else if (event.key === "ArrowRight" && index < length - 1) {
      inputRefs.current[index + 1]?.focus();
    } else if (event.key === "Enter") {
      event.preventDefault();
      if (otp.every((digit) => digit !== "") && onComplete) {
        onComplete(otp.join(""));
      }
    }
  };
  const handlePaste = (event) => {
    event.preventDefault();
    const pastedData = event.clipboardData.getData("text").slice(0, length);
    let validData = "";
    for (const char of pastedData) {
      if (type === "number" && !/^\d$/.test(char)) continue;
      if (pattern && !new RegExp(pattern).test(char)) continue;
      validData += char;
    }
    const newOtp = Array(length).fill("");
    for (let i = 0; i < Math.min(validData.length, length); i++) {
      newOtp[i] = validData[i];
    }
    setOtp(newOtp);
    onChange?.({ target: { value: newOtp.join("") } });
    const nextEmptyIndex = newOtp.findIndex((digit) => digit === "");
    const focusIndex = nextEmptyIndex !== -1 ? nextEmptyIndex : length - 1;
    inputRefs.current[focusIndex]?.focus();
    if (newOtp.every((digit) => digit !== "") && onComplete) {
      onComplete(newOtp.join(""));
    }
  };
  return /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)(
    FormControl_default,
    {
      error,
      helperText,
      className: (0, import_clsx9.default)((0, import_browser26.withVendorCSSClassPrefix)("otp-input"), className),
      style,
      helperTextAlign: "center",
      children: [
        label && /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(InputLabel_default, { required, error: !!error, children: label }),
        /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("div", { style: inputContainerStyle, children: Array.from({ length }, (_, index) => /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(
          "input",
          {
            ref: (el) => {
              if (el) inputRefs.current[index] = el;
            },
            type: type === "password" ? "password" : "text",
            inputMode: type === "number" ? "numeric" : "text",
            value: otp[index] || "",
            onChange: (event) => handleChange(index, event),
            onKeyDown: (event) => handleKeyDown(index, event),
            onPaste: handlePaste,
            onFocus: (event) => {
              event.target.style.borderColor = error ? theme.vars.colors.error.main : theme.vars.colors.primary.main;
              event.target.style.boxShadow = `0 0 0 2px ${error ? theme.vars.colors.error.main + "20" : theme.vars.colors.primary.main + "20"}`;
            },
            onBlur: (event) => {
              event.target.style.borderColor = error ? theme.vars.colors.error.main : theme.vars.colors.border;
              event.target.style.boxShadow = "none";
            },
            style: inputStyle,
            maxLength: 1,
            placeholder,
            disabled,
            "aria-label": `${label || "OTP"} digit ${index + 1}`,
            "aria-invalid": !!error,
            "aria-required": required,
            autoComplete: "one-time-code"
          },
          index
        )) })
      ]
    }
  );
};
var OtpField_default = OtpField;

// src/components/primitives/PasswordField/PasswordField.tsx
var import_react32 = require("react");

// src/components/primitives/Icons/Eye.tsx
var import_jsx_runtime25 = require("react/jsx-runtime");
var Eye = (props) => /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)(
  "svg",
  {
    xmlns: "http://www.w3.org/2000/svg",
    width: "24",
    height: "24",
    viewBox: "0 0 24 24",
    fill: "none",
    stroke: "currentColor",
    strokeWidth: "2",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    ...props,
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("path", { d: "M2.062 12.348a1 1 0 0 1 0-.696 10.75 10.75 0 0 1 19.876 0 1 1 0 0 1 0 .696 10.75 10.75 0 0 1-19.876 0" }),
      /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("circle", { cx: "12", cy: "12", r: "3" })
    ]
  }
);
var Eye_default = Eye;

// src/components/primitives/Icons/EyeOff.tsx
var import_jsx_runtime26 = require("react/jsx-runtime");
var EyeOff = (props) => /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)(
  "svg",
  {
    xmlns: "http://www.w3.org/2000/svg",
    width: "24",
    height: "24",
    viewBox: "0 0 24 24",
    fill: "none",
    stroke: "currentColor",
    strokeWidth: "2",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    ...props,
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("path", { d: "M10.733 5.076a10.744 10.744 0 0 1 11.205 6.575 1 1 0 0 1 0 .696 10.747 10.747 0 0 1-1.444 2.49" }),
      /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("path", { d: "M14.084 14.158a3 3 0 0 1-4.242-4.242" }),
      /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("path", { d: "M17.479 17.499a10.75 10.75 0 0 1-15.417-5.151 1 1 0 0 1 0-.696 10.75 10.75 0 0 1 4.446-5.143" }),
      /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("path", { d: "m2 2 20 20" })
    ]
  }
);
var EyeOff_default = EyeOff;

// src/components/primitives/PasswordField/PasswordField.tsx
var import_jsx_runtime27 = require("react/jsx-runtime");
var PasswordField = ({
  onChange,
  ...textFieldProps
}) => {
  const [showPassword, setShowPassword] = (0, import_react32.useState)(false);
  return /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(
    TextField_default,
    {
      ...textFieldProps,
      type: showPassword ? "text" : "password",
      onChange: (e) => onChange(e.target.value),
      autoComplete: "current-password",
      endIcon: showPassword ? /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(EyeOff_default, { width: 16, height: 16 }) : /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(Eye_default, { width: 16, height: 16 }),
      onEndIconClick: () => setShowPassword(!showPassword)
    }
  );
};
var PasswordField_default = PasswordField;

// src/components/primitives/DatePicker/DatePicker.tsx
var import_clsx10 = __toESM(require("clsx"), 1);
var import_browser27 = require("@asgardeo/browser");
var import_jsx_runtime28 = require("react/jsx-runtime");
var DatePicker = ({
  label,
  error,
  className,
  required,
  disabled,
  helperText,
  dateFormat = "yyyy-MM-dd",
  style = {},
  ...rest
}) => {
  const { theme } = useTheme_default();
  const inputStyle = {
    width: "100%",
    padding: `${theme.vars.spacing.unit} calc(${theme.vars.spacing.unit} * 1.5)`,
    border: `1px solid ${error ? theme.vars.colors.error.main : theme.vars.colors.border}`,
    borderRadius: theme.vars.borderRadius.medium,
    fontSize: "1rem",
    color: theme.vars.colors.text.primary,
    backgroundColor: disabled ? theme.vars.colors.background.disabled : theme.vars.colors.background.surface,
    outline: "none",
    transition: "border-color 0.2s ease"
  };
  return /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)(
    FormControl_default,
    {
      error,
      helperText,
      className: (0, import_clsx10.default)((0, import_browser27.withVendorCSSClassPrefix)("date-picker"), className),
      style,
      children: [
        label && /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(InputLabel_default, { required, error: !!error, children: label }),
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(
          "input",
          {
            type: "date",
            pattern: "\\d{4}-\\d{2}-\\d{2}",
            placeholder: dateFormat,
            style: inputStyle,
            disabled,
            "aria-invalid": !!error,
            "aria-required": required,
            ...rest
          }
        )
      ]
    }
  );
};
var DatePicker_default = DatePicker;

// src/components/primitives/Checkbox/Checkbox.tsx
var import_clsx11 = __toESM(require("clsx"), 1);
var import_browser28 = require("@asgardeo/browser");
var import_jsx_runtime29 = require("react/jsx-runtime");
var Checkbox = ({ label, error, className, required, helperText, style = {}, ...rest }) => {
  const { theme } = useTheme_default();
  const containerStyle = {
    display: "flex",
    alignItems: "center",
    ...style
  };
  const inputStyle = {
    width: `calc(${theme.vars.spacing.unit} * 2.5)`,
    height: `calc(${theme.vars.spacing.unit} * 2.5)`,
    marginRight: theme.vars.spacing.unit,
    accentColor: theme.vars.colors.primary.main
  };
  return /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(
    FormControl_default,
    {
      error,
      helperText,
      className: (0, import_clsx11.default)((0, import_browser28.withVendorCSSClassPrefix)("checkbox"), className),
      helperTextMarginLeft: `calc(${theme.vars.spacing.unit} * 3.5)`,
      children: /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { style: containerStyle, children: [
        /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("input", { type: "checkbox", style: inputStyle, "aria-invalid": !!error, "aria-required": required, ...rest }),
        label && /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(
          InputLabel_default,
          {
            required,
            error: !!error,
            variant: "inline",
            style: {
              color: error ? theme.vars.colors.error.main : theme.vars.colors.text.primary,
              fontSize: "0.875rem"
            },
            children: label
          }
        )
      ] })
    }
  );
};
var Checkbox_default = Checkbox;

// src/components/factories/FieldFactory.tsx
var import_browser29 = require("@asgardeo/browser");
var import_jsx_runtime30 = require("react/jsx-runtime");
var validateFieldValue = (value, type, required = false, touched = false) => {
  if (required && touched && (!value || value.trim() === "")) {
    return "This field is required";
  }
  if (!value || value.trim() === "") {
    return null;
  }
  switch (type) {
    case import_browser29.FieldType.Number:
      const numValue = parseInt(value, 10);
      if (isNaN(numValue)) {
        return "Please enter a valid number";
      }
      break;
  }
  return null;
};
var createField = (config) => {
  const {
    name,
    type,
    label,
    required,
    value,
    onChange,
    disabled = false,
    error,
    className,
    options = [],
    touched = false,
    placeholder
  } = config;
  const validationError = error || validateFieldValue(value, type, required, touched);
  const commonProps = {
    name,
    label,
    required,
    disabled,
    error: validationError,
    className,
    value,
    placeholder
  };
  switch (type) {
    case import_browser29.FieldType.Password:
      return /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(PasswordField_default, { ...commonProps, onChange });
    case import_browser29.FieldType.Text:
      return /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(TextField_default, { ...commonProps, type: "text", onChange: (e) => onChange(e.target.value), autoComplete: "off" });
    case import_browser29.FieldType.Email:
      return /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(TextField_default, { ...commonProps, type: "email", onChange: (e) => onChange(e.target.value), autoComplete: "email" });
    case import_browser29.FieldType.Date:
      return /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(DatePicker_default, { ...commonProps, onChange: (e) => onChange(e.target.value) });
    case import_browser29.FieldType.Checkbox:
      const isChecked = value === "true" || value === true;
      return /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(Checkbox_default, { ...commonProps, checked: isChecked, onChange: (e) => onChange(e.target.checked.toString()) });
    case import_browser29.FieldType.Otp:
      return /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(OtpField_default, { ...commonProps, onChange: (e) => onChange(e.target.value) });
    case import_browser29.FieldType.Number:
      return /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(
        TextField_default,
        {
          ...commonProps,
          type: "number",
          onChange: (e) => onChange(e.target.value),
          helperText: "Enter a numeric value"
        }
      );
    case import_browser29.FieldType.Select:
      const fieldOptions = options.length > 0 ? options : [];
      if (fieldOptions.length > 0) {
        return /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(
          Select_default,
          {
            ...commonProps,
            options: fieldOptions,
            onChange: (e) => onChange(e.target.value),
            helperText: "Select from available options"
          }
        );
      }
      return /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(
        TextField_default,
        {
          ...commonProps,
          type: "text",
          onChange: (e) => onChange(e.target.value),
          helperText: "Enter multiple values separated by commas (e.g., value1, value2, value3)",
          placeholder: "value1, value2, value3"
        }
      );
    default:
      return /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(
        TextField_default,
        {
          ...commonProps,
          type: "text",
          onChange: (e) => onChange(e.target.value),
          helperText: "Unknown field type, treating as text"
        }
      );
  }
};
var FieldFactory = (props) => {
  return createField(props);
};

// src/components/presentation/SignIn/options/UsernamePassword.tsx
var import_jsx_runtime31 = require("react/jsx-runtime");
var UsernamePassword = ({
  authenticator,
  formValues,
  touchedFields,
  isLoading,
  onInputChange,
  onSubmit,
  inputClassName = "",
  buttonClassName = "",
  preferences
}) => {
  const { theme } = useTheme_default();
  const { t } = useTranslation_default(preferences?.i18n);
  const { setTitle, setSubtitle } = useFlow_default();
  const formFields = authenticator.metadata?.params?.sort((a, b) => a.order - b.order)?.filter((param) => param.param !== "totp") || [];
  (0, import_react33.useEffect)(() => {
    setTitle(t("username.password.title"));
    setSubtitle(t("username.password.subtitle"));
  }, [setTitle, setSubtitle, t]);
  return /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)(import_jsx_runtime31.Fragment, { children: [
    formFields.map((param) => /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("div", { style: { marginBottom: `calc(${theme.vars.spacing.unit} * 2)` }, children: createField({
      name: param.param,
      type: param.type === import_browser30.EmbeddedSignInFlowAuthenticatorParamType.String ? param.confidential ? import_browser30.FieldType.Password : import_browser30.FieldType.Text : import_browser30.FieldType.Text,
      label: param.displayName,
      required: authenticator.requiredParams.includes(param.param),
      value: formValues[param.param] || "",
      onChange: (value) => onInputChange(param.param, value),
      disabled: isLoading,
      className: inputClassName,
      touched: touchedFields[param.param] || false,
      placeholder: t(`elements.fields.placeholder`, {
        field: (param.displayName || param.param).toLowerCase()
      })
    }) }, param.param)),
    /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(
      Button_default,
      {
        type: "submit",
        disabled: isLoading,
        loading: isLoading,
        className: buttonClassName,
        color: "primary",
        variant: "solid",
        fullWidth: true,
        style: { marginBottom: `calc(${theme.vars.spacing.unit} * 2)` },
        children: t("username.password.submit.button")
      }
    )
  ] });
};
var UsernamePassword_default = UsernamePassword;

// src/components/presentation/SignIn/options/IdentifierFirst.tsx
var import_browser31 = require("@asgardeo/browser");
var import_react34 = require("react");
var import_jsx_runtime32 = require("react/jsx-runtime");
var IdentifierFirst = ({
  authenticator,
  formValues,
  touchedFields,
  isLoading,
  onInputChange,
  onSubmit,
  inputClassName = "",
  buttonClassName = "",
  preferences
}) => {
  const { theme } = useTheme_default();
  const { t } = useTranslation_default(preferences?.i18n);
  const { setTitle, setSubtitle } = useFlow_default();
  const formFields = authenticator.metadata?.params?.sort((a, b) => a.order - b.order) || [];
  (0, import_react34.useEffect)(() => {
    setTitle(t("identifier.first.title"));
    setSubtitle(t("identifier.first.subtitle"));
  }, [setTitle, setSubtitle, t]);
  return /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)(import_jsx_runtime32.Fragment, { children: [
    formFields.map((param) => /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("div", { style: { marginBottom: `calc(${theme.vars.spacing.unit} * 2)` }, children: createField({
      name: param.param,
      type: param.type === import_browser31.EmbeddedSignInFlowAuthenticatorParamType.String ? param.confidential ? import_browser31.FieldType.Password : import_browser31.FieldType.Text : import_browser31.FieldType.Text,
      label: param.displayName,
      required: authenticator.requiredParams.includes(param.param),
      value: formValues[param.param] || "",
      onChange: (value) => onInputChange(param.param, value),
      disabled: isLoading,
      className: inputClassName,
      touched: touchedFields[param.param] || false,
      placeholder: t(`elements.fields.placeholder`, {
        field: (param.displayName || param.param).toLowerCase()
      })
    }) }, param.param)),
    /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(
      Button_default,
      {
        type: "submit",
        disabled: isLoading,
        loading: isLoading,
        className: buttonClassName,
        color: "primary",
        variant: "solid",
        fullWidth: true,
        style: { marginBottom: `calc(${theme.vars.spacing.unit} * 2)` },
        children: t("identifier.first.submit.button")
      }
    )
  ] });
};
var IdentifierFirst_default = IdentifierFirst;

// src/components/presentation/SignIn/options/GoogleButton.tsx
var import_jsx_runtime33 = require("react/jsx-runtime");
var GoogleButton = ({
  authenticator,
  isLoading,
  onSubmit,
  buttonClassName = "",
  preferences
}) => {
  const { t } = useTranslation_default(preferences?.i18n);
  const handleClick = () => {
    onSubmit(authenticator);
  };
  return /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
    Button_default,
    {
      type: "button",
      variant: "solid",
      color: "secondary",
      fullWidth: true,
      disabled: isLoading,
      onClick: handleClick,
      className: buttonClassName,
      startIcon: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("svg", { width: "18", height: "18", viewBox: "0 0 67.91 67.901", xmlns: "http://www.w3.org/2000/svg", children: /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("g", { transform: "translate(-0.001 -0.001)", children: [
        /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
          "path",
          {
            d: "M15.049,160.965l-2.364,8.824-8.639.183a34.011,34.011,0,0,1-.25-31.7h0l7.691,1.41,3.369,7.645a20.262,20.262,0,0,0,.19,13.642Z",
            transform: "translate(0 -119.93)",
            fill: "#fbbb00"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
          "path",
          {
            d: "M294.24,208.176A33.939,33.939,0,0,1,282.137,241h0l-9.687-.494-1.371-8.559a20.235,20.235,0,0,0,8.706-10.333H261.628V208.176Z",
            transform: "translate(-226.93 -180.567)",
            fill: "#518ef8"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
          "path",
          {
            d: "M81.668,328.8h0a33.962,33.962,0,0,1-51.161-10.387l11-9.006a20.192,20.192,0,0,0,29.1,10.338Z",
            transform: "translate(-26.463 -268.374)",
            fill: "#28b446"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
          "path",
          {
            d: "M80.451,7.816l-11,9A20.19,20.19,0,0,0,39.686,27.393l-11.06-9.055h0A33.959,33.959,0,0,1,80.451,7.816Z",
            transform: "translate(-24.828)",
            fill: "#f14336"
          }
        )
      ] }) }),
      children: t("elements.buttons.google")
    }
  );
};
var GoogleButton_default = GoogleButton;

// src/components/presentation/SignIn/options/GitHubButton.tsx
var import_jsx_runtime34 = require("react/jsx-runtime");
var GitHubButton = ({
  authenticator,
  isLoading,
  onSubmit,
  buttonClassName = "",
  preferences
}) => {
  const { t } = useTranslation_default(preferences?.i18n);
  const handleClick = () => {
    onSubmit(authenticator);
  };
  return /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(
    Button_default,
    {
      type: "button",
      variant: "solid",
      color: "secondary",
      fullWidth: true,
      disabled: isLoading,
      onClick: handleClick,
      className: buttonClassName,
      startIcon: /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("svg", { width: "18", height: "18", viewBox: "0 0 67.91 66.233", xmlns: "http://www.w3.org/2000/svg", children: /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("g", { transform: "translate(-386.96 658.072)", children: /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(
        "path",
        {
          d: "M420.915-658.072a33.956,33.956,0,0,0-33.955,33.955,33.963,33.963,0,0,0,23.221,32.22c1.7.314,2.32-.737,2.32-1.633,0-.81-.031-3.484-.046-6.322-9.446,2.054-11.44-4.006-11.44-4.006-1.545-3.925-3.77-4.968-3.77-4.968-3.081-2.107.232-2.064.232-2.064,3.41.239,5.205,3.5,5.205,3.5,3.028,5.19,7.943,3.69,9.881,2.822a7.23,7.23,0,0,1,2.156-4.54c-7.542-.859-15.47-3.77-15.47-16.781a13.141,13.141,0,0,1,3.5-9.114,12.2,12.2,0,0,1,.329-8.986s2.851-.913,9.34,3.48a32.545,32.545,0,0,1,8.5-1.143,32.629,32.629,0,0,1,8.506,1.143c6.481-4.393,9.328-3.48,9.328-3.48a12.185,12.185,0,0,1,.333,8.986,13.115,13.115,0,0,1,3.495,9.114c0,13.042-7.943,15.913-15.5,16.754,1.218,1.054,2.3,3.12,2.3,6.288,0,4.543-.039,8.2-.039,9.318,0,.9.611,1.962,2.332,1.629a33.959,33.959,0,0,0,23.2-32.215,33.955,33.955,0,0,0-33.955-33.955",
          fill: "#ffffff"
        }
      ) }) }),
      children: t("elements.buttons.github")
    }
  );
};
var GitHubButton_default = GitHubButton;

// src/components/presentation/SignIn/options/MicrosoftButton.tsx
var import_jsx_runtime35 = require("react/jsx-runtime");
var MicrosoftButton = ({
  authenticator,
  isLoading,
  onSubmit,
  buttonClassName = "",
  preferences
}) => {
  const { t } = useTranslation_default(preferences?.i18n);
  const handleClick = () => {
    onSubmit(authenticator);
  };
  return /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(
    Button_default,
    {
      type: "button",
      variant: "outline",
      color: "primary",
      fullWidth: true,
      disabled: isLoading,
      onClick: handleClick,
      className: buttonClassName,
      startIcon: /* @__PURE__ */ (0, import_jsx_runtime35.jsxs)("svg", { width: "14", height: "14", viewBox: "0 0 23 23", xmlns: "http://www.w3.org/2000/svg", children: [
        /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("path", { fill: "#f3f3f3", d: "M0 0h23v23H0z" }),
        /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("path", { fill: "#f35325", d: "M1 1h10v10H1z" }),
        /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("path", { fill: "#81bc06", d: "M12 1h10v10H12z" }),
        /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("path", { fill: "#05a6f0", d: "M1 12h10v10H1z" }),
        /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("path", { fill: "#ffba08", d: "M12 12h10v10H12z" })
      ] }),
      children: t("elements.buttons.microsoft")
    }
  );
};
var MicrosoftButton_default = MicrosoftButton;

// src/components/presentation/SignIn/options/FacebookButton.tsx
var import_jsx_runtime36 = require("react/jsx-runtime");
var FacebookButton = ({
  authenticator,
  isLoading,
  onSubmit,
  buttonClassName = "",
  submitButtonText,
  preferences
}) => {
  const { t } = useTranslation_default(preferences?.i18n);
  const handleClick = () => {
    onSubmit(authenticator);
  };
  return /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(
    Button_default,
    {
      type: "button",
      variant: "solid",
      color: "primary",
      fullWidth: true,
      disabled: isLoading,
      onClick: handleClick,
      className: buttonClassName,
      startIcon: /* @__PURE__ */ (0, import_jsx_runtime36.jsxs)("svg", { width: "18", height: "18", viewBox: "0 0 512 512", xmlns: "http://www.w3.org/2000/svg", children: [
        /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(
          "path",
          {
            fill: "#1976D2",
            d: "M448,0H64C28.704,0,0,28.704,0,64v384c0,35.296,28.704,64,64,64h384c35.296,0,64-28.704,64-64V64C512,28.704,483.296,0,448,0z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(
          "path",
          {
            fill: "#FAFAFA",
            d: "M432,256h-80v-64c0-17.664,14.336-16,32-16h32V96h-64l0,0c-53.024,0-96,42.976-96,96v64h-64v80h64v176h96V336h48L432,256z"
          }
        )
      ] }),
      children: t("elements.buttons.facebook")
    }
  );
};
var FacebookButton_default = FacebookButton;

// src/components/presentation/SignIn/options/LinkedInButton.tsx
var import_jsx_runtime37 = require("react/jsx-runtime");
var LinkedInButton = ({
  authenticator,
  isLoading,
  onSubmit,
  buttonClassName = "",
  preferences
}) => {
  const { t } = useTranslation_default(preferences?.i18n);
  const handleClick = () => {
    onSubmit(authenticator);
  };
  return /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(
    Button_default,
    {
      type: "button",
      variant: "outline",
      color: "primary",
      fullWidth: true,
      disabled: isLoading,
      onClick: handleClick,
      className: buttonClassName,
      startIcon: /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("svg", { width: "18", height: "18", viewBox: "0 0 24 24", xmlns: "http://www.w3.org/2000/svg", children: /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(
        "path",
        {
          fill: "#0077B5",
          d: "M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"
        }
      ) }),
      children: t("elements.buttons.linkedin")
    }
  );
};
var LinkedInButton_default = LinkedInButton;

// src/components/presentation/SignIn/options/SignInWithEthereumButton.tsx
var import_jsx_runtime38 = require("react/jsx-runtime");
var SignInWithEthereumButton = ({
  authenticator,
  isLoading,
  onSubmit,
  buttonClassName = "",
  preferences
}) => {
  const { t } = useTranslation_default(preferences?.i18n);
  const handleClick = () => {
    onSubmit(authenticator);
  };
  return /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(
    Button_default,
    {
      type: "button",
      variant: "outline",
      color: "secondary",
      fullWidth: true,
      disabled: isLoading,
      onClick: handleClick,
      className: buttonClassName,
      startIcon: /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("svg", { width: "18", height: "18", viewBox: "0 0 24 24", xmlns: "http://www.w3.org/2000/svg", children: /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(
        "path",
        {
          fill: "#627EEA",
          d: "M11.944 17.97L4.58 13.62 11.943 24l7.37-10.38-7.372 4.35h.003zM12.056 0L4.69 12.223l7.365 4.354 7.365-4.35L12.056 0z"
        }
      ) }),
      children: t("elements.buttons.ethereum")
    }
  );
};
var SignInWithEthereumButton_default = SignInWithEthereumButton;

// src/components/presentation/SignIn/options/EmailOtp.tsx
var import_browser32 = require("@asgardeo/browser");
var import_react35 = require("react");
var import_jsx_runtime39 = require("react/jsx-runtime");
var EmailOtp = ({
  authenticator,
  formValues,
  touchedFields,
  isLoading,
  onInputChange,
  onSubmit,
  inputClassName = "",
  buttonClassName = "",
  preferences
}) => {
  const { theme } = useTheme_default();
  const { t } = useTranslation_default(preferences?.i18n);
  const { setTitle, setSubtitle } = useFlow_default();
  const formFields = authenticator.metadata?.params?.sort((a, b) => a.order - b.order) || [];
  (0, import_react35.useEffect)(() => {
    setTitle(t("email.otp.title"));
    setSubtitle(t("email.otp.subtitle"));
  }, [setTitle, setSubtitle, t]);
  const hasOtpField = formFields.some(
    (param) => param.param.toLowerCase().includes("otp") || param.param.toLowerCase().includes("code")
  );
  return /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)(import_jsx_runtime39.Fragment, { children: [
    formFields.map((param) => {
      const isOtpParam = param.param.toLowerCase().includes("otp") || param.param.toLowerCase().includes("code");
      return /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("div", { style: { marginBottom: `calc(${theme.vars.spacing.unit} * 2)` }, children: isOtpParam && hasOtpField ? /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(
        OtpField_default,
        {
          length: 6,
          value: formValues[param.param] || "",
          onChange: (event) => onInputChange(param.param, event.target.value),
          disabled: isLoading,
          className: inputClassName
        }
      ) : createField({
        name: param.param,
        type: param.type === import_browser32.EmbeddedSignInFlowAuthenticatorParamType.String ? param.confidential ? import_browser32.FieldType.Password : import_browser32.FieldType.Text : import_browser32.FieldType.Text,
        label: param.displayName,
        required: authenticator.requiredParams.includes(param.param),
        value: formValues[param.param] || "",
        onChange: (value) => onInputChange(param.param, value),
        disabled: isLoading,
        className: inputClassName,
        touched: touchedFields[param.param] || false
      }) }, param.param);
    }),
    /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(
      Button_default,
      {
        type: "submit",
        disabled: isLoading,
        loading: isLoading,
        className: buttonClassName,
        color: "primary",
        variant: "solid",
        fullWidth: true,
        style: { marginBottom: `calc(${theme.vars.spacing.unit} * 2)` },
        children: t("email.otp.submit.button")
      }
    )
  ] });
};
var EmailOtp_default = EmailOtp;

// src/components/presentation/SignIn/options/Totp.tsx
var import_browser33 = require("@asgardeo/browser");
var import_react36 = require("react");
var import_jsx_runtime40 = require("react/jsx-runtime");
var Totp = ({
  authenticator,
  formValues,
  touchedFields,
  isLoading,
  onInputChange,
  onSubmit,
  inputClassName = "",
  buttonClassName = "",
  preferences
}) => {
  const { theme } = useTheme_default();
  const { t } = useTranslation_default(preferences?.i18n);
  const { setTitle, setSubtitle } = useFlow_default();
  const formFields = authenticator.metadata?.params?.sort((a, b) => a.order - b.order) || [];
  (0, import_react36.useEffect)(() => {
    setTitle(t("totp.title"));
    setSubtitle(t("totp.subtitle"));
  }, [setTitle, setSubtitle, t]);
  const hasTotpField = formFields.some(
    (param) => param.param.toLowerCase().includes("totp") || param.param.toLowerCase().includes("token")
  );
  return /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)(import_jsx_runtime40.Fragment, { children: [
    formFields.map((param) => {
      const isTotpParam = param.param.toLowerCase().includes("totp") || param.param.toLowerCase().includes("token");
      return /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("div", { style: { marginBottom: `calc(${theme.vars.spacing.unit} * 2)` }, children: isTotpParam && hasTotpField ? /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(
        OtpField_default,
        {
          length: 6,
          value: formValues[param.param] || "",
          onChange: (event) => onInputChange(param.param, event.target.value),
          disabled: isLoading,
          className: inputClassName
        }
      ) : createField({
        name: param.param,
        type: param.type === import_browser33.EmbeddedSignInFlowAuthenticatorParamType.String ? param.confidential ? import_browser33.FieldType.Password : import_browser33.FieldType.Text : import_browser33.FieldType.Text,
        label: param.displayName,
        required: authenticator.requiredParams.includes(param.param),
        value: formValues[param.param] || "",
        onChange: (value) => onInputChange(param.param, value),
        disabled: isLoading,
        className: inputClassName,
        touched: touchedFields[param.param] || false
      }) }, param.param);
    }),
    /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(
      Button_default,
      {
        type: "submit",
        disabled: isLoading,
        loading: isLoading,
        className: buttonClassName,
        color: "primary",
        variant: "solid",
        fullWidth: true,
        style: { marginBottom: `calc(${theme.vars.spacing.unit} * 2)` },
        children: t("totp.submit.button")
      }
    )
  ] });
};
var Totp_default = Totp;

// src/components/presentation/SignIn/options/SmsOtp.tsx
var import_browser34 = require("@asgardeo/browser");
var import_react37 = require("react");
var import_jsx_runtime41 = require("react/jsx-runtime");
var SmsOtp = ({
  authenticator,
  formValues,
  touchedFields,
  isLoading,
  onInputChange,
  onSubmit,
  inputClassName = "",
  buttonClassName = "",
  preferences
}) => {
  const { theme } = useTheme_default();
  const { t } = useTranslation_default(preferences?.i18n);
  const { setTitle, setSubtitle } = useFlow_default();
  const formFields = authenticator.metadata?.params?.sort((a, b) => a.order - b.order) || [];
  (0, import_react37.useEffect)(() => {
    setTitle(t("sms.otp.title"));
    setSubtitle(t("sms.otp.subtitle"));
  }, [setTitle, setSubtitle, t]);
  const hasOtpField = formFields.some(
    (param) => param.param.toLowerCase().includes("otp") || param.param.toLowerCase().includes("code")
  );
  return /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)(import_jsx_runtime41.Fragment, { children: [
    formFields.map((param) => {
      const isOtpParam = param.param.toLowerCase().includes("otp") || param.param.toLowerCase().includes("code");
      return /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("div", { style: { marginBottom: `calc(${theme.vars.spacing.unit} * 2)` }, children: isOtpParam && hasOtpField ? /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(
        OtpField_default,
        {
          length: 6,
          value: formValues[param.param] || "",
          onChange: (event) => onInputChange(param.param, event.target.value),
          disabled: isLoading,
          className: inputClassName
        }
      ) : createField({
        name: param.param,
        type: param.type === import_browser34.EmbeddedSignInFlowAuthenticatorParamType.String ? param.confidential ? import_browser34.FieldType.Password : import_browser34.FieldType.Text : import_browser34.FieldType.Text,
        label: param.displayName,
        required: authenticator.requiredParams.includes(param.param),
        value: formValues[param.param] || "",
        onChange: (value) => onInputChange(param.param, value),
        disabled: isLoading,
        className: inputClassName,
        touched: touchedFields[param.param] || false
      }) }, param.param);
    }),
    /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(
      Button_default,
      {
        type: "submit",
        disabled: isLoading,
        loading: isLoading,
        className: buttonClassName,
        color: "primary",
        variant: "solid",
        fullWidth: true,
        style: { marginBottom: `calc(${theme.vars.spacing.unit} * 2)` },
        children: t("sms.otp.submit.button")
      }
    )
  ] });
};
var SmsOtp_default = SmsOtp;

// src/components/presentation/SignIn/options/SocialButton.tsx
var import_jsx_runtime42 = require("react/jsx-runtime");
var SocialLogin = ({
  authenticator,
  isLoading,
  onSubmit,
  buttonClassName = "",
  preferences
}) => {
  const { t } = useTranslation_default(preferences?.i18n);
  const getDisplayName = () => {
    const providerName = authenticator.idp;
    return t("elements.buttons.social", { connection: providerName });
  };
  const handleClick = () => {
    onSubmit(authenticator);
  };
  return /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(
    Button_default,
    {
      type: "button",
      variant: "outline",
      color: "secondary",
      fullWidth: true,
      disabled: isLoading,
      onClick: handleClick,
      className: buttonClassName,
      startIcon: /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("svg", { width: "18", height: "18", viewBox: "0 0 24 24", xmlns: "http://www.w3.org/2000/svg", children: /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(
        "path",
        {
          fill: "currentColor",
          d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
        }
      ) }),
      children: getDisplayName()
    }
  );
};
var SocialButton_default = SocialLogin;

// src/components/presentation/SignIn/options/MultiOptionButton.tsx
var import_browser35 = require("@asgardeo/browser");
var import_jsx_runtime43 = require("react/jsx-runtime");
var MultiOptionButton = ({
  authenticator,
  isLoading,
  onSubmit,
  buttonClassName = "",
  preferences
}) => {
  const { t } = useTranslation_default(preferences?.i18n);
  const getDisplayName = () => {
    let authenticatorName = authenticator.authenticator;
    if (authenticator.idp !== import_browser35.EmbeddedSignInFlowAuthenticatorKnownIdPType.Local) {
      authenticatorName = authenticator.idp;
    }
    switch (authenticatorName) {
      default:
        return t("elements.buttons.multi.option", { connection: authenticatorName });
    }
  };
  const getIcon = () => {
    const authenticatorId = authenticator.authenticatorId;
    switch (authenticatorId) {
      case import_browser35.ApplicationNativeAuthenticationConstants.SupportedAuthenticators.SmsOtp:
        return /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("svg", { width: "18", height: "18", viewBox: "0 0 24 24", xmlns: "http://www.w3.org/2000/svg", children: /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
          "path",
          {
            fill: "currentColor",
            d: "M20 15.5c-1.25 0-2.45-.2-3.57-.57a1.02 1.02 0 0 0-1.02.24l-2.2 2.2a15.074 15.074 0 0 1-6.59-6.59l2.2-2.2c.27-.27.35-.67.24-1.02A11.36 11.36 0 0 1 8.5 4c0-.55-.45-1-1-1H4c-.55 0-1 .45-1 1 0 9.39 7.61 17 17 17 .55 0 1-.45 1-1v-3.5c0-.55-.45-1-1-1M12 3v10l3-3h6V3z"
          }
        ) });
      case import_browser35.ApplicationNativeAuthenticationConstants.SupportedAuthenticators.EmailOtp:
        return /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("svg", { width: "18", height: "18", viewBox: "0 0 24 24", xmlns: "http://www.w3.org/2000/svg", children: /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
          "path",
          {
            fill: "currentColor",
            d: "M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2m0 4l-8 5l-8-5V6l8 5l8-5z"
          }
        ) });
      case import_browser35.ApplicationNativeAuthenticationConstants.SupportedAuthenticators.Totp:
        return /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("svg", { width: "18", height: "18", viewBox: "0 0 24 24", xmlns: "http://www.w3.org/2000/svg", children: /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("path", { fill: "currentColor", d: "M12 1L3 5v6c0 5.55 3.84 10.74 9 12c5.16-1.26 9-6.45 9-12V5z" }) });
      case import_browser35.ApplicationNativeAuthenticationConstants.SupportedAuthenticators.PushNotification:
        return /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("svg", { width: "18", height: "18", viewBox: "0 0 24 24", xmlns: "http://www.w3.org/2000/svg", children: /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
          "path",
          {
            fill: "currentColor",
            d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10s10-4.48 10-10S17.52 2 12 2m0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8s8 3.59 8 8s-3.59 8-8 8m1-13h-2v6h2zm0 8h-2v2h2z"
          }
        ) });
      case import_browser35.ApplicationNativeAuthenticationConstants.SupportedAuthenticators.Passkey:
        return /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("svg", { fill: "currentColor", width: "18", height: "18", viewBox: "0 0 32 32", xmlns: "http://www.w3.org/2000/svg", children: [
          /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("g", { id: "SVGRepo_bgCarrier", strokeWidth: "0" }),
          /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("g", { id: "SVGRepo_tracerCarrier", "stroke-linecap": "round", "stroke-linejoin": "round" }),
          /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("g", { id: "SVGRepo_iconCarrier", children: [
            /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("path", { d: "M7.7 4.7C9.36 3.07 12.68 2 16.17 2S23 3.06 24.6 4.7A1 1 0 0 0 26 3.3C23.6.86 19.34 0 16.16 0S8.72.87 6.3 3.3a1 1 0 0 0 1.4 1.4zM29.2 12.55C26.38 6.88 22 4 16.17 4s-10.22 2.88-13 8.55a1 1 0 0 0 .44 1.34 1 1 0 0 0 1.35-.45C7.4 8.45 11.08 6 16.15 6s8.77 2.44 11.27 7.45a1 1 0 0 0 .9.55.87.87 0 0 0 .44-.1 1 1 0 0 0 .45-1.35zM19.4 28.08c-4.13-1.77-5.8-4.5-6-6.5a2.87 2.87 0 0 1 1.13-2.75c.85-.57 2.1.24 3.87 1.52s4.13 3 6.17 1.45c1.8-1.35 2.34-3.76 1.45-6.44A10.85 10.85 0 0 0 16.16 8C7.2 8 4 15.75 4 23a1 1 0 0 0 2 0c0-3 .73-13 10.16-13 3.9 0 7 3.1 8 6 .3.87.8 3-.75 4.2-.8.6-2-.2-3.8-1.47s-4.07-2.94-6.14-1.56a4.87 4.87 0 0 0-2 4.6c.24 2.56 2.24 6 7.18 8.15A1 1 0 0 0 19 30a1 1 0 0 0 .4-1.92zM10 19.24a7.06 7.06 0 0 1 5.2-4.65c2.24-.43 4.32.6 6 3a1 1 0 1 0 1.62-1.17c-2.9-4.07-6.27-4.12-8-3.8A9.1 9.1 0 0 0 8 18.77c-1 3.94.43 8.27 4.2 12.87a1 1 0 0 0 .8.37.94.94 0 0 0 .63-.23 1 1 0 0 0 .14-1.4c-3.34-4.1-4.62-7.83-3.77-11.13zM25.3 24.3a3 3 0 0 1-3.06.63c-2.4-.57-4.78-2.7-5.3-4.25a1 1 0 1 0-1.9.64c.8 2.33 3.87 4.88 6.74 5.56a6.84 6.84 0 0 0 1.52.18 4.7 4.7 0 0 0 3.4-1.35 1 1 0 0 0-1.4-1.4z" }),
            " "
          ] })
        ] });
      case import_browser35.ApplicationNativeAuthenticationConstants.SupportedAuthenticators.MagicLink:
        return /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("svg", { width: "18", height: "18", viewBox: "0 0 24 24", xmlns: "http://www.w3.org/2000/svg", children: /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
          "path",
          {
            fill: "currentColor",
            d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10s10-4.48 10-10S17.52 2 12 2m0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8s8 3.59 8 8s-3.59 8-8 8m1-13h-2v6h2zm0 8h-2v2h2z"
          }
        ) });
      default:
        return /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("svg", { width: "18", height: "18", viewBox: "0 0 24 24", xmlns: "http://www.w3.org/2000/svg", children: /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
          "path",
          {
            fill: "currentColor",
            d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10s10-4.48 10-10S17.52 2 12 2m-2 15l-5-5l1.41-1.41L10 14.17l7.59-7.59L19 8z"
          }
        ) });
    }
  };
  const handleClick = () => {
    onSubmit(authenticator);
  };
  return /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
    Button_default,
    {
      type: "button",
      variant: "outline",
      color: "primary",
      fullWidth: true,
      disabled: isLoading,
      onClick: handleClick,
      className: buttonClassName,
      startIcon: getIcon(),
      children: getDisplayName()
    }
  );
};
var MultiOptionButton_default = MultiOptionButton;

// src/components/presentation/SignIn/options/SignInOptionFactory.tsx
var import_jsx_runtime44 = require("react/jsx-runtime");
var createSignInOption = (props) => {
  const { authenticator, ...optionProps } = props;
  const hasParams = authenticator.metadata?.params && authenticator.metadata.params.length > 0;
  switch (authenticator.authenticatorId) {
    case import_browser36.ApplicationNativeAuthenticationConstants.SupportedAuthenticators.UsernamePassword:
      return /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(UsernamePassword_default, { ...props });
    case import_browser36.ApplicationNativeAuthenticationConstants.SupportedAuthenticators.IdentifierFirst:
      return /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(IdentifierFirst_default, { ...props });
    case import_browser36.ApplicationNativeAuthenticationConstants.SupportedAuthenticators.Google:
      return /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(GoogleButton_default, { ...props });
    case import_browser36.ApplicationNativeAuthenticationConstants.SupportedAuthenticators.GitHub:
      return /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(GitHubButton_default, { ...props });
    case import_browser36.ApplicationNativeAuthenticationConstants.SupportedAuthenticators.Microsoft:
      return /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(MicrosoftButton_default, { ...props });
    case import_browser36.ApplicationNativeAuthenticationConstants.SupportedAuthenticators.Facebook:
      return /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(FacebookButton_default, { ...props });
    case import_browser36.ApplicationNativeAuthenticationConstants.SupportedAuthenticators.LinkedIn:
      return /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(LinkedInButton_default, { ...props });
    case import_browser36.ApplicationNativeAuthenticationConstants.SupportedAuthenticators.SignInWithEthereum:
      return /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(SignInWithEthereumButton_default, { ...props });
    case import_browser36.ApplicationNativeAuthenticationConstants.SupportedAuthenticators.EmailOtp:
      return hasParams ? /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(EmailOtp_default, { ...props }) : /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(MultiOptionButton_default, { ...props });
    case import_browser36.ApplicationNativeAuthenticationConstants.SupportedAuthenticators.Totp:
      return hasParams ? /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(Totp_default, { ...props }) : /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(MultiOptionButton_default, { ...props });
    case import_browser36.ApplicationNativeAuthenticationConstants.SupportedAuthenticators.SmsOtp:
      return hasParams ? /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(SmsOtp_default, { ...props }) : /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(MultiOptionButton_default, { ...props });
    default:
      if (authenticator.idp !== import_browser36.EmbeddedSignInFlowAuthenticatorKnownIdPType.Local) {
        return /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(SocialButton_default, { ...props });
      }
      if (hasParams) {
        return /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(UsernamePassword_default, { ...props });
      } else {
        return /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(MultiOptionButton_default, { ...props });
      }
  }
};
var createSignInOptionFromAuthenticator = (authenticator, formValues, touchedFields, isLoading, onInputChange, onSubmit, options) => {
  return createSignInOption({
    authenticator,
    formValues,
    touchedFields,
    isLoading,
    onInputChange,
    onSubmit,
    ...options
  });
};

// src/components/primitives/Alert/Alert.tsx
var import_react38 = require("react");
var import_browser37 = require("@asgardeo/browser");
var import_clsx12 = __toESM(require("clsx"), 1);

// src/components/primitives/Icons/CircleCheck.tsx
var import_jsx_runtime45 = require("react/jsx-runtime");
var CircleCheck = (props) => /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)(
  "svg",
  {
    xmlns: "http://www.w3.org/2000/svg",
    width: "24",
    height: "24",
    viewBox: "0 0 24 24",
    fill: "none",
    stroke: "currentColor",
    strokeWidth: "2",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    ...props,
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("circle", { cx: "12", cy: "12", r: "10" }),
      /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("path", { d: "m9 12 2 2 4-4" })
    ]
  }
);
var CircleCheck_default = CircleCheck;

// src/components/primitives/Icons/CircleAlert.tsx
var import_jsx_runtime46 = require("react/jsx-runtime");
var CircleAlert = (props) => /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)(
  "svg",
  {
    xmlns: "http://www.w3.org/2000/svg",
    width: "24",
    height: "24",
    viewBox: "0 0 24 24",
    fill: "none",
    stroke: "currentColor",
    strokeWidth: "2",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    ...props,
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("circle", { cx: "12", cy: "12", r: "10" }),
      /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("line", { x1: "12", x2: "12", y1: "8", y2: "12" }),
      /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("line", { x1: "12", x2: "12.01", y1: "16", y2: "16" })
    ]
  }
);
var CircleAlert_default = CircleAlert;

// src/components/primitives/Icons/TriangleAlert.tsx
var import_jsx_runtime47 = require("react/jsx-runtime");
var TriangleAlert = (props) => /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)(
  "svg",
  {
    xmlns: "http://www.w3.org/2000/svg",
    width: "24",
    height: "24",
    viewBox: "0 0 24 24",
    fill: "none",
    stroke: "currentColor",
    strokeWidth: "2",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    ...props,
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("path", { d: "m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3" }),
      /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("path", { d: "M12 9v4" }),
      /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("path", { d: "M12 17h.01" })
    ]
  }
);
var TriangleAlert_default = TriangleAlert;

// src/components/primitives/Icons/Info.tsx
var import_jsx_runtime48 = require("react/jsx-runtime");
var Info = (props) => /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)(
  "svg",
  {
    xmlns: "http://www.w3.org/2000/svg",
    width: "24",
    height: "24",
    viewBox: "0 0 24 24",
    fill: "none",
    stroke: "currentColor",
    strokeWidth: "2",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    ...props,
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("circle", { cx: "12", cy: "12", r: "10" }),
      /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("path", { d: "M12 16v-4" }),
      /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("path", { d: "M12 8h.01" })
    ]
  }
);
var Info_default = Info;

// src/components/primitives/Alert/Alert.tsx
var import_jsx_runtime49 = require("react/jsx-runtime");
var useAlertStyles = (variant) => {
  const { theme } = useTheme_default();
  return (0, import_react38.useMemo)(() => {
    const variantStyles = {
      success: {
        backgroundColor: `${theme.vars.colors.success.main}15`,
        borderColor: theme.vars.colors.success.main,
        color: theme.vars.colors.success.main
      },
      error: {
        backgroundColor: `${theme.vars.colors.error.main}15`,
        borderColor: theme.vars.colors.error.main,
        color: theme.vars.colors.error.main
      },
      warning: {
        backgroundColor: `${theme.vars.colors.warning.main}15`,
        borderColor: theme.vars.colors.warning.main,
        color: theme.vars.colors.warning.main
      },
      info: {
        backgroundColor: `${theme.vars.colors.primary.main}15`,
        borderColor: theme.vars.colors.primary.main,
        color: theme.vars.colors.primary.main
      }
    };
    return {
      padding: `calc(${theme.vars.spacing.unit} * 2)`,
      borderRadius: theme.vars.borderRadius.medium,
      border: "1px solid",
      display: "flex",
      gap: `calc(${theme.vars.spacing.unit} * 1.5)`,
      alignItems: "flex-start",
      ...variantStyles[variant]
    };
  }, [theme, variant]);
};
var useAlertIconStyles = () => {
  const { theme } = useTheme_default();
  return (0, import_react38.useMemo)(
    () => ({
      flexShrink: 0,
      marginTop: `calc(${theme.vars.spacing.unit} * 0.25)`,
      // Slight alignment adjustment
      width: `calc(${theme.vars.spacing.unit} * 2.5)`,
      height: `calc(${theme.vars.spacing.unit} * 2.5)`
    }),
    [theme]
  );
};
var useAlertContentStyles = () => {
  const { theme } = useTheme_default();
  return (0, import_react38.useMemo)(
    () => ({
      flex: 1,
      display: "flex",
      flexDirection: "column",
      gap: theme.vars.spacing.unit
    }),
    [theme]
  );
};
var useAlertTitleStyles = () => {
  const { theme } = useTheme_default();
  return (0, import_react38.useMemo)(
    () => ({
      margin: 0,
      fontSize: theme.vars.typography.fontSizes.sm,
      fontWeight: 600,
      lineHeight: 1.4,
      color: "inherit"
    }),
    [theme]
  );
};
var useAlertDescriptionStyles = () => {
  const { theme } = useTheme_default();
  return (0, import_react38.useMemo)(
    () => ({
      margin: 0,
      fontSize: theme.vars.typography.fontSizes.sm,
      lineHeight: 1.4,
      color: theme.vars.colors.text.secondary
    }),
    [theme]
  );
};
var getDefaultIcon = (variant) => {
  switch (variant) {
    case "success":
      return CircleCheck_default;
    case "error":
      return CircleAlert_default;
    case "warning":
      return TriangleAlert_default;
    case "info":
      return Info_default;
    default:
      return Info_default;
  }
};
var Alert = (0, import_react38.forwardRef)(
  ({ variant = "info", showIcon = true, children, className, style, ...rest }, ref) => {
    const alertStyle = useAlertStyles(variant);
    const iconStyle = useAlertIconStyles();
    const contentStyle = useAlertContentStyles();
    const IconComponent = getDefaultIcon(variant);
    return /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)(
      "div",
      {
        ref,
        role: "alert",
        style: { ...alertStyle, ...style },
        className: (0, import_clsx12.default)((0, import_browser37.withVendorCSSClassPrefix)("alert"), (0, import_browser37.withVendorCSSClassPrefix)(`alert-${variant}`), className),
        ...rest,
        children: [
          showIcon && /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("div", { style: iconStyle, className: (0, import_browser37.withVendorCSSClassPrefix)("alert-icon"), children: /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(IconComponent, {}) }),
          /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("div", { style: contentStyle, className: (0, import_browser37.withVendorCSSClassPrefix)("alert-content"), children })
        ]
      }
    );
  }
);
var AlertTitle = (0, import_react38.forwardRef)(({ children, className, style, ...rest }, ref) => {
  const titleStyle = useAlertTitleStyles();
  const { color, ...filteredRest } = rest;
  return /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(
    Typography_default,
    {
      component: "h3",
      variant: "h6",
      fontWeight: 600,
      style: { ...titleStyle, ...style },
      className: (0, import_clsx12.default)((0, import_browser37.withVendorCSSClassPrefix)("alert-title"), className),
      ...filteredRest,
      children
    }
  );
});
var AlertDescription = (0, import_react38.forwardRef)(
  ({ children, className, style, ...rest }, ref) => {
    const descriptionStyle = useAlertDescriptionStyles();
    const { color, ...filteredRest } = rest;
    return /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(
      Typography_default,
      {
        component: "p",
        variant: "body2",
        style: { ...descriptionStyle, ...style },
        className: (0, import_clsx12.default)((0, import_browser37.withVendorCSSClassPrefix)("alert-description"), className),
        ...filteredRest,
        children
      }
    );
  }
);
Alert.displayName = "Alert";
AlertTitle.displayName = "Alert.Title";
AlertDescription.displayName = "Alert.Description";
Alert.Title = AlertTitle;
Alert.Description = AlertDescription;
var Alert_default = Alert;

// src/components/primitives/Card/Card.tsx
var import_browser38 = require("@asgardeo/browser");
var import_clsx13 = __toESM(require("clsx"), 1);
var import_react39 = require("react");
var import_jsx_runtime50 = require("react/jsx-runtime");
var useCardStyles = (variant, clickable) => {
  const { theme } = useTheme_default();
  return (0, import_react39.useMemo)(() => {
    const baseStyles = {
      borderRadius: theme.borderRadius.medium,
      backgroundColor: theme.colors.background.surface,
      transition: "all 0.2s ease-in-out",
      position: "relative",
      display: "flex",
      flexDirection: "column",
      overflow: "hidden",
      padding: `${theme.spacing.unit * 2}px ${theme.spacing.unit * 2}px`
    };
    const variantStyles = {
      default: {
        ...baseStyles
      },
      outlined: {
        ...baseStyles,
        border: `1px solid ${theme.colors.border}`
      },
      elevated: {
        ...baseStyles,
        boxShadow: "0 2px 8px rgba(0, 0, 0, 0.1)",
        border: "none"
      }
    };
    const clickableStyles = clickable ? {
      cursor: "pointer"
    } : {};
    return {
      ...variantStyles[variant],
      ...clickableStyles
    };
  }, [theme, variant, clickable]);
};
var useCardHeaderStyles = () => {
  const { theme } = useTheme_default();
  return (0, import_react39.useMemo)(
    () => ({
      padding: `${theme.spacing.unit * 2}px ${theme.spacing.unit * 2}px 0`,
      display: "flex",
      flexDirection: "column",
      gap: `${theme.spacing.unit}px`
    }),
    [theme]
  );
};
var useCardTitleStyles = () => {
  const { theme } = useTheme_default();
  return (0, import_react39.useMemo)(
    () => ({
      margin: 0
      // Typography component will handle color, fontSize, fontWeight, lineHeight
    }),
    [theme]
  );
};
var useCardDescriptionStyles = () => {
  const { theme } = useTheme_default();
  return (0, import_react39.useMemo)(
    () => ({
      margin: 0,
      color: theme.colors.text.secondary,
      fontSize: "0.875rem",
      lineHeight: 1.5
    }),
    [theme]
  );
};
var useCardActionStyles = () => {
  const { theme } = useTheme_default();
  return (0, import_react39.useMemo)(
    () => ({
      marginTop: `${theme.spacing.unit}px`
    }),
    [theme]
  );
};
var useCardContentStyles = () => {
  const { theme } = useTheme_default();
  return (0, import_react39.useMemo)(
    () => ({
      padding: `${theme.spacing.unit * 2}px`,
      flex: 1
    }),
    [theme]
  );
};
var useCardFooterStyles = () => {
  const { theme } = useTheme_default();
  return (0, import_react39.useMemo)(
    () => ({
      padding: `0 ${theme.spacing.unit * 2}px ${theme.spacing.unit * 2}px`,
      display: "flex",
      alignItems: "center",
      gap: `${theme.spacing.unit}px`
    }),
    [theme]
  );
};
var Card = (0, import_react39.forwardRef)(
  ({ variant = "default", clickable = false, children, className, style, ...rest }, ref) => {
    const cardStyle = useCardStyles(variant, clickable);
    return /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(
      "div",
      {
        ref,
        style: { ...cardStyle, ...style },
        className: (0, import_clsx13.default)(
          (0, import_browser38.withVendorCSSClassPrefix)("card"),
          (0, import_browser38.withVendorCSSClassPrefix)(`card-${variant}`),
          {
            [(0, import_browser38.withVendorCSSClassPrefix)("card-clickable")]: clickable
          },
          className
        ),
        ...rest,
        children
      }
    );
  }
);
var CardHeader = (0, import_react39.forwardRef)(({ children, className, style, ...rest }, ref) => {
  const headerStyle = useCardHeaderStyles();
  return /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(
    "div",
    {
      ref,
      style: { ...headerStyle, ...style },
      className: (0, import_clsx13.default)((0, import_browser38.withVendorCSSClassPrefix)("card-header"), className),
      ...rest,
      children
    }
  );
});
var CardTitle = (0, import_react39.forwardRef)(
  ({ children, level = 3, className, style, ...rest }, ref) => {
    const titleStyle = useCardTitleStyles();
    const getVariantFromLevel = (level2) => {
      switch (level2) {
        case 1:
          return "h1";
        case 2:
          return "h2";
        case 3:
          return "h3";
        case 4:
          return "h4";
        case 5:
          return "h5";
        case 6:
          return "h6";
        default:
          return "h3";
      }
    };
    const getComponentFromLevel = (level2) => {
      switch (level2) {
        case 1:
          return "h1";
        case 2:
          return "h2";
        case 3:
          return "h3";
        case 4:
          return "h4";
        case 5:
          return "h5";
        case 6:
          return "h6";
        default:
          return "h3";
      }
    };
    const { color, ...filteredRest } = rest;
    return /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(
      Typography_default,
      {
        component: getComponentFromLevel(level),
        variant: getVariantFromLevel(level),
        style: { ...titleStyle, ...style },
        className: (0, import_clsx13.default)((0, import_browser38.withVendorCSSClassPrefix)("card-title"), className),
        fontWeight: 600,
        ...filteredRest,
        children
      }
    );
  }
);
var CardDescription = (0, import_react39.forwardRef)(
  ({ children, className, style, ...rest }, ref) => {
    const descriptionStyle = useCardDescriptionStyles();
    const { color, ...filteredRest } = rest;
    return /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(
      Typography_default,
      {
        component: "p",
        variant: "body2",
        color: "textSecondary",
        style: { ...descriptionStyle, ...style },
        className: (0, import_clsx13.default)((0, import_browser38.withVendorCSSClassPrefix)("card-description"), className),
        ...filteredRest,
        children
      }
    );
  }
);
var CardAction = (0, import_react39.forwardRef)(({ children, className, style, ...rest }, ref) => {
  const actionStyle = useCardActionStyles();
  return /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(
    "div",
    {
      ref,
      style: { ...actionStyle, ...style },
      className: (0, import_clsx13.default)((0, import_browser38.withVendorCSSClassPrefix)("card-action"), className),
      ...rest,
      children
    }
  );
});
var CardContent = (0, import_react39.forwardRef)(({ children, className, style, ...rest }, ref) => {
  const contentStyle = useCardContentStyles();
  return /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(
    "div",
    {
      ref,
      style: { ...contentStyle, ...style },
      className: (0, import_clsx13.default)((0, import_browser38.withVendorCSSClassPrefix)("card-content"), className),
      ...rest,
      children
    }
  );
});
var CardFooter = (0, import_react39.forwardRef)(({ children, className, style, ...rest }, ref) => {
  const footerStyle = useCardFooterStyles();
  return /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(
    "div",
    {
      ref,
      style: { ...footerStyle, ...style },
      className: (0, import_clsx13.default)((0, import_browser38.withVendorCSSClassPrefix)("card-footer"), className),
      ...rest,
      children
    }
  );
});
Card.displayName = "Card";
CardHeader.displayName = "Card.Header";
CardTitle.displayName = "Card.Title";
CardDescription.displayName = "Card.Description";
CardAction.displayName = "Card.Action";
CardContent.displayName = "Card.Content";
CardFooter.displayName = "Card.Footer";
Card.Header = CardHeader;
Card.Title = CardTitle;
Card.Description = CardDescription;
Card.Action = CardAction;
Card.Content = CardContent;
Card.Footer = CardFooter;
var Card_default = Card;

// src/components/primitives/Divider/Divider.tsx
var import_browser39 = require("@asgardeo/browser");
var import_clsx14 = require("clsx");
var import_react40 = require("react");
var import_jsx_runtime51 = require("react/jsx-runtime");
var useStyles = (orientation, variant, color, hasChildren) => {
  const { theme } = useTheme_default();
  return (0, import_react40.useMemo)(() => {
    const baseColor = color || theme.colors.border;
    const borderStyle = variant === "solid" ? "solid" : variant === "dashed" ? "dashed" : "dotted";
    const styles = `
      .${(0, import_browser39.withVendorCSSClassPrefix)("divider")} {
        margin: calc(${theme.vars.spacing.unit} * 2) 0;
      }

      .${(0, import_browser39.withVendorCSSClassPrefix)("divider--vertical")} {
        display: inline-block;
        height: 100%;
        min-height: calc(${theme.vars.spacing.unit} * 2);
        width: 1px;
        border-left: 1px ${borderStyle} ${baseColor};
        margin: 0 calc(${theme.vars.spacing.unit} * 1);
      }

      .${(0, import_browser39.withVendorCSSClassPrefix)("divider--horizontal")} {
        display: flex;
        align-items: center;
        width: 100%;
      }

      .${(0, import_browser39.withVendorCSSClassPrefix)("divider--horizontal")}:not(.${(0, import_browser39.withVendorCSSClassPrefix)("divider--with-text")}) {
        height: 1px;
        border-top: 1px ${borderStyle} ${baseColor};
      }

      .${(0, import_browser39.withVendorCSSClassPrefix)("divider__line")} {
        flex: 1;
        height: 1px;
        border-top: 1px ${borderStyle} ${baseColor};
      }

      .${(0, import_browser39.withVendorCSSClassPrefix)("divider__text")} {
        background-color: ${theme.vars.colors.background.surface};
        padding: 0 calc(${theme.vars.spacing.unit} * 1);
        white-space: nowrap;
      }
    `;
    return styles;
  }, [orientation, variant, color, hasChildren, theme]);
};
var Divider = ({
  orientation = "horizontal",
  variant = "solid",
  children,
  color,
  className,
  style,
  ...rest
}) => {
  const styles = useStyles(orientation, variant, color, !!children);
  if (orientation === "vertical") {
    return /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)(import_jsx_runtime51.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("style", { children: styles }),
      /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(
        "div",
        {
          className: (0, import_clsx14.clsx)(
            (0, import_browser39.withVendorCSSClassPrefix)("divider"),
            (0, import_browser39.withVendorCSSClassPrefix)("divider--vertical"),
            className
          ),
          style,
          role: "separator",
          "aria-orientation": "vertical",
          ...rest
        }
      )
    ] });
  }
  if (children) {
    return /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)(import_jsx_runtime51.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("style", { children: styles }),
      /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)(
        "div",
        {
          className: (0, import_clsx14.clsx)(
            (0, import_browser39.withVendorCSSClassPrefix)("divider"),
            (0, import_browser39.withVendorCSSClassPrefix)("divider--horizontal"),
            (0, import_browser39.withVendorCSSClassPrefix)("divider--with-text"),
            className
          ),
          style,
          role: "separator",
          "aria-orientation": "horizontal",
          ...rest,
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("div", { className: (0, import_browser39.withVendorCSSClassPrefix)("divider__line") }),
            /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(
              Typography_default,
              {
                variant: "body2",
                color: "textSecondary",
                className: (0, import_browser39.withVendorCSSClassPrefix)("divider__text"),
                inline: true,
                children
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("div", { className: (0, import_browser39.withVendorCSSClassPrefix)("divider__line") })
          ]
        }
      )
    ] });
  }
  return /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)(import_jsx_runtime51.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("style", { children: styles }),
    /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(
      "div",
      {
        className: (0, import_clsx14.clsx)(
          (0, import_browser39.withVendorCSSClassPrefix)("divider"),
          (0, import_browser39.withVendorCSSClassPrefix)("divider--horizontal"),
          className
        ),
        style,
        role: "separator",
        "aria-orientation": "horizontal",
        ...rest
      }
    )
  ] });
};
var Divider_default = Divider;

// src/components/primitives/Logo/Logo.tsx
var import_clsx15 = require("clsx");
var import_browser40 = require("@asgardeo/browser");
var import_jsx_runtime52 = require("react/jsx-runtime");
var Logo = ({ className, src, alt, title, size = "medium", style }) => {
  const { theme } = useTheme_default();
  const logoConfig = theme.images?.logo;
  const logoSrc = src || logoConfig?.url;
  const logoAlt = alt || logoConfig?.alt || "Logo";
  const logoTitle = title || logoConfig?.title;
  const logoClasses = (0, import_clsx15.clsx)((0, import_browser40.withVendorCSSClassPrefix)("logo"), (0, import_browser40.withVendorCSSClassPrefix)(`logo--${size}`), className);
  const sizeStyles = {
    small: {
      height: "32px",
      maxWidth: "120px"
    },
    medium: {
      height: "48px",
      maxWidth: "180px"
    },
    large: {
      height: "64px",
      maxWidth: "240px"
    }
  };
  const defaultStyles = {
    width: "auto",
    objectFit: "contain",
    ...sizeStyles[size],
    ...style
  };
  if (!logoSrc) {
    return null;
  }
  return /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("img", { src: logoSrc, alt: logoAlt, title: logoTitle, className: logoClasses, style: defaultStyles });
};
var Logo_default = Logo;

// src/components/presentation/SignIn/BaseSignIn.tsx
var import_jsx_runtime53 = require("react/jsx-runtime");
var base64urlToArrayBuffer = (base64url) => {
  const padding = "=".repeat((4 - base64url.length % 4) % 4);
  const base64 = base64url.replace(/-/g, "+").replace(/_/g, "/") + padding;
  const binaryString = atob(base64);
  const bytes = new Uint8Array(binaryString.length);
  for (let i = 0; i < binaryString.length; i++) {
    bytes[i] = binaryString.charCodeAt(i);
  }
  return bytes.buffer;
};
var arrayBufferToBase64url = (buffer) => {
  const bytes = new Uint8Array(buffer);
  let binary = "";
  for (let i = 0; i < bytes.byteLength; i++) {
    binary += String.fromCharCode(bytes[i]);
  }
  return btoa(binary).replace(/\+/g, "-").replace(/\//g, "_").replace(/=/g, "");
};
var handleWebAuthnAuthentication = async (challengeData) => {
  if (!window.navigator.credentials || !window.navigator.credentials.get) {
    throw new Error(
      "WebAuthn is not supported in this browser. Please use a modern browser or try a different authentication method."
    );
  }
  if (window.location.protocol !== "https:" && window.location.hostname !== "localhost") {
    throw new Error(
      "Passkey authentication requires a secure connection (HTTPS). Please ensure you are accessing this site over HTTPS."
    );
  }
  try {
    const decodedChallenge = JSON.parse(atob(challengeData));
    const { publicKeyCredentialRequestOptions } = decodedChallenge;
    const currentDomain = window.location.hostname;
    const challengeRpId = publicKeyCredentialRequestOptions.rpId;
    let rpIdToUse = challengeRpId;
    if (challengeRpId && !currentDomain.endsWith(challengeRpId) && challengeRpId !== currentDomain) {
      console.warn(`RP ID mismatch detected. Challenge RP ID: ${challengeRpId}, Current domain: ${currentDomain}`);
      rpIdToUse = currentDomain;
    }
    const adjustedOptions = {
      ...publicKeyCredentialRequestOptions,
      rpId: rpIdToUse,
      challenge: base64urlToArrayBuffer(publicKeyCredentialRequestOptions.challenge),
      // Convert user handle if present
      ...publicKeyCredentialRequestOptions.userVerification && {
        userVerification: publicKeyCredentialRequestOptions.userVerification
      },
      // Convert allowCredentials if present
      ...publicKeyCredentialRequestOptions.allowCredentials && {
        allowCredentials: publicKeyCredentialRequestOptions.allowCredentials.map((cred) => ({
          ...cred,
          id: base64urlToArrayBuffer(cred.id)
        }))
      }
    };
    const credential = await navigator.credentials.get({
      publicKey: adjustedOptions
    });
    if (!credential) {
      throw new Error("No credential returned from WebAuthn");
    }
    const authData = credential.response;
    const tokenResponse = {
      requestId: decodedChallenge.requestId,
      credential: {
        id: credential.id,
        rawId: arrayBufferToBase64url(credential.rawId),
        response: {
          authenticatorData: arrayBufferToBase64url(authData.authenticatorData),
          clientDataJSON: arrayBufferToBase64url(authData.clientDataJSON),
          signature: arrayBufferToBase64url(authData.signature),
          ...authData.userHandle && {
            userHandle: arrayBufferToBase64url(authData.userHandle)
          }
        },
        type: credential.type
      }
    };
    return JSON.stringify(tokenResponse);
  } catch (error) {
    console.error("WebAuthn authentication failed:", error);
    if (error instanceof Error) {
      if (error.name === "NotAllowedError") {
        throw new Error("Passkey authentication was cancelled or timed out. Please try again.");
      } else if (error.name === "SecurityError") {
        if (error.message.includes("relying party ID") || error.message.includes("RP ID")) {
          throw new Error(
            "Domain mismatch error. The passkey was registered for a different domain. Please contact support or try a different authentication method."
          );
        } else {
          throw new Error(
            "Passkey authentication failed. Please ensure you are using HTTPS and that your browser supports passkeys."
          );
        }
      } else if (error.name === "InvalidStateError") {
        throw new Error(
          "No valid passkey found for this account. Please register a passkey first or use a different authentication method."
        );
      } else if (error.name === "NotSupportedError") {
        throw new Error(
          "Passkey authentication is not supported on this device or browser. Please use a different authentication method."
        );
      } else if (error.name === "NetworkError") {
        throw new Error("Network error during passkey authentication. Please check your connection and try again.");
      } else if (error.name === "UnknownError") {
        throw new Error(
          "An unknown error occurred during passkey authentication. Please try again or use a different authentication method."
        );
      }
    }
    throw new Error(`Passkey authentication failed: ${error instanceof Error ? error.message : "Unknown error"}`);
  }
};
var isPasskeyAuthenticator = (authenticator) => authenticator.authenticatorId === import_browser41.ApplicationNativeAuthenticationConstants.SupportedAuthenticators.Passkey && authenticator.metadata?.promptType === import_browser41.EmbeddedSignInFlowAuthenticatorPromptType.InternalPrompt && authenticator.metadata?.additionalData?.challengeData;
var useStyles2 = () => {
  const { theme } = useTheme_default();
  return (0, import_react41.useMemo)(
    () => ({
      card: {
        gap: `calc(${theme.vars.spacing.unit} * 2)`,
        minWidth: "420px"
      },
      header: {
        gap: 0
      },
      subtitle: {
        marginTop: `calc(${theme.vars.spacing.unit} * 1)`
      },
      messagesContainer: {
        marginTop: `calc(${theme.vars.spacing.unit} * 2)`
      },
      messageItem: {
        marginBottom: `calc(${theme.vars.spacing.unit} * 1)`
      },
      errorContainer: {
        marginBottom: `calc(${theme.vars.spacing.unit} * 2)`
      },
      contentContainer: {
        display: "flex",
        flexDirection: "column",
        gap: `calc(${theme.vars.spacing.unit} * 2)`
      },
      loadingContainer: {
        display: "flex",
        flexDirection: "column",
        alignItems: "center",
        padding: `calc(${theme.vars.spacing.unit} * 4)`
      },
      loadingText: {
        marginTop: `calc(${theme.vars.spacing.unit} * 2)`
      },
      divider: {
        margin: `calc(${theme.vars.spacing.unit} * 1) 0`
      },
      logoContainer: {
        display: "flex",
        flexDirection: "column",
        alignItems: "center",
        marginBottom: `calc(${theme.vars.spacing.unit} * 3)`
      },
      centeredContainer: {
        textAlign: "center",
        padding: `calc(${theme.vars.spacing.unit} * 4)`
      },
      passkeyContainer: {
        marginBottom: `calc(${theme.vars.spacing.unit} * 2)`
      },
      passkeyText: {
        marginTop: `calc(${theme.vars.spacing.unit} * 1)`,
        color: theme.vars.colors.text.secondary
      }
    }),
    [theme.vars.spacing.unit, theme.vars.colors.text.secondary]
  );
};
var BaseSignIn = (props) => {
  const { theme } = useTheme_default();
  const styles = useStyles2();
  return /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { children: [
    /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("div", { style: styles.logoContainer, children: /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Logo_default, { size: "large" }) }),
    /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(FlowProvider_default, { children: /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(BaseSignInContent, { ...props }) })
  ] });
};
var BaseSignInContent = ({
  afterSignInUrl,
  onInitialize,
  isLoading: externalIsLoading,
  onSubmit,
  onSuccess,
  onError,
  onFlowChange,
  className = "",
  inputClassName = "",
  buttonClassName = "",
  errorClassName = "",
  messageClassName = "",
  size = "medium",
  variant = "outlined"
}) => {
  const { theme } = useTheme_default();
  const { t } = useTranslation_default();
  const { subtitle: flowSubtitle, title: flowTitle, messages: flowMessages } = useFlow_default();
  const styles = useStyles2();
  const [isSignInInitializationRequestLoading, setIsSignInInitializationRequestLoading] = (0, import_react41.useState)(false);
  const [isInitialized, setIsInitialized] = (0, import_react41.useState)(false);
  const [currentFlow, setCurrentFlow] = (0, import_react41.useState)(null);
  const [currentAuthenticator, setCurrentAuthenticator] = (0, import_react41.useState)(null);
  const [error, setError] = (0, import_react41.useState)(null);
  const [messages, setMessages] = (0, import_react41.useState)([]);
  const isLoading = externalIsLoading || isSignInInitializationRequestLoading;
  const reRenderCheckRef = (0, import_react41.useRef)(false);
  const formFields = currentAuthenticator?.metadata?.params?.map((param) => ({
    name: param.param,
    required: currentAuthenticator.requiredParams.includes(param.param),
    initialValue: "",
    validator: (value) => {
      if (currentAuthenticator.requiredParams.includes(param.param) && (!value || value.trim() === "")) {
        return t("field.required");
      }
      return null;
    }
  })) || [];
  const form = useForm({
    initialValues: {},
    fields: formFields,
    validateOnBlur: true,
    validateOnChange: false,
    requiredMessage: t("field.required")
  });
  const {
    values: formValues,
    touched: touchedFields,
    errors: formErrors,
    isValid: isFormValid,
    setValue: setFormValue,
    setTouched: setFormTouched,
    clearErrors: clearFormErrors,
    validateField: validateFormField,
    validateForm,
    touchAllFields,
    reset: resetForm
  } = form;
  const setupFormFields = (0, import_react41.useCallback)(
    (authenticator) => {
      const initialValues = {};
      authenticator.metadata?.params?.forEach((param) => {
        initialValues[param.param] = "";
      });
      resetForm();
      Object.keys(initialValues).forEach((key) => {
        setFormValue(key, initialValues[key]);
      });
    },
    [resetForm, setFormValue]
  );
  const markAllFieldsAsTouched = () => {
    touchAllFields();
  };
  const handleRedirectionIfNeeded = (response) => {
    if (response && "nextStep" in response && response.nextStep && response.nextStep.stepType === import_browser41.EmbeddedSignInFlowStepType.AuthenticatorPrompt && response.nextStep.authenticators && response.nextStep.authenticators.length === 1) {
      const responseAuthenticator = response.nextStep.authenticators[0];
      if (responseAuthenticator.metadata?.promptType === import_browser41.EmbeddedSignInFlowAuthenticatorPromptType.RedirectionPrompt && responseAuthenticator.metadata?.additionalData?.redirectUrl) {
        const redirectUrl = responseAuthenticator.metadata?.additionalData?.redirectUrl;
        const popup = window.open(redirectUrl, "oauth_popup", "width=500,height=600,scrollbars=yes,resizable=yes");
        if (!popup) {
          console.error("Failed to open popup window");
          return false;
        }
        const messageHandler = async function messageEventHandler(event) {
          if (event.source !== popup) {
            if (event.source !== window && event.source !== window.parent) {
            }
            return;
          }
          const expectedOrigin = afterSignInUrl ? new URL(afterSignInUrl).origin : window.location.origin;
          if (event.origin !== expectedOrigin && event.origin !== window.location.origin) {
            return;
          }
          const { code, state } = event.data;
          if (code && state) {
            const payload = {
              flowId: currentFlow.flowId,
              selectedAuthenticator: {
                authenticatorId: responseAuthenticator.authenticatorId,
                params: {
                  code,
                  state
                }
              }
            };
            await onSubmit(payload, {
              method: currentFlow?.links[0].method,
              url: currentFlow?.links[0].href
            });
            popup.close();
            cleanup();
          } else {
          }
        };
        const cleanup = () => {
          window.removeEventListener("message", messageHandler);
          if (popupMonitor) {
            clearInterval(popupMonitor);
          }
        };
        window.addEventListener("message", messageHandler);
        let hasProcessedCallback = false;
        const popupMonitor = setInterval(async () => {
          try {
            if (popup.closed) {
              cleanup();
              return;
            }
            if (hasProcessedCallback) {
              return;
            }
            try {
              const popupUrl = popup.location.href;
              if (popupUrl && (popupUrl.includes("code=") || popupUrl.includes("error="))) {
                hasProcessedCallback = true;
                const url = new URL(popupUrl);
                const code = url.searchParams.get("code");
                const state = url.searchParams.get("state");
                const error2 = url.searchParams.get("error");
                if (error2) {
                  console.error("OAuth error:", error2);
                  popup.close();
                  cleanup();
                  return;
                }
                if (code && state) {
                  const payload = {
                    flowId: currentFlow.flowId,
                    selectedAuthenticator: {
                      authenticatorId: responseAuthenticator.authenticatorId,
                      params: {
                        code,
                        state
                      }
                    }
                  };
                  const response2 = await onSubmit(payload, {
                    method: currentFlow?.links[0].method,
                    url: currentFlow?.links[0].href
                  });
                  popup.close();
                  onFlowChange?.(response2);
                  if (response2?.flowStatus === import_browser41.EmbeddedSignInFlowStatus.SuccessCompleted) {
                    onSuccess?.(response2.authData);
                  }
                }
              }
            } catch (e) {
            }
          } catch (e) {
            console.error("Error monitoring popup:", e);
          }
        }, 1e3);
        return true;
      }
    }
    return false;
  };
  const handleSubmit = async (submittedValues) => {
    if (!currentFlow || !currentAuthenticator) {
      return;
    }
    touchAllFields();
    const validation = validateForm();
    if (!validation.isValid) {
      return;
    }
    setIsSignInInitializationRequestLoading(true);
    setError(null);
    setMessages([]);
    try {
      const payload = {
        flowId: currentFlow.flowId,
        selectedAuthenticator: {
          authenticatorId: currentAuthenticator.authenticatorId,
          params: submittedValues
        }
      };
      const response = await onSubmit(payload, {
        method: currentFlow?.links[0].method,
        url: currentFlow?.links[0].href
      });
      onFlowChange?.(response);
      if (response?.flowStatus === import_browser41.EmbeddedSignInFlowStatus.SuccessCompleted) {
        onSuccess?.(response.authData);
        return;
      }
      if (response?.flowStatus === import_browser41.EmbeddedSignInFlowStatus.FailCompleted || response?.flowStatus === import_browser41.EmbeddedSignInFlowStatus.FailIncomplete) {
        setError(t("errors.sign.in.flow.completion.failure"));
        return;
      }
      if (handleRedirectionIfNeeded(response)) {
        return;
      }
      if (response && "flowId" in response && "nextStep" in response) {
        const nextStepResponse = response;
        setCurrentFlow(nextStepResponse);
        if (nextStepResponse.nextStep?.authenticators?.length > 0) {
          if (nextStepResponse.nextStep.stepType === import_browser41.EmbeddedSignInFlowStepType.MultiOptionsPrompt && nextStepResponse.nextStep.authenticators.length > 1) {
            setCurrentAuthenticator(null);
          } else {
            const nextAuthenticator = nextStepResponse.nextStep.authenticators[0];
            setCurrentAuthenticator(nextAuthenticator);
            setupFormFields(nextAuthenticator);
          }
        }
        if (nextStepResponse.nextStep?.messages) {
          setMessages(
            nextStepResponse.nextStep.messages.map((msg) => ({
              type: msg.type || "INFO",
              message: msg.message || ""
            }))
          );
        }
      }
    } catch (err) {
      const errorMessage = err instanceof import_browser41.AsgardeoAPIError ? err.message : t("errors.sign.in.flow.failure");
      setError(errorMessage);
      onError?.(err);
    } finally {
      setIsSignInInitializationRequestLoading(false);
    }
  };
  const handleAuthenticatorSelection = async (authenticator, formData) => {
    if (!currentFlow) {
      return;
    }
    if (formData) {
      touchAllFields();
    }
    setIsSignInInitializationRequestLoading(true);
    setError(null);
    setMessages([]);
    try {
      if (isPasskeyAuthenticator(authenticator)) {
        try {
          const challengeData = authenticator.metadata?.additionalData?.challengeData;
          if (!challengeData) {
            throw new Error("Missing challenge data for passkey authentication");
          }
          const tokenResponse = await handleWebAuthnAuthentication(challengeData);
          const payload = {
            flowId: currentFlow.flowId,
            selectedAuthenticator: {
              authenticatorId: authenticator.authenticatorId,
              params: {
                tokenResponse
              }
            }
          };
          const response = await onSubmit(payload, {
            method: currentFlow?.links[0].method,
            url: currentFlow?.links[0].href
          });
          onFlowChange?.(response);
          if (response?.flowStatus === import_browser41.EmbeddedSignInFlowStatus.SuccessCompleted) {
            onSuccess?.(response.authData);
            return;
          }
          if (response?.flowStatus === import_browser41.EmbeddedSignInFlowStatus.FailCompleted || response?.flowStatus === import_browser41.EmbeddedSignInFlowStatus.FailIncomplete) {
            setError(t("errors.sign.in.flow.passkeys.completion.failure"));
            return;
          }
          if (response && "flowId" in response && "nextStep" in response) {
            const nextStepResponse = response;
            setCurrentFlow(nextStepResponse);
            if (nextStepResponse.nextStep?.authenticators?.length > 0) {
              if (nextStepResponse.nextStep.stepType === import_browser41.EmbeddedSignInFlowStepType.MultiOptionsPrompt && nextStepResponse.nextStep.authenticators.length > 1) {
                setCurrentAuthenticator(null);
              } else {
                const nextAuthenticator = nextStepResponse.nextStep.authenticators[0];
                if (isPasskeyAuthenticator(nextAuthenticator)) {
                  handleAuthenticatorSelection(nextAuthenticator);
                  return;
                }
                setCurrentAuthenticator(nextAuthenticator);
                setupFormFields(nextAuthenticator);
              }
            }
            if (nextStepResponse.nextStep?.messages) {
              setMessages(
                nextStepResponse.nextStep.messages.map((msg) => ({
                  type: msg.type || "INFO",
                  message: msg.message || ""
                }))
              );
            }
          }
        } catch (passkeyError) {
          console.error("Passkey authentication error:", passkeyError);
          let errorMessage = passkeyError instanceof Error ? passkeyError.message : t("errors.sign.in.flow.passkeys.failure");
          if (passkeyError instanceof Error && passkeyError.message.includes("security")) {
            errorMessage += " This may be due to browser security settings, an insecure connection, or device restrictions.";
          }
          setError(errorMessage);
        }
      } else if (authenticator.metadata?.promptType === import_browser41.EmbeddedSignInFlowAuthenticatorPromptType.RedirectionPrompt) {
        const payload = {
          flowId: currentFlow.flowId,
          selectedAuthenticator: {
            authenticatorId: authenticator.authenticatorId,
            params: {}
          }
        };
        const response = await onSubmit(payload, {
          method: currentFlow?.links[0].method,
          url: currentFlow?.links[0].href
        });
        onFlowChange?.(response);
        if (response?.flowStatus === import_browser41.EmbeddedSignInFlowStatus.SuccessCompleted) {
          onSuccess?.(response.authData);
          return;
        }
        if (handleRedirectionIfNeeded(response)) {
        }
      } else if (formData) {
        const validation = validateForm();
        if (!validation.isValid) {
          return;
        }
        const payload = {
          flowId: currentFlow.flowId,
          selectedAuthenticator: {
            authenticatorId: authenticator.authenticatorId,
            params: formData
          }
        };
        const response = await onSubmit(payload, {
          method: currentFlow?.links[0].method,
          url: currentFlow?.links[0].href
        });
        onFlowChange?.(response);
        if (response?.flowStatus === import_browser41.EmbeddedSignInFlowStatus.SuccessCompleted) {
          onSuccess?.(response.authData);
          return;
        }
        if (response?.flowStatus === import_browser41.EmbeddedSignInFlowStatus.FailCompleted || response?.flowStatus === import_browser41.EmbeddedSignInFlowStatus.FailIncomplete) {
          setError("Authentication failed. Please check your credentials and try again.");
          return;
        }
        if (handleRedirectionIfNeeded(response)) {
          return;
        }
        if (response && "flowId" in response && "nextStep" in response) {
          const nextStepResponse = response;
          setCurrentFlow(nextStepResponse);
          if (nextStepResponse.nextStep?.authenticators?.length > 0) {
            if (nextStepResponse.nextStep.stepType === import_browser41.EmbeddedSignInFlowStepType.MultiOptionsPrompt && nextStepResponse.nextStep.authenticators.length > 1) {
              setCurrentAuthenticator(null);
            } else {
              const nextAuthenticator = nextStepResponse.nextStep.authenticators[0];
              if (isPasskeyAuthenticator(nextAuthenticator)) {
                handleAuthenticatorSelection(nextAuthenticator);
                return;
              }
              setCurrentAuthenticator(nextAuthenticator);
              setupFormFields(nextAuthenticator);
            }
          }
          if (nextStepResponse.nextStep?.messages) {
            setMessages(
              nextStepResponse.nextStep.messages.map((msg) => ({
                type: msg.type || "INFO",
                message: msg.message || ""
              }))
            );
          }
        }
      } else {
        const hasParams = authenticator.metadata?.params && authenticator.metadata.params.length > 0;
        if (!hasParams) {
          const payload = {
            flowId: currentFlow.flowId,
            selectedAuthenticator: {
              authenticatorId: authenticator.authenticatorId,
              params: {}
            }
          };
          const response = await onSubmit(payload, {
            method: currentFlow?.links[0].method,
            url: currentFlow?.links[0].href
          });
          onFlowChange?.(response);
          if (response?.flowStatus === import_browser41.EmbeddedSignInFlowStatus.SuccessCompleted) {
            onSuccess?.(response.authData);
            return;
          }
          if (response?.flowStatus === import_browser41.EmbeddedSignInFlowStatus.FailCompleted || response?.flowStatus === import_browser41.EmbeddedSignInFlowStatus.FailIncomplete) {
            setError("Authentication failed. Please try again.");
            return;
          }
          if (handleRedirectionIfNeeded(response)) {
            return;
          }
          if (response && "flowId" in response && "nextStep" in response) {
            const nextStepResponse = response;
            setCurrentFlow(nextStepResponse);
            if (nextStepResponse.nextStep?.authenticators?.length > 0) {
              if (nextStepResponse.nextStep.stepType === import_browser41.EmbeddedSignInFlowStepType.MultiOptionsPrompt && nextStepResponse.nextStep.authenticators.length > 1) {
                setCurrentAuthenticator(null);
              } else {
                const nextAuthenticator = nextStepResponse.nextStep.authenticators[0];
                if (isPasskeyAuthenticator(nextAuthenticator)) {
                  handleAuthenticatorSelection(nextAuthenticator);
                  return;
                }
                setCurrentAuthenticator(nextAuthenticator);
                setupFormFields(nextAuthenticator);
              }
            }
            if (nextStepResponse.nextStep?.messages) {
              setMessages(
                nextStepResponse.nextStep.messages.map((msg) => ({
                  type: msg.type || "INFO",
                  message: msg.message || ""
                }))
              );
            }
          }
        } else {
          setCurrentAuthenticator(authenticator);
          setupFormFields(authenticator);
        }
      }
    } catch (err) {
      const errorMessage = err instanceof import_browser41.AsgardeoAPIError ? err?.message : "Authenticator selection failed";
      setError(errorMessage);
      onError?.(err);
    } finally {
      setIsSignInInitializationRequestLoading(false);
    }
  };
  const handleInputChange = (param, value) => {
    setFormValue(param, value);
    setFormTouched(param, true);
  };
  const hasMultipleOptions = (0, import_react41.useCallback)(
    () => currentFlow && "nextStep" in currentFlow && currentFlow.nextStep?.stepType === import_browser41.EmbeddedSignInFlowStepType.MultiOptionsPrompt && currentFlow.nextStep?.authenticators && currentFlow.nextStep.authenticators.length > 1,
    [currentFlow]
  );
  const getAvailableAuthenticators = (0, import_react41.useCallback)(() => {
    if (!currentFlow || !("nextStep" in currentFlow) || !currentFlow.nextStep?.authenticators) {
      return [];
    }
    return currentFlow.nextStep.authenticators;
  }, [currentFlow]);
  const containerClasses = (0, import_clsx16.clsx)(
    [
      (0, import_browser41.withVendorCSSClassPrefix)("signin"),
      (0, import_browser41.withVendorCSSClassPrefix)(`signin--${size}`),
      (0, import_browser41.withVendorCSSClassPrefix)(`signin--${variant}`)
    ],
    className
  );
  const inputClasses = (0, import_clsx16.clsx)(
    [
      (0, import_browser41.withVendorCSSClassPrefix)("signin__input"),
      size === "small" && (0, import_browser41.withVendorCSSClassPrefix)("signin__input--small"),
      size === "large" && (0, import_browser41.withVendorCSSClassPrefix)("signin__input--large")
    ],
    inputClassName
  );
  const buttonClasses = (0, import_clsx16.clsx)(
    [
      (0, import_browser41.withVendorCSSClassPrefix)("signin__button"),
      size === "small" && (0, import_browser41.withVendorCSSClassPrefix)("signin__button--small"),
      size === "large" && (0, import_browser41.withVendorCSSClassPrefix)("signin__button--large")
    ],
    buttonClassName
  );
  const errorClasses = (0, import_clsx16.clsx)([(0, import_browser41.withVendorCSSClassPrefix)("signin__error")], errorClassName);
  const messageClasses = (0, import_clsx16.clsx)([(0, import_browser41.withVendorCSSClassPrefix)("signin__messages")], messageClassName);
  (0, import_react41.useEffect)(() => {
    if (isLoading) {
      return;
    }
    if (reRenderCheckRef.current) {
      return;
    }
    reRenderCheckRef.current = true;
    (async () => {
      setIsSignInInitializationRequestLoading(true);
      setError(null);
      try {
        const response = await onInitialize();
        setCurrentFlow(response);
        setIsInitialized(true);
        onFlowChange?.(response);
        if (response?.flowStatus === import_browser41.EmbeddedSignInFlowStatus.SuccessCompleted) {
          onSuccess?.(response.authData || {});
          return;
        }
        if (response?.nextStep?.authenticators?.length > 0) {
          if (response.nextStep.stepType === import_browser41.EmbeddedSignInFlowStepType.MultiOptionsPrompt && response.nextStep.authenticators.length > 1) {
            setCurrentAuthenticator(null);
          } else {
            const authenticator = response.nextStep.authenticators[0];
            setCurrentAuthenticator(authenticator);
            setupFormFields(authenticator);
          }
        }
        if (response && "nextStep" in response && response.nextStep && "messages" in response.nextStep) {
          const stepMessages = response.nextStep.messages || [];
          setMessages(
            stepMessages.map((msg) => ({
              type: msg.type || "INFO",
              message: msg.message || ""
            }))
          );
        }
      } catch (err) {
        const errorMessage = err instanceof import_browser41.AsgardeoAPIError ? err.message : t("errors.sign.in.initialization");
        setError(errorMessage);
        onError?.(err);
      } finally {
        setIsSignInInitializationRequestLoading(false);
      }
    })();
  }, [isLoading]);
  if (!isInitialized && isLoading) {
    return /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Card_default, { className: containerClasses, style: styles.card, variant, children: /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Card_default.Content, { children: /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { style: styles.loadingContainer, children: [
      /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Spinner_default, { size: "medium" }),
      /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Typography_default, { variant: "body1", style: styles.loadingText, children: t("messages.loading") })
    ] }) }) });
  }
  if (hasMultipleOptions() && !currentAuthenticator) {
    const availableAuthenticators = getAvailableAuthenticators();
    const userPromptAuthenticators = availableAuthenticators.filter(
      (auth) => auth.metadata?.promptType === import_browser41.EmbeddedSignInFlowAuthenticatorPromptType.UserPrompt || // Fallback: LOCAL authenticators with params are typically user prompts
      auth.idp === "LOCAL" && auth.metadata?.params && auth.metadata.params.length > 0
    );
    const optionAuthenticators = availableAuthenticators.filter((auth) => !userPromptAuthenticators.includes(auth));
    return /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)(Card_default, { className: containerClasses, style: styles.card, variant, children: [
      /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)(Card_default.Header, { style: styles.header, children: [
        /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Card_default.Title, { level: 2, children: flowTitle || t("signin.title") }),
        flowSubtitle && /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Typography_default, { variant: "body1", style: styles.subtitle, children: flowSubtitle || t("signin.subtitle") }),
        flowMessages && flowMessages.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("div", { style: styles.messagesContainer, children: flowMessages.map((flowMessage, index) => /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(
          Alert_default,
          {
            variant: flowMessage.type,
            style: styles.messageItem,
            className: messageClasses,
            children: /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Alert_default.Description, { children: flowMessage.message })
          },
          flowMessage.id || index
        )) }),
        messages.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("div", { style: styles.messagesContainer, children: messages.map((message, index) => {
          const variant2 = message.type.toLowerCase() === "error" ? "error" : message.type.toLowerCase() === "warning" ? "warning" : message.type.toLowerCase() === "success" ? "success" : "info";
          return /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Alert_default, { variant: variant2, style: styles.messageItem, className: messageClasses, children: /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Alert_default.Description, { children: message.message }) }, index);
        }) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)(Card_default.Content, { children: [
        error && /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)(Alert_default, { variant: "error", style: styles.errorContainer, className: errorClasses, children: [
          /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Alert_default.Title, { children: "Error" }),
          /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Alert_default.Description, { children: error })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { style: styles.contentContainer, children: [
          userPromptAuthenticators.map((authenticator, index) => /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { children: [
            index > 0 && /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Divider_default, { style: styles.divider, children: "OR" }),
            /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(
              "form",
              {
                onSubmit: (e) => {
                  e.preventDefault();
                  const formData = {};
                  authenticator.metadata?.params?.forEach((param) => {
                    formData[param.param] = formValues[param.param] || "";
                  });
                  handleAuthenticatorSelection(authenticator, formData);
                },
                children: createSignInOptionFromAuthenticator(
                  authenticator,
                  formValues,
                  touchedFields,
                  isLoading,
                  handleInputChange,
                  (auth, formData) => handleAuthenticatorSelection(auth, formData),
                  {
                    inputClassName: inputClasses,
                    buttonClassName: buttonClasses,
                    error
                  }
                )
              }
            )
          ] }, authenticator.authenticatorId)),
          userPromptAuthenticators.length > 0 && optionAuthenticators.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Divider_default, { style: styles.divider, children: "OR" }),
          optionAuthenticators.map((authenticator, index) => /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("div", { children: createSignInOptionFromAuthenticator(
            authenticator,
            formValues,
            touchedFields,
            isLoading,
            handleInputChange,
            (auth, formData) => handleAuthenticatorSelection(auth, formData),
            {
              inputClassName: inputClasses,
              buttonClassName: buttonClasses,
              error
            }
          ) }, authenticator.authenticatorId))
        ] })
      ] })
    ] });
  }
  if (!currentAuthenticator) {
    return /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Card_default, { className: containerClasses, variant, children: /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Card_default.Content, { children: error && /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)(Alert_default, { variant: "error", children: [
      /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Alert_default.Title, { children: t("errors.title") || "Error" }),
      /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Alert_default.Description, { children: error })
    ] }) }) });
  }
  if (isPasskeyAuthenticator(currentAuthenticator) && !isLoading) {
    (0, import_react41.useEffect)(() => {
      handleAuthenticatorSelection(currentAuthenticator);
    }, [currentAuthenticator]);
    return /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Card_default, { className: containerClasses, variant, children: /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Card_default.Content, { children: /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)("div", { style: styles.centeredContainer, children: [
      /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("div", { style: styles.passkeyContainer, children: /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Spinner_default, { size: "large" }) }),
      /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Typography_default, { variant: "body1", children: t("passkey.authenticating") || "Authenticating with passkey..." }),
      /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Typography_default, { variant: "body2", style: styles.passkeyText, children: t("passkey.instruction") || "Please use your fingerprint, face, or security key to authenticate." })
    ] }) }) });
  }
  return /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)(Card_default, { className: containerClasses, style: styles.card, variant, children: [
    /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)(Card_default.Header, { style: styles.header, children: [
      /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Card_default.Title, { level: 2, children: flowTitle || t("signin.title") }),
      /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Typography_default, { variant: "body1", style: styles.subtitle, children: flowSubtitle || t("signin.subtitle") }),
      flowMessages && flowMessages.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("div", { style: styles.messagesContainer, children: flowMessages.map((flowMessage, index) => /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(
        Alert_default,
        {
          variant: flowMessage.type,
          style: styles.messageItem,
          className: messageClasses,
          children: /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Alert_default.Description, { children: flowMessage.message })
        },
        flowMessage.id || index
      )) }),
      messages.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("div", { style: styles.messagesContainer, children: messages.map((message, index) => {
        const variant2 = message.type.toLowerCase() === "error" ? "error" : message.type.toLowerCase() === "warning" ? "warning" : message.type.toLowerCase() === "success" ? "success" : "info";
        return /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Alert_default, { variant: variant2, style: styles.messageItem, className: messageClasses, children: /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Alert_default.Description, { children: message.message }) }, index);
      }) })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)(Card_default.Content, { children: [
      error && /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)(Alert_default, { variant: "error", style: styles.errorContainer, className: errorClasses, children: [
        /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Alert_default.Title, { children: t("errors.title") }),
        /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Alert_default.Description, { children: error })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(
        "form",
        {
          onSubmit: (e) => {
            e.preventDefault();
            const formData = {};
            currentAuthenticator.metadata?.params?.forEach((param) => {
              formData[param.param] = formValues[param.param] || "";
            });
            handleSubmit(formData);
          },
          children: createSignInOptionFromAuthenticator(
            currentAuthenticator,
            formValues,
            touchedFields,
            isLoading,
            handleInputChange,
            (authenticator, formData) => handleSubmit(formData || formValues),
            {
              inputClassName: inputClasses,
              buttonClassName: buttonClasses,
              error
            }
          )
        }
      )
    ] })
  ] });
};
var BaseSignIn_default = BaseSignIn;

// src/components/presentation/SignIn/SignIn.tsx
var import_jsx_runtime54 = require("react/jsx-runtime");
var SignIn = ({ className, size = "medium", ...rest }) => {
  const { signIn, afterSignInUrl, isInitialized, isLoading } = useAsgardeo_default();
  const handleInitialize = async () => {
    return await signIn({ response_mode: "direct" });
  };
  const handleOnSubmit = async (payload, request) => {
    return await signIn(payload, request);
  };
  const handleSuccess = (authData) => {
    if (authData && afterSignInUrl) {
      const url = new URL(afterSignInUrl, window.location.origin);
      Object.entries(authData).forEach(([key, value]) => {
        if (value !== void 0 && value !== null) {
          url.searchParams.append(key, String(value));
        }
      });
      window.location.href = url.toString();
    }
  };
  return /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(
    BaseSignIn_default,
    {
      isLoading: isLoading || !isInitialized,
      afterSignInUrl,
      onInitialize: handleInitialize,
      onSubmit: handleOnSubmit,
      onSuccess: handleSuccess,
      className,
      size,
      ...rest
    }
  );
};
var SignIn_default = SignIn;

// src/components/presentation/SignUp/BaseSignUp.tsx
var import_browser49 = require("@asgardeo/browser");
var import_clsx17 = require("clsx");
var import_react42 = require("react");

// src/components/presentation/SignUp/options/SignUpOptionFactory.tsx
var import_browser48 = require("@asgardeo/browser");

// src/components/presentation/SignUp/options/CheckboxInput.tsx
var import_browser42 = require("@asgardeo/browser");
var CheckboxInput = ({
  component,
  formValues,
  touchedFields,
  formErrors,
  onInputChange,
  inputClassName
}) => {
  const config = component.config || {};
  const fieldName = config["identifier"] || config["name"] || component.id;
  const value = formValues[fieldName] || "";
  const error = touchedFields[fieldName] ? formErrors[fieldName] : void 0;
  return createField({
    type: import_browser42.FieldType.Checkbox,
    name: fieldName,
    label: config["label"] || "",
    placeholder: config["placeholder"] || "",
    required: config["required"] || false,
    value,
    error,
    onChange: (newValue) => onInputChange(fieldName, newValue),
    className: inputClassName
  });
};
var CheckboxInput_default = CheckboxInput;

// src/components/presentation/SignUp/options/DateInput.tsx
var import_browser43 = require("@asgardeo/browser");
var DateInput = ({
  component,
  formValues,
  touchedFields,
  formErrors,
  onInputChange,
  inputClassName
}) => {
  const config = component.config || {};
  const fieldName = config["identifier"] || config["name"] || component.id;
  const value = formValues[fieldName] || "";
  const error = touchedFields[fieldName] ? formErrors[fieldName] : void 0;
  return createField({
    type: import_browser43.FieldType.Date,
    name: fieldName,
    label: config["label"] || "",
    placeholder: config["placeholder"] || "",
    required: config["required"] || false,
    value,
    error,
    onChange: (newValue) => onInputChange(fieldName, newValue),
    className: inputClassName
  });
};
var DateInput_default = DateInput;

// src/components/presentation/SignUp/options/DividerComponent.tsx
var import_jsx_runtime55 = require("react/jsx-runtime");
var DividerComponent = ({ component }) => {
  const { theme } = useTheme_default();
  const config = component.config || {};
  const text = config["text"] || "";
  const variant = component.variant?.toLowerCase() || "horizontal";
  return /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(
    Divider_default,
    {
      orientation: variant === "vertical" ? "vertical" : "horizontal",
      style: { margin: `calc(${theme.vars.spacing.unit} * 2) 0` },
      children: text
    },
    component.id
  );
};
var DividerComponent_default = DividerComponent;

// src/components/presentation/SignUp/options/EmailInput.tsx
var import_browser44 = require("@asgardeo/browser");
var EmailInput = ({
  component,
  formValues,
  touchedFields,
  formErrors,
  onInputChange,
  inputClassName
}) => {
  const config = component.config || {};
  const fieldName = config["identifier"] || config["name"] || component.id;
  const value = formValues[fieldName] || "";
  const error = touchedFields[fieldName] ? formErrors[fieldName] : void 0;
  return createField({
    type: import_browser44.FieldType.Email,
    name: fieldName,
    label: config["label"] || "Email",
    placeholder: config["placeholder"] || "Enter your email",
    required: config["required"] || false,
    value,
    error,
    onChange: (newValue) => onInputChange(fieldName, newValue),
    className: inputClassName
  });
};
var EmailInput_default = EmailInput;

// src/components/presentation/SignUp/options/FormContainer.tsx
var import_jsx_runtime56 = require("react/jsx-runtime");
var FormContainer = (props) => {
  const { component } = props;
  if (component.components && component.components.length > 0) {
    const handleFormSubmit = (e) => {
      e.preventDefault();
      const submitButton = component.components?.find(
        (child) => child.type === "BUTTON" && (child.variant === "PRIMARY" || child.variant === "SECONDARY" || child.config?.["type"] === "submit")
      );
      if (submitButton && props.onSubmit) {
        props.onSubmit(submitButton, props.formValues);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("form", { onSubmit: handleFormSubmit, style: { display: "flex", flexDirection: "column" }, children: component.components.map(
      (childComponent, index) => createSignUpComponent({
        ...props,
        component: childComponent
      })
    ) }, component.id);
  }
  return /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("div", {}, component.id);
};
var FormContainer_default = FormContainer;

// src/components/presentation/SignUp/options/GoogleButton.tsx
var import_jsx_runtime57 = require("react/jsx-runtime");
var GoogleButton2 = ({
  component,
  isLoading,
  buttonClassName = "",
  size = "medium",
  onSubmit
}) => {
  const config = component.config || {};
  const buttonText = config["text"] || config["label"] || "Continue with Google";
  const handleClick = () => {
    if (onSubmit) {
      onSubmit(component, {});
    }
  };
  return /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
    Button_default,
    {
      type: "button",
      variant: "solid",
      color: "secondary",
      size,
      disabled: isLoading,
      onClick: handleClick,
      className: buttonClassName,
      style: { width: "100%" },
      startIcon: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("svg", { width: "18", height: "18", viewBox: "0 0 67.91 67.901", xmlns: "http://www.w3.org/2000/svg", children: /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("g", { transform: "translate(-0.001 -0.001)", children: [
        /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
          "path",
          {
            d: "M15.049,160.965l-2.364,8.824-8.639.183a34.011,34.011,0,0,1-.25-31.7h0l7.691,1.41,3.369,7.645a20.262,20.262,0,0,0,.19,13.642Z",
            transform: "translate(0 -119.93)",
            fill: "#fbbb00"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
          "path",
          {
            d: "M294.24,208.176A33.939,33.939,0,0,1,282.137,241h0l-9.687-.494-1.371-8.559a20.235,20.235,0,0,0,8.706-10.333H261.628V208.176Z",
            transform: "translate(-226.93 -180.567)",
            fill: "#518ef8"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
          "path",
          {
            d: "M81.668,328.8h0a33.962,33.962,0,0,1-51.161-10.387l11-9.006a20.192,20.192,0,0,0,29.1,10.338Z",
            transform: "translate(-26.463 -268.374)",
            fill: "#28b446"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
          "path",
          {
            d: "M80.451,7.816l-11,9A20.19,20.19,0,0,0,39.686,27.393l-11.06-9.055h0A33.959,33.959,0,0,1,80.451,7.816Z",
            transform: "translate(-24.828)",
            fill: "#f14336"
          }
        )
      ] }) }),
      children: buttonText
    }
  );
};
var GoogleButton_default2 = GoogleButton2;

// src/components/presentation/SignUp/options/ImageComponent.tsx
var import_jsx_runtime58 = require("react/jsx-runtime");
var ImageComponent = ({ component }) => {
  const { theme } = useTheme_default();
  const config = component.config || {};
  const src = config["src"] || "";
  const alt = config["alt"] || config["label"] || "Image";
  const variant = component.variant?.toLowerCase() || "image_block";
  const imageStyle = {
    maxWidth: "100%",
    height: "auto",
    display: "block",
    margin: variant === "image_block" ? "1rem auto" : "0",
    borderRadius: theme.vars.borderRadius.small
  };
  if (!src) {
    return null;
  }
  return /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("div", { style: { textAlign: "center" }, children: /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(
    "img",
    {
      src,
      alt,
      style: imageStyle,
      onError: (e) => {
        e.currentTarget.style.display = "none";
      }
    }
  ) }, component.id);
};
var ImageComponent_default = ImageComponent;

// src/components/presentation/SignUp/options/NumberInput.tsx
var import_browser45 = require("@asgardeo/browser");
var NumberInput = ({
  component,
  formValues,
  touchedFields,
  formErrors,
  onInputChange,
  inputClassName
}) => {
  const config = component.config || {};
  const fieldName = config["identifier"] || config["name"] || component.id;
  const value = formValues[fieldName] || "";
  const error = touchedFields[fieldName] ? formErrors[fieldName] : void 0;
  return createField({
    type: import_browser45.FieldType.Number,
    name: fieldName,
    label: config["label"] || "",
    placeholder: config["placeholder"] || "",
    required: config["required"] || false,
    value,
    error,
    onChange: (newValue) => onInputChange(fieldName, newValue),
    className: inputClassName
  });
};
var NumberInput_default = NumberInput;

// src/components/presentation/SignUp/options/PasswordInput.tsx
var import_browser46 = require("@asgardeo/browser");
var PasswordInput = ({
  component,
  formValues,
  touchedFields,
  formErrors,
  onInputChange,
  inputClassName
}) => {
  const config = component.config || {};
  const fieldName = config["identifier"] || config["name"] || component.id;
  const value = formValues[fieldName] || "";
  const error = touchedFields[fieldName] ? formErrors[fieldName] : void 0;
  const validations = config["validations"] || [];
  const validationHints = [];
  validations.forEach((validation) => {
    if (validation.name === "LengthValidator") {
      const minLength = validation.conditions?.find((c) => c.key === "min.length")?.value;
      const maxLength = validation.conditions?.find((c) => c.key === "max.length")?.value;
      if (minLength || maxLength) {
        validationHints.push(`Length: ${minLength || "0"}-${maxLength || "\u221E"} characters`);
      }
    } else if (validation.name === "UpperCaseValidator") {
      const minLength = validation.conditions?.find((c) => c.key === "min.length")?.value;
      if (minLength && parseInt(minLength, 10) > 0) {
        validationHints.push("Must contain uppercase letter(s)");
      }
    } else if (validation.name === "LowerCaseValidator") {
      const minLength = validation.conditions?.find((c) => c.key === "min.length")?.value;
      if (minLength && parseInt(minLength, 10) > 0) {
        validationHints.push("Must contain lowercase letter(s)");
      }
    } else if (validation.name === "NumeralValidator") {
      const minLength = validation.conditions?.find((c) => c.key === "min.length")?.value;
      if (minLength && parseInt(minLength, 10) > 0) {
        validationHints.push("Must contain number(s)");
      }
    } else if (validation.name === "SpecialCharacterValidator") {
      const minLength = validation.conditions?.find((c) => c.key === "min.length")?.value;
      if (minLength && parseInt(minLength, 10) > 0) {
        validationHints.push("Must contain special character(s)");
      }
    }
  });
  const hint = validationHints.length > 0 ? validationHints.join(", ") : config["hint"] || "";
  return createField({
    type: import_browser46.FieldType.Password,
    name: fieldName,
    label: config["label"] || "Password",
    placeholder: config["placeholder"] || "Enter your password",
    required: config["required"] || false,
    value,
    error,
    onChange: (newValue) => onInputChange(fieldName, newValue),
    className: inputClassName
  });
};
var PasswordInput_default = PasswordInput;

// src/components/presentation/SignUp/options/SubmitButton.tsx
var import_jsx_runtime59 = require("react/jsx-runtime");
var ButtonComponent = ({
  component,
  isLoading,
  isFormValid,
  buttonClassName,
  onSubmit,
  size = "medium"
}) => {
  const config = component.config || {};
  const buttonText = config["text"] || config["label"] || "Continue";
  const buttonType = config["type"] || "submit";
  const componentVariant = component.variant?.toUpperCase() || "PRIMARY";
  const getButtonProps = () => {
    switch (componentVariant) {
      case "PRIMARY":
        return { variant: "solid", color: "primary" };
      case "SECONDARY":
        return { variant: "solid", color: "secondary" };
      case "TEXT":
        return { variant: "text", color: "primary" };
      case "SOCIAL":
        return { variant: "outline", color: "primary" };
      default:
        return { variant: "solid", color: "primary" };
    }
  };
  const { variant, color } = getButtonProps();
  const handleClick = () => {
    if (onSubmit && buttonType !== "submit") {
      onSubmit(component);
    }
  };
  return /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(
    Button_default,
    {
      type: buttonType === "submit" ? "submit" : "button",
      variant,
      color,
      size,
      disabled: isLoading || buttonType === "submit" && !isFormValid,
      onClick: buttonType !== "submit" ? handleClick : void 0,
      className: buttonClassName,
      style: { width: "100%" },
      children: isLoading ? /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(Spinner_default, { size: "small" }) : buttonText
    },
    component.id
  );
};
var SubmitButton_default = ButtonComponent;

// src/components/presentation/SignUp/options/TelephoneInput.tsx
var import_jsx_runtime60 = require("react/jsx-runtime");
var TelephoneInput = ({
  component,
  formValues,
  touchedFields,
  formErrors,
  onInputChange,
  inputClassName
}) => {
  const config = component.config || {};
  const fieldName = config["identifier"] || config["name"] || component.id;
  const value = formValues[fieldName] || "";
  const error = touchedFields[fieldName] ? formErrors[fieldName] : void 0;
  return /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(
    TextField_default,
    {
      name: fieldName,
      type: "tel",
      label: config["label"] || "",
      placeholder: config["placeholder"] || "",
      required: config["required"] || false,
      value,
      error,
      onChange: (e) => onInputChange(fieldName, e.target.value),
      className: inputClassName,
      helperText: config["hint"] || ""
    },
    component.id
  );
};
var TelephoneInput_default = TelephoneInput;

// src/components/presentation/SignUp/options/TextInput.tsx
var import_browser47 = require("@asgardeo/browser");
var TextInput = ({
  component,
  formValues,
  touchedFields,
  formErrors,
  onInputChange,
  inputClassName
}) => {
  const config = component.config || {};
  const fieldName = config["identifier"] || config["name"] || component.id;
  const value = formValues[fieldName] || "";
  const error = touchedFields[fieldName] ? formErrors[fieldName] : void 0;
  return createField({
    type: import_browser47.FieldType.Text,
    name: fieldName,
    label: config["label"] || "",
    placeholder: config["placeholder"] || "",
    required: config["required"] || false,
    value,
    error,
    onChange: (newValue) => onInputChange(fieldName, newValue),
    className: inputClassName
  });
};
var TextInput_default = TextInput;

// src/components/presentation/SignUp/options/Typography.tsx
var import_jsx_runtime61 = require("react/jsx-runtime");
var TypographyComponent = ({ component }) => {
  const { theme } = useTheme_default();
  const config = component.config || {};
  const text = config["text"] || config["content"] || "";
  const variant = component.variant?.toLowerCase() || "body1";
  let typographyVariant = "body1";
  switch (variant) {
    case "h1":
      typographyVariant = "h1";
      break;
    case "h2":
      typographyVariant = "h2";
      break;
    case "h3":
      typographyVariant = "h3";
      break;
    case "h4":
      typographyVariant = "h4";
      break;
    case "h5":
      typographyVariant = "h5";
      break;
    case "h6":
      typographyVariant = "h6";
      break;
    case "subtitle1":
      typographyVariant = "subtitle1";
      break;
    case "subtitle2":
      typographyVariant = "subtitle2";
      break;
    case "body2":
      typographyVariant = "body2";
      break;
    case "caption":
      typographyVariant = "caption";
      break;
    default:
      typographyVariant = "body1";
  }
  return /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(
    Typography_default,
    {
      variant: typographyVariant,
      style: { marginBottom: `calc(${theme.vars.spacing.unit} * 2)` },
      children: text
    },
    component.id
  );
};
var Typography_default2 = TypographyComponent;

// src/components/presentation/SignUp/options/SignUpOptionFactory.tsx
var import_jsx_runtime62 = require("react/jsx-runtime");
var createSignUpComponent = (props) => {
  const { component } = props;
  switch (component.type) {
    case import_browser48.EmbeddedFlowComponentType.Typography:
      return /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(Typography_default2, { ...props });
    case import_browser48.EmbeddedFlowComponentType.Input:
      const inputVariant = component.variant?.toUpperCase();
      const inputType = component.config["type"]?.toLowerCase();
      if (inputVariant === "EMAIL" || inputType === "email") {
        return /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(EmailInput_default, { ...props });
      }
      if (inputVariant === "PASSWORD" || inputType === "password") {
        return /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(PasswordInput_default, { ...props });
      }
      if (inputVariant === "TELEPHONE" || inputType === "tel") {
        return /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(TelephoneInput_default, { ...props });
      }
      if (inputVariant === "NUMBER" || inputType === "number") {
        return /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(NumberInput_default, { ...props });
      }
      if (inputVariant === "DATE" || inputType === "date") {
        return /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(DateInput_default, { ...props });
      }
      if (inputVariant === "CHECKBOX" || inputType === "checkbox") {
        return /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(CheckboxInput_default, { ...props });
      }
      return /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(TextInput_default, { ...props });
    case import_browser48.EmbeddedFlowComponentType.Button: {
      const buttonVariant = component.variant?.toUpperCase();
      const buttonText = component.config["text"] || component.config["label"] || "";
      if (buttonVariant === "SOCIAL" && buttonText.toLowerCase().includes("google")) {
        return /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(GoogleButton_default2, { ...props });
      }
      return /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(SubmitButton_default, { ...props });
    }
    case import_browser48.EmbeddedFlowComponentType.Form:
      return /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(FormContainer_default, { ...props });
    case import_browser48.EmbeddedFlowComponentType.Divider:
      return /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(DividerComponent_default, { ...props });
    case import_browser48.EmbeddedFlowComponentType.Image:
      return /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(ImageComponent_default, { ...props });
    default:
      return /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("div", {});
  }
};
var createSignUpOptionFromComponent = (component, formValues, touchedFields, formErrors, isLoading, isFormValid, onInputChange, options) => createSignUpComponent({
  component,
  formErrors,
  formValues,
  isFormValid,
  isLoading,
  onInputChange,
  touchedFields,
  ...options
});
var renderSignUpComponents = (components, formValues, touchedFields, formErrors, isLoading, isFormValid, onInputChange, options) => components.map(
  (component, index) => createSignUpOptionFromComponent(
    component,
    formValues,
    touchedFields,
    formErrors,
    isLoading,
    isFormValid,
    onInputChange,
    {
      ...options,
      // Use component id as key, fallback to index
      key: component.id || index
    }
  )
).filter(Boolean);

// src/components/presentation/SignUp/BaseSignUp.tsx
var import_jsx_runtime63 = require("react/jsx-runtime");
var useStyles3 = () => {
  const { theme } = useTheme_default();
  return (0, import_react42.useMemo)(
    () => ({
      card: {
        gap: `calc(${theme.vars.spacing.unit} * 2)`,
        minWidth: "420px"
      },
      header: {
        gap: 0
      },
      subtitle: {
        marginTop: `calc(${theme.vars.spacing.unit} * 1)`
      },
      messagesContainer: {
        marginTop: `calc(${theme.vars.spacing.unit} * 2)`
      },
      messageItem: {
        marginBottom: `calc(${theme.vars.spacing.unit} * 1)`
      },
      errorContainer: {
        marginBottom: `calc(${theme.vars.spacing.unit} * 2)`
      },
      contentContainer: {
        display: "flex",
        flexDirection: "column",
        gap: `calc(${theme.vars.spacing.unit} * 2)`
      },
      loadingContainer: {
        display: "flex",
        flexDirection: "column",
        alignItems: "center",
        padding: `calc(${theme.vars.spacing.unit} * 4)`
      },
      loadingText: {
        marginTop: `calc(${theme.vars.spacing.unit} * 2)`
      },
      divider: {
        margin: `calc(${theme.vars.spacing.unit} * 1) 0`
      },
      logoContainer: {
        display: "flex",
        flexDirection: "column",
        alignItems: "center",
        marginBottom: `calc(${theme.vars.spacing.unit} * 3)`
      },
      centeredContainer: {
        textAlign: "center",
        padding: `calc(${theme.vars.spacing.unit} * 4)`
      },
      passkeyContainer: {
        marginBottom: `calc(${theme.vars.spacing.unit} * 2)`
      },
      passkeyText: {
        marginTop: `calc(${theme.vars.spacing.unit} * 1)`,
        color: theme.vars.colors.text.secondary
      }
    }),
    [theme.vars.spacing.unit, theme.vars.colors.text.secondary]
  );
};
var BaseSignUp = (props) => {
  const { theme } = useTheme_default();
  const styles = useStyles3();
  return /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("div", { children: [
    /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("div", { style: styles.logoContainer, children: /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(Logo_default, { size: "large" }) }),
    /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(FlowProvider_default, { children: /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(BaseSignUpContent, { ...props }) })
  ] });
};
var BaseSignUpContent = ({
  afterSignUpUrl,
  onInitialize,
  onSubmit,
  onError,
  onFlowChange,
  onComplete,
  className = "",
  inputClassName = "",
  buttonClassName = "",
  errorClassName = "",
  messageClassName = "",
  size = "medium",
  variant = "outlined",
  isInitialized
}) => {
  const { theme } = useTheme_default();
  const { t } = useTranslation_default();
  const { subtitle: flowSubtitle, title: flowTitle, messages: flowMessages } = useFlow_default();
  const styles = useStyles3();
  const [isLoading, setIsLoading] = (0, import_react42.useState)(false);
  const [isFlowInitialized, setIsFlowInitialized] = (0, import_react42.useState)(false);
  const [currentFlow, setCurrentFlow] = (0, import_react42.useState)(null);
  const [error, setError] = (0, import_react42.useState)(null);
  const [formData, setFormData] = (0, import_react42.useState)({});
  const initializationAttemptedRef = (0, import_react42.useRef)(false);
  const extractFormFields = (0, import_react42.useCallback)(
    (components) => {
      const fields = [];
      const processComponents = (comps) => {
        comps.forEach((component) => {
          if (component.type === import_browser49.EmbeddedFlowComponentType.Input) {
            const config = component.config || {};
            fields.push({
              name: config.name || component.id,
              required: config.required || false,
              initialValue: config.defaultValue || "",
              validator: (value) => {
                if (config.required && (!value || value.trim() === "")) {
                  return t("field.required");
                }
                if (config.type === "email" && value && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value)) {
                  return t("field.email.invalid");
                }
                if (config.type === "password" && value && value.length < 8) {
                  return t("field.password.weak");
                }
                return null;
              }
            });
          }
          if (component.components && Array.isArray(component.components)) {
            processComponents(component.components);
          }
        });
      };
      processComponents(components);
      return fields;
    },
    [t]
  );
  const formFields = currentFlow?.data?.components ? extractFormFields(currentFlow.data.components) : [];
  const form = useForm({
    initialValues: {},
    fields: formFields,
    validateOnBlur: true,
    validateOnChange: true,
    requiredMessage: t("field.required")
  });
  const {
    values: formValues,
    touched: touchedFields,
    errors: formErrors,
    isValid: isFormValid,
    setValue: setFormValue,
    setTouched: setFormTouched,
    clearErrors: clearFormErrors,
    validateField: validateFormField,
    validateForm,
    touchAllFields,
    reset: resetForm
  } = form;
  const setupFormFields = (0, import_react42.useCallback)(
    (flowResponse) => {
      const fields = extractFormFields(flowResponse.data?.components || []);
      const initialValues = {};
      fields.forEach((field) => {
        initialValues[field.name] = field.initialValue || "";
      });
      resetForm();
      Object.keys(initialValues).forEach((key) => {
        setFormValue(key, initialValues[key]);
      });
    },
    [extractFormFields, resetForm, setFormValue]
  );
  const handleInputChange = (name, value) => {
    setFormValue(name, value);
    setFormTouched(name, true);
  };
  const handleSubmit = async (component, data) => {
    if (!currentFlow) {
      return;
    }
    setIsLoading(true);
    setError(null);
    try {
      const filteredInputs = {};
      if (data) {
        Object.entries(data).forEach(([key, value]) => {
          if (value !== null && value !== void 0 && value !== "") {
            filteredInputs[key] = value;
          }
        });
      }
      const payload = {
        ...currentFlow.flowId && { flowId: currentFlow.flowId },
        flowType: currentFlow.flowType || "REGISTRATION",
        inputs: filteredInputs,
        actionId: component.id
      };
      const response = await onSubmit(payload);
      onFlowChange?.(response);
      if (response.flowStatus === import_browser49.EmbeddedFlowStatus.Complete) {
        onComplete?.(response);
        return;
      }
      if (response.flowStatus === import_browser49.EmbeddedFlowStatus.Incomplete) {
        if (handleRedirectionIfNeeded(response, component)) {
          return;
        }
        setCurrentFlow(response);
        setupFormFields(response);
      }
    } catch (err) {
      const errorMessage = err instanceof import_browser49.AsgardeoAPIError ? err.message : t("errors.sign.up.flow.failure");
      setError(errorMessage);
      onError?.(err);
    } finally {
      setIsLoading(false);
    }
  };
  const handleRedirectionIfNeeded = (response, component) => {
    if (response?.type === import_browser49.EmbeddedFlowResponseType.Redirection && response?.data?.redirectURL) {
      const redirectUrl = response.data.redirectURL;
      const popup = window.open(redirectUrl, "oauth_popup", "width=500,height=600,scrollbars=yes,resizable=yes");
      if (!popup) {
        console.error("Failed to open popup window");
        return false;
      }
      const messageHandler = async function messageEventHandler(event) {
        if (event.source !== popup) {
          return;
        }
        const expectedOrigin = afterSignUpUrl ? new URL(afterSignUpUrl).origin : window.location.origin;
        if (event.origin !== expectedOrigin && event.origin !== window.location.origin) {
          return;
        }
        const { code, state } = event.data;
        if (code && state) {
          const payload = {
            ...currentFlow.flowId && { flowId: currentFlow.flowId },
            flowType: currentFlow.flowType || "REGISTRATION",
            inputs: {
              code,
              state
            },
            actionId: ""
          };
          try {
            const continueResponse = await onSubmit(payload);
            onFlowChange?.(continueResponse);
            if (continueResponse.flowStatus === import_browser49.EmbeddedFlowStatus.Complete) {
              onComplete?.(continueResponse);
            } else if (continueResponse.flowStatus === import_browser49.EmbeddedFlowStatus.Incomplete) {
              setCurrentFlow(continueResponse);
              setupFormFields(continueResponse);
            }
            popup.close();
            cleanup();
          } catch (err) {
            const errorMessage = err instanceof import_browser49.AsgardeoAPIError ? err.message : t("errors.sign.up.flow.failure");
            setError(errorMessage);
            onError?.(err);
            popup.close();
            cleanup();
          }
        }
      };
      const cleanup = () => {
        window.removeEventListener("message", messageHandler);
        if (popupMonitor) {
          clearInterval(popupMonitor);
        }
      };
      window.addEventListener("message", messageHandler);
      let hasProcessedCallback = false;
      const popupMonitor = setInterval(async () => {
        try {
          if (popup.closed) {
            cleanup();
            return;
          }
          if (hasProcessedCallback) {
            return;
          }
          try {
            const popupUrl = popup.location.href;
            if (popupUrl && (popupUrl.includes("code=") || popupUrl.includes("error="))) {
              hasProcessedCallback = true;
              const url = new URL(popupUrl);
              const code = url.searchParams.get("code");
              const state = url.searchParams.get("state");
              const error2 = url.searchParams.get("error");
              if (error2) {
                console.error("OAuth error:", error2);
                popup.close();
                cleanup();
                return;
              }
              if (code && state) {
                const payload = {
                  ...currentFlow.flowId && { flowId: currentFlow.flowId },
                  flowType: currentFlow.flowType || "REGISTRATION",
                  inputs: {
                    code,
                    state
                  },
                  actionId: ""
                };
                try {
                  const continueResponse = await onSubmit(payload);
                  onFlowChange?.(continueResponse);
                  if (continueResponse.flowStatus === import_browser49.EmbeddedFlowStatus.Complete) {
                    onComplete?.(continueResponse);
                  } else if (continueResponse.flowStatus === import_browser49.EmbeddedFlowStatus.Incomplete) {
                    setCurrentFlow(continueResponse);
                    setupFormFields(continueResponse);
                  }
                  popup.close();
                } catch (err) {
                  const errorMessage = err instanceof import_browser49.AsgardeoAPIError ? err.message : t("errors.sign.up.flow.failure");
                  setError(errorMessage);
                  onError?.(err);
                  popup.close();
                }
              }
            }
          } catch (e) {
          }
        } catch (e) {
          console.error("Error monitoring popup:", e);
        }
      }, 1e3);
      return true;
    }
    return false;
  };
  const containerClasses = (0, import_clsx17.clsx)(
    [
      (0, import_browser49.withVendorCSSClassPrefix)("signup"),
      (0, import_browser49.withVendorCSSClassPrefix)(`signup--${size}`),
      (0, import_browser49.withVendorCSSClassPrefix)(`signup--${variant}`)
    ],
    className
  );
  const inputClasses = (0, import_clsx17.clsx)(
    [
      (0, import_browser49.withVendorCSSClassPrefix)("signup__input"),
      size === "small" && (0, import_browser49.withVendorCSSClassPrefix)("signup__input--small"),
      size === "large" && (0, import_browser49.withVendorCSSClassPrefix)("signup__input--large")
    ],
    inputClassName
  );
  const buttonClasses = (0, import_clsx17.clsx)(
    [
      (0, import_browser49.withVendorCSSClassPrefix)("signup__button"),
      size === "small" && (0, import_browser49.withVendorCSSClassPrefix)("signup__button--small"),
      size === "large" && (0, import_browser49.withVendorCSSClassPrefix)("signup__button--large")
    ],
    buttonClassName
  );
  const errorClasses = (0, import_clsx17.clsx)([(0, import_browser49.withVendorCSSClassPrefix)("signup__error")], errorClassName);
  const messageClasses = (0, import_clsx17.clsx)([(0, import_browser49.withVendorCSSClassPrefix)("signup__messages")], messageClassName);
  const renderComponents = (0, import_react42.useCallback)(
    (components) => renderSignUpComponents(
      components,
      formValues,
      touchedFields,
      formErrors,
      isLoading,
      isFormValid,
      handleInputChange,
      {
        buttonClassName: buttonClasses,
        error,
        inputClassName: inputClasses,
        onSubmit: handleSubmit,
        size,
        variant
      }
    ),
    [
      formValues,
      touchedFields,
      formErrors,
      isFormValid,
      isLoading,
      size,
      variant,
      error,
      inputClasses,
      buttonClasses,
      handleSubmit
    ]
  );
  (0, import_react42.useEffect)(() => {
    if (isInitialized && !isFlowInitialized && !initializationAttemptedRef.current) {
      initializationAttemptedRef.current = true;
      const performInitialization = async () => {
        setIsLoading(true);
        setError(null);
        try {
          const response = await onInitialize();
          setCurrentFlow(response);
          setIsFlowInitialized(true);
          onFlowChange?.(response);
          if (response.flowStatus === import_browser49.EmbeddedFlowStatus.Complete) {
            onComplete?.(response);
            return;
          }
          if (response.flowStatus === import_browser49.EmbeddedFlowStatus.Incomplete) {
            setupFormFields(response);
          }
        } catch (err) {
          const errorMessage = err instanceof Error ? err.message : t("errors.sign.up.flow.initialization.failure");
          setError(errorMessage);
          onError?.(err);
        } finally {
          setIsLoading(false);
        }
      };
      performInitialization();
    }
  }, [
    isInitialized,
    isFlowInitialized,
    onInitialize,
    onComplete,
    onError,
    onFlowChange,
    setupFormFields,
    afterSignUpUrl,
    t
  ]);
  if (!isFlowInitialized && isLoading) {
    return /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(Card_default, { className: containerClasses, style: styles.card, variant, children: /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(Card_default.Content, { children: /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("div", { style: { display: "flex", justifyContent: "center", padding: `calc(${theme.vars.spacing.unit} * 4)` }, children: /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(Spinner_default, { size: "medium" }) }) }) });
  }
  if (!currentFlow) {
    return /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(Card_default, { className: containerClasses, style: styles.card, variant, children: /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(Card_default.Content, { children: /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)(Alert_default, { variant: "error", className: errorClasses, children: [
      /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(Alert_default.Title, { children: t("errors.title") || "Error" }),
      /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(Alert_default.Description, { children: error || t("errors.sign.up.flow.initialization.failure") })
    ] }) }) });
  }
  return /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)(Card_default, { className: containerClasses, style: styles.card, variant, children: [
    flowMessages && flowMessages.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(Card_default.Header, { style: styles.header, children: /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("div", { style: { marginTop: `calc(${theme.vars.spacing.unit} * 2)` }, children: flowMessages.map((message, index) => /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(
      Alert_default,
      {
        variant: message.type?.toLowerCase() === "error" ? "error" : "info",
        style: { marginBottom: `calc(${theme.vars.spacing.unit} * 1)` },
        className: messageClasses,
        children: /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(Alert_default.Description, { children: message.message })
      },
      message.id || index
    )) }) }),
    /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)(Card_default.Content, { children: [
      error && /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)(
        Alert_default,
        {
          variant: "error",
          className: errorClasses,
          style: { marginBottom: `calc(${theme.vars.spacing.unit} * 2)` },
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(Alert_default.Title, { children: t("errors.title") || "Error" }),
            /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(Alert_default.Description, { children: error })
          ]
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime63.jsx)("div", { style: { display: "flex", flexDirection: "column", gap: `calc(${theme.vars.spacing.unit} * 2)` }, children: currentFlow.data?.components && renderComponents(currentFlow.data.components) })
    ] })
  ] });
};
var BaseSignUp_default = BaseSignUp;

// src/components/presentation/SignUp/SignUp.tsx
var import_browser50 = require("@asgardeo/browser");
var import_jsx_runtime64 = require("react/jsx-runtime");
var SignUp = ({
  className,
  size = "medium",
  afterSignUpUrl,
  onError,
  onComplete,
  shouldRedirectAfterSignUp = true,
  ...rest
}) => {
  const { signUp, isInitialized } = useAsgardeo_default();
  const handleInitialize = async (payload) => await signUp(
    payload || {
      flowType: import_browser50.EmbeddedFlowType.Registration
    }
  );
  const handleOnSubmit = async (payload) => await signUp(payload);
  const handleComplete = (response) => {
    onComplete?.(response);
    if (shouldRedirectAfterSignUp && response?.type !== import_browser50.EmbeddedFlowResponseType.Redirection && afterSignUpUrl) {
      window.location.href = afterSignUpUrl;
    }
    if (shouldRedirectAfterSignUp && response?.type === import_browser50.EmbeddedFlowResponseType.Redirection && response?.data?.redirectURL && !response.data.redirectURL.includes("oauth") && // Not a social provider redirect
    !response.data.redirectURL.includes("auth")) {
      window.location.href = response.data.redirectURL;
    }
  };
  return /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(
    BaseSignUp_default,
    {
      afterSignUpUrl,
      onInitialize: handleInitialize,
      onSubmit: handleOnSubmit,
      onError,
      onComplete: handleComplete,
      className,
      size,
      isInitialized,
      ...rest
    }
  );
};
var SignUp_default = SignUp;

// src/components/presentation/User/BaseUser.tsx
var import_jsx_runtime65 = require("react/jsx-runtime");
var BaseUser = ({ user, children, fallback = null }) => {
  if (!user) {
    return /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(import_jsx_runtime65.Fragment, { children: fallback });
  }
  return /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(import_jsx_runtime65.Fragment, { children: children(user) });
};
BaseUser.displayName = "BaseUser";
var BaseUser_default = BaseUser;

// src/components/presentation/User/User.tsx
var import_jsx_runtime66 = require("react/jsx-runtime");
var User5 = ({ children, fallback = null }) => {
  const { user } = useAsgardeo_default();
  return /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(BaseUser_default, { user, fallback, children });
};
User5.displayName = "User";
var User_default = User5;

// src/components/presentation/Organization/BaseOrganization.tsx
var import_jsx_runtime67 = require("react/jsx-runtime");
var BaseOrganization = ({ children, fallback = null, organization }) => {
  if (!organization) {
    return /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(import_jsx_runtime67.Fragment, { children: fallback });
  }
  return /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(import_jsx_runtime67.Fragment, { children: children(organization) });
};
BaseOrganization.displayName = "BaseOrganization";
var BaseOrganization_default = BaseOrganization;

// src/components/presentation/Organization/Organization.tsx
var import_jsx_runtime68 = require("react/jsx-runtime");
var Organization5 = ({ children, fallback = null }) => {
  const { currentOrganization } = useOrganization_default();
  return /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(BaseOrganization_default, { organization: currentOrganization, fallback, children });
};
Organization5.displayName = "Organization";
var Organization_default = Organization5;

// src/components/presentation/UserProfile/BaseUserProfile.tsx
var import_browser55 = require("@asgardeo/browser");
var import_clsx21 = __toESM(require("clsx"), 1);
var import_react47 = require("react");

// src/utils/getMappedUserProfileValue.ts
var import_browser51 = require("@asgardeo/browser");
var getMappedUserProfileValue = (key, mappings, user) => {
  if (!key || !mappings || !user) {
    return void 0;
  }
  const mapping = mappings[key];
  if (!mapping) {
    return (0, import_browser51.get)(user, key);
  }
  if (Array.isArray(mapping)) {
    for (const path of mapping) {
      const value = (0, import_browser51.get)(user, path);
      if (value !== void 0 && value !== null && value !== "") {
        return value;
      }
    }
    return void 0;
  }
  return (0, import_browser51.get)(user, mapping);
};
var getMappedUserProfileValue_default = getMappedUserProfileValue;

// src/components/primitives/Avatar/Avatar.tsx
var import_browser52 = require("@asgardeo/browser");
var import_clsx18 = __toESM(require("clsx"), 1);
var import_react43 = require("react");
var import_jsx_runtime69 = require("react/jsx-runtime");
var useStyles4 = ({
  size,
  variant,
  backgroundColor
}) => {
  const { theme, colorScheme } = useTheme_default();
  return (0, import_react43.useMemo)(
    () => ({
      avatar: {
        alignItems: "center",
        background: backgroundColor || theme.vars.colors.background.surface,
        border: backgroundColor ? "none" : `1px solid ${theme.vars.colors.border}`,
        borderRadius: variant === "circular" ? "50%" : "8px",
        color: backgroundColor ? "#ffffff" : theme.vars.colors.text.primary,
        display: "flex",
        fontSize: `${size * 0.4}px`,
        fontWeight: 600,
        height: `${size}px`,
        justifyContent: "center",
        overflow: "hidden",
        textShadow: backgroundColor ? "0 1px 2px rgba(0, 0, 0, 0.1)" : "none",
        width: `${size}px`
      },
      image: {
        height: "100%",
        objectFit: "cover",
        width: "100%"
      }
    }),
    [size, theme, colorScheme, variant, backgroundColor]
  );
};
var Avatar = ({
  alt = "User avatar",
  background = "random",
  className = "",
  imageUrl,
  name,
  size = 64,
  variant = "circular"
}) => {
  const generateBackgroundColor = (inputString) => {
    const hash = inputString.split("").reduce((acc, char) => {
      const charCode = char.charCodeAt(0);
      return (acc << 5) - acc + charCode & 4294967295;
    }, 0);
    const seed = Math.abs(hash);
    const generateColor = (offset4) => {
      const hue1 = (seed + offset4) % 360;
      const hue2 = (hue1 + 60 + seed % 120) % 360;
      const saturation = 70 + seed % 20;
      const lightness1 = 55 + seed % 15;
      const lightness2 = 60 + (seed + offset4) % 15;
      return `hsl(${hue1}, ${saturation}%, ${lightness1}%), hsl(${hue2}, ${saturation}%, ${lightness2}%)`;
    };
    const angle = 45 + seed % 91;
    const colors = generateColor(seed);
    return `linear-gradient(${angle}deg, ${colors})`;
  };
  const backgroundColor = (0, import_react43.useMemo)(() => {
    if (!name || imageUrl) {
      return void 0;
    }
    if (background === "random") {
      return generateBackgroundColor(name);
    }
    if (background === "none") {
      return void 0;
    }
    return background;
  }, [background, name, imageUrl]);
  const styles = useStyles4({
    size,
    variant,
    backgroundColor
  });
  const getInitials = (fullName) => fullName.split(" ").map((part) => part[0]).slice(0, 2).join("").toUpperCase();
  const renderContent = () => {
    if (imageUrl) {
      return /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("img", { src: imageUrl, alt, style: styles.image });
    }
    if (name) {
      return getInitials(name);
    }
    return /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(
      "div",
      {
        style: {
          width: "100%",
          height: "100%",
          background: "linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%)",
          backgroundSize: "200% 100%",
          animation: "skeleton-loading 1.5s infinite",
          borderRadius: variant === "circular" ? "50%" : "8px"
        }
      }
    );
  };
  return /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)("div", { style: styles.avatar, className: (0, import_clsx18.default)((0, import_browser52.withVendorCSSClassPrefix)("avatar"), className), children: [
    /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("style", { children: `
          @keyframes skeleton-loading {
            0% {
              background-position: -200% 0;
            }
            100% {
              background-position: 200% 0;
            }
          }
        ` }),
    renderContent()
  ] });
};
var Avatar_default = Avatar;

// src/components/primitives/Popover/Popover.tsx
var import_browser53 = require("@asgardeo/browser");
var import_react44 = require("@floating-ui/react");
var import_clsx19 = __toESM(require("clsx"), 1);
var import_react45 = __toESM(require("react"), 1);

// src/components/primitives/Icons/LogOut.tsx
var import_jsx_runtime70 = require("react/jsx-runtime");
var LogOut = (props) => /* @__PURE__ */ (0, import_jsx_runtime70.jsxs)(
  "svg",
  {
    xmlns: "http://www.w3.org/2000/svg",
    width: "24",
    height: "24",
    viewBox: "0 0 24 24",
    fill: "none",
    stroke: "currentColor",
    strokeWidth: "2",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    ...props,
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime70.jsx)("path", { d: "m16 17 5-5-5-5" }),
      /* @__PURE__ */ (0, import_jsx_runtime70.jsx)("path", { d: "M21 12H9" }),
      /* @__PURE__ */ (0, import_jsx_runtime70.jsx)("path", { d: "M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4" })
    ]
  }
);
var LogOut_default = LogOut;

// src/components/primitives/Icons/Plus.tsx
var import_jsx_runtime71 = require("react/jsx-runtime");
var Plus = (props) => /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)(
  "svg",
  {
    xmlns: "http://www.w3.org/2000/svg",
    width: "24",
    height: "24",
    viewBox: "0 0 24 24",
    fill: "none",
    stroke: "currentColor",
    strokeWidth: "2",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    ...props,
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("path", { d: "M5 12h14" }),
      /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("path", { d: "M12 5v14" })
    ]
  }
);
var Plus_default = Plus;

// src/components/primitives/Icons/User.tsx
var import_jsx_runtime72 = require("react/jsx-runtime");
var User7 = (props) => /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)(
  "svg",
  {
    xmlns: "http://www.w3.org/2000/svg",
    width: "24",
    height: "24",
    viewBox: "0 0 24 24",
    fill: "none",
    stroke: "currentColor",
    strokeWidth: "2",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    ...props,
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("path", { d: "M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2" }),
      /* @__PURE__ */ (0, import_jsx_runtime72.jsx)("circle", { cx: "12", cy: "7", r: "4" })
    ]
  }
);
var User_default2 = User7;

// src/components/primitives/Icons/X.tsx
var import_jsx_runtime73 = require("react/jsx-runtime");
var X = (props) => /* @__PURE__ */ (0, import_jsx_runtime73.jsxs)(
  "svg",
  {
    xmlns: "http://www.w3.org/2000/svg",
    width: "24",
    height: "24",
    viewBox: "0 0 24 24",
    fill: "none",
    stroke: "currentColor",
    strokeWidth: "2",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    ...props,
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("path", { d: "M18 6 6 18" }),
      /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("path", { d: "m6 6 12 12" })
    ]
  }
);
var X_default = X;

// src/components/primitives/Popover/Popover.tsx
var import_jsx_runtime74 = require("react/jsx-runtime");
var useStyles5 = () => {
  const { theme, colorScheme } = useTheme_default();
  return (0, import_react45.useMemo)(
    () => ({
      overlay: {
        backgroundColor: "rgba(0, 0, 0, 0.5)",
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        zIndex: 9999
      },
      content: {
        background: theme.colors.background.surface,
        borderRadius: theme.borderRadius.large,
        boxShadow: `0 2px 8px ${colorScheme === "dark" ? "rgba(0, 0, 0, 0.3)" : "rgba(0, 0, 0, 0.15)"}`,
        outline: "none",
        maxWidth: "90vw",
        maxHeight: "90vh",
        overflowY: "auto",
        zIndex: 1e4
      },
      dropdownContent: {
        background: theme.colors.background.surface,
        borderRadius: theme.borderRadius.large,
        boxShadow: `0 2px 8px ${colorScheme === "dark" ? "rgba(0, 0, 0, 0.3)" : "rgba(0, 0, 0, 0.15)"}`,
        outline: "none",
        maxWidth: "90vw",
        maxHeight: "90vh",
        overflowY: "auto",
        zIndex: 1e4
      },
      header: {
        display: "flex",
        justifyContent: "space-between",
        alignItems: "center",
        padding: `${theme.spacing.unit * 3}px ${theme.spacing.unit * 4.5}px`,
        borderBottom: `1px solid ${theme.colors.border}`
      },
      headerTitle: {
        margin: 0,
        fontSize: "1.2rem",
        fontWeight: 600,
        color: theme.colors.text.primary
      },
      contentBody: {
        padding: `${theme.spacing.unit * 2}px`
      }
    }),
    [theme, colorScheme]
  );
};
function useDialog({
  initialOpen = false,
  open: controlledOpen,
  onOpenChange: setControlledOpen
} = {}) {
  const [uncontrolledOpen, setUncontrolledOpen] = import_react45.default.useState(initialOpen);
  const [labelId, setLabelId] = import_react45.default.useState();
  const [descriptionId, setDescriptionId] = import_react45.default.useState();
  const open = controlledOpen ?? uncontrolledOpen;
  const setOpen = setControlledOpen ?? setUncontrolledOpen;
  const data = (0, import_react44.useFloating)({
    open,
    onOpenChange: setOpen
  });
  const { context } = data;
  const click = (0, import_react44.useClick)(context, {
    enabled: controlledOpen == null
  });
  const dismiss = (0, import_react44.useDismiss)(context, { outsidePressEvent: "mousedown" });
  const role = (0, import_react44.useRole)(context);
  const interactions = (0, import_react44.useInteractions)([click, dismiss, role]);
  return import_react45.default.useMemo(
    () => ({
      open,
      setOpen,
      ...interactions,
      ...data,
      labelId,
      descriptionId,
      setLabelId,
      setDescriptionId
    }),
    [open, setOpen, interactions, data, labelId, descriptionId]
  );
}
function usePopover({
  initialOpen = false,
  open: controlledOpen,
  onOpenChange: setControlledOpen,
  placement = "bottom",
  offset: offsetValue = 5
} = {}) {
  const [uncontrolledOpen, setUncontrolledOpen] = import_react45.default.useState(initialOpen);
  const [labelId, setLabelId] = import_react45.default.useState();
  const [descriptionId, setDescriptionId] = import_react45.default.useState();
  const open = controlledOpen ?? uncontrolledOpen;
  const setOpen = setControlledOpen ?? setUncontrolledOpen;
  const data = (0, import_react44.useFloating)({
    open,
    onOpenChange: setOpen,
    middleware: [(0, import_react44.offset)(offsetValue), (0, import_react44.flip)(), (0, import_react44.shift)()],
    whileElementsMounted: import_react44.autoUpdate,
    placement
  });
  const { context } = data;
  const click = (0, import_react44.useClick)(context);
  const dismiss = (0, import_react44.useDismiss)(context, { outsidePressEvent: "mousedown" });
  const role = (0, import_react44.useRole)(context);
  const interactions = (0, import_react44.useInteractions)([click, dismiss, role]);
  return import_react45.default.useMemo(
    () => ({
      open,
      setOpen,
      ...interactions,
      ...data,
      labelId,
      descriptionId,
      setLabelId,
      setDescriptionId
    }),
    [open, setOpen, interactions, data, labelId, descriptionId]
  );
}
var DialogContext = import_react45.default.createContext(null);
var PopoverContext = import_react45.default.createContext(null);
var useDialogContext = () => {
  const context = import_react45.default.useContext(DialogContext);
  if (context == null) {
    throw new Error("Dialog components must be wrapped in <Dialog />");
  }
  return context;
};
var usePopoverContext = () => {
  const context = import_react45.default.useContext(PopoverContext);
  if (context == null) {
    throw new Error("Popover components must be wrapped in <Popover />");
  }
  return context;
};
function Dialog({ children, ...options }) {
  const dialog = useDialog(options);
  return /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(DialogContext.Provider, { value: dialog, children });
}
var DialogTrigger = import_react45.default.forwardRef(
  ({ children, asChild = false, ...props }, propRef) => {
    const context = useDialogContext();
    const childrenRef = children.ref;
    const ref = (0, import_react44.useMergeRefs)([context.refs.setReference, propRef, childrenRef]);
    if (asChild && import_react45.default.isValidElement(children)) {
      return import_react45.default.cloneElement(
        children,
        context.getReferenceProps({
          ref,
          ...props,
          ...children.props,
          "data-state": context.open ? "open" : "closed"
        })
      );
    }
    return /* @__PURE__ */ (0, import_jsx_runtime74.jsx)("button", { ref, "data-state": context.open ? "open" : "closed", ...context.getReferenceProps(props), children });
  }
);
var DialogContent = import_react45.default.forwardRef((props, propRef) => {
  const { context: floatingContext, ...context } = useDialogContext();
  const ref = (0, import_react44.useMergeRefs)([context.refs.setFloating, propRef]);
  const styles = useStyles5();
  if (!floatingContext.open) return null;
  return /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(import_react44.FloatingPortal, { children: /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(import_react44.FloatingOverlay, { className: (0, import_browser53.withVendorCSSClassPrefix)("popover-overlay"), style: styles.overlay, lockScroll: true, children: /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(import_react44.FloatingFocusManager, { context: floatingContext, children: /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(
    "div",
    {
      ref,
      style: styles.content,
      className: (0, import_clsx19.default)((0, import_browser53.withVendorCSSClassPrefix)("popover-content"), props.className),
      "aria-labelledby": context.labelId,
      "aria-describedby": context.descriptionId,
      ...context.getFloatingProps(props),
      children: props.children
    }
  ) }) }) });
});
function Popover({ children, ...options }) {
  const popover = usePopover(options);
  return /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(PopoverContext.Provider, { value: popover, children });
}
var PopoverTrigger = import_react45.default.forwardRef(
  ({ children, asChild = false, ...props }, propRef) => {
    const context = usePopoverContext();
    const childrenRef = children.ref;
    const ref = (0, import_react44.useMergeRefs)([context.refs.setReference, propRef, childrenRef]);
    if (asChild && import_react45.default.isValidElement(children)) {
      return import_react45.default.cloneElement(
        children,
        context.getReferenceProps({
          ref,
          ...props,
          ...children.props,
          "data-state": context.open ? "open" : "closed"
        })
      );
    }
    return /* @__PURE__ */ (0, import_jsx_runtime74.jsx)("button", { ref, "data-state": context.open ? "open" : "closed", ...context.getReferenceProps(props), children });
  }
);
var PopoverContent = import_react45.default.forwardRef((props, propRef) => {
  const { context: floatingContext, ...context } = usePopoverContext();
  const ref = (0, import_react44.useMergeRefs)([context.refs.setFloating, propRef]);
  const styles = useStyles5();
  if (!floatingContext.open) return null;
  return /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(import_react44.FloatingPortal, { children: /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(import_react44.FloatingFocusManager, { context: floatingContext, children: /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(
    "div",
    {
      ref,
      style: { ...styles.dropdownContent, ...context.floatingStyles },
      className: (0, import_clsx19.default)((0, import_browser53.withVendorCSSClassPrefix)("popover-content"), props.className),
      "aria-labelledby": context.labelId,
      "aria-describedby": context.descriptionId,
      ...context.getFloatingProps(props),
      children: props.children
    }
  ) }) });
});
var PopoverHeading = import_react45.default.forwardRef(
  ({ children, ...props }, ref) => {
    const context = usePopoverContext();
    const styles = useStyles5();
    const id = (0, import_react44.useId)();
    import_react45.default.useLayoutEffect(() => {
      context.setLabelId(id);
      return () => context.setLabelId(void 0);
    }, [id, context.setLabelId]);
    return /* @__PURE__ */ (0, import_jsx_runtime74.jsxs)("div", { style: styles.header, children: [
      /* @__PURE__ */ (0, import_jsx_runtime74.jsx)("h2", { ...props, ref, id, style: styles.headerTitle, children }),
      /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(Button_default, { color: "tertiary", variant: "text", size: "small", onClick: () => context.setOpen(false), "aria-label": "Close", children: /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(X_default, { width: 16, height: 16 }) })
    ] });
  }
);
var DialogHeading = import_react45.default.forwardRef(
  ({ children, ...props }, ref) => {
    const context = useDialogContext();
    const styles = useStyles5();
    const id = (0, import_react44.useId)();
    import_react45.default.useLayoutEffect(() => {
      context.setLabelId(id);
      return () => context.setLabelId(void 0);
    }, [id, context.setLabelId]);
    return /* @__PURE__ */ (0, import_jsx_runtime74.jsxs)("div", { style: styles.header, children: [
      /* @__PURE__ */ (0, import_jsx_runtime74.jsx)("h2", { ...props, ref, id, style: styles.headerTitle, children }),
      /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(Button_default, { color: "tertiary", variant: "text", size: "small", onClick: () => context.setOpen(false), "aria-label": "Close", children: /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(X_default, { width: 16, height: 16 }) })
    ] });
  }
);
var PopoverDescription = import_react45.default.forwardRef(
  ({ children, ...props }, ref) => {
    const context = usePopoverContext();
    const id = (0, import_react44.useId)();
    import_react45.default.useLayoutEffect(() => {
      context.setDescriptionId(id);
      return () => context.setDescriptionId(void 0);
    }, [id, context.setDescriptionId]);
    return /* @__PURE__ */ (0, import_jsx_runtime74.jsx)("p", { ...props, ref, id, children });
  }
);
var DialogDescription = import_react45.default.forwardRef(
  ({ children, ...props }, ref) => {
    const context = useDialogContext();
    const id = (0, import_react44.useId)();
    import_react45.default.useLayoutEffect(() => {
      context.setDescriptionId(id);
      return () => context.setDescriptionId(void 0);
    }, [id, context.setDescriptionId]);
    return /* @__PURE__ */ (0, import_jsx_runtime74.jsx)("p", { ...props, ref, id, children });
  }
);
var PopoverClose = import_react45.default.forwardRef(
  (props, ref) => {
    const context = usePopoverContext();
    return /* @__PURE__ */ (0, import_jsx_runtime74.jsx)("button", { type: "button", ...props, ref, onClick: () => context.setOpen(false) });
  }
);
var DialogClose = import_react45.default.forwardRef(
  (props, ref) => {
    const context = useDialogContext();
    return /* @__PURE__ */ (0, import_jsx_runtime74.jsx)("button", { type: "button", ...props, ref, onClick: () => context.setOpen(false) });
  }
);
var LegacyPopoverHeader = ({ children }) => {
  const styles = useStyles5();
  return /* @__PURE__ */ (0, import_jsx_runtime74.jsx)("div", { style: styles.header, children: children && /* @__PURE__ */ (0, import_jsx_runtime74.jsx)("h3", { style: styles.headerTitle, children }) });
};
var LegacyPopoverContent = ({ children }) => {
  const styles = useStyles5();
  return /* @__PURE__ */ (0, import_jsx_runtime74.jsx)("div", { style: styles.contentBody, children });
};
var LegacyPopover = ({ isOpen, children, onClose, className = "", mode = "modal", trigger, placement, offset: offset4 }) => {
  if (mode === "modal") {
    return /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(Dialog, { open: isOpen, onOpenChange: onClose, children: /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(DialogContent, { className, children }) });
  }
  return /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(Popover, { open: isOpen, onOpenChange: onClose, placement, offset: offset4, children: /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(PopoverContent, { className, children }) });
};
LegacyPopover.Header = LegacyPopoverHeader;
LegacyPopover.Content = LegacyPopoverContent;

// src/components/primitives/MultiInput/MultiInput.tsx
var import_react46 = require("react");
var import_clsx20 = __toESM(require("clsx"), 1);
var import_browser54 = require("@asgardeo/browser");
var import_jsx_runtime75 = require("react/jsx-runtime");
var useStyles6 = () => {
  const { theme } = useTheme_default();
  return (0, import_react46.useMemo)(
    () => ({
      container: {
        display: "flex",
        flexDirection: "column",
        gap: `${theme.spacing.unit}px`
      },
      inputRow: {
        display: "flex",
        alignItems: "center",
        gap: `${theme.spacing.unit}px`,
        position: "relative"
      },
      inputWrapper: {
        flex: 1
      },
      plusIcon: {
        background: "var(--asgardeo-color-secondary-main)",
        borderRadius: "50%",
        outline: "4px var(--asgardeo-color-secondary-main) auto",
        color: "var(--asgardeo-color-secondary-contrastText)"
      },
      listContainer: {
        display: "flex",
        flexDirection: "column",
        gap: `${theme.spacing.unit * 0}px`
      },
      listItem: {
        display: "flex",
        alignItems: "center",
        justifyContent: "space-between",
        padding: `${theme.spacing.unit}px ${theme.spacing.unit * 1.5}px`,
        backgroundColor: theme.colors.background.surface,
        borderRadius: theme.borderRadius.medium,
        fontSize: "1rem",
        color: theme.colors.text.primary
      },
      removeButton: {
        padding: `${theme.spacing.unit / 2}px`,
        minWidth: "auto",
        color: theme.colors.error.main
      }
    }),
    [theme]
  );
};
var MultiInput = ({
  label,
  error,
  required,
  className,
  disabled,
  helperText,
  placeholder = "Enter value",
  values = [],
  onChange,
  style = {},
  type = "text",
  fieldType = "STRING",
  startIcon,
  endIcon,
  minFields = 1,
  maxFields
}) => {
  const styles = useStyles6();
  const PlusIcon = ({ style: style2 }) => /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(
    "svg",
    {
      width: "16",
      height: "16",
      viewBox: "0 0 24 24",
      fill: "none",
      stroke: "currentColor",
      strokeWidth: "2",
      strokeLinecap: "round",
      strokeLinejoin: "round",
      style: style2,
      children: /* @__PURE__ */ (0, import_jsx_runtime75.jsx)("path", { d: "M12 5v14M5 12h14" })
    }
  );
  const BinIcon = () => /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(
    "svg",
    {
      width: "16",
      height: "16",
      viewBox: "0 0 24 24",
      fill: "none",
      stroke: "currentColor",
      strokeWidth: "2",
      strokeLinecap: "round",
      strokeLinejoin: "round",
      children: /* @__PURE__ */ (0, import_jsx_runtime75.jsx)("path", { d: "M3 6h18M8 6V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2m3 0v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6h14ZM10 11v6M14 11v6" })
    }
  );
  const handleAddValue = (0, import_react46.useCallback)(
    (newValue) => {
      if (newValue.trim() !== "" && (!maxFields || values.length < maxFields)) {
        onChange([...values, newValue.trim()]);
      }
    },
    [values, onChange, maxFields]
  );
  const handleRemoveValue = (0, import_react46.useCallback)(
    (index) => {
      if (values.length > minFields) {
        const updatedValues = values.filter((_, i) => i !== index);
        onChange(updatedValues);
      }
    },
    [values, onChange, minFields]
  );
  const renderInputField = (0, import_react46.useCallback)(
    (value, onValueChange, attachedEndIcon, onEndIconClick) => {
      const handleInputChange = (e) => {
        const newValue = e.target ? e.target.value : e;
        onValueChange(newValue);
      };
      const handleKeyDown = (e) => {
        if (e.key === "Enter" && onEndIconClick) {
          e.preventDefault();
          onEndIconClick();
        }
      };
      const finalEndIcon = attachedEndIcon || endIcon;
      const commonProps = {
        value,
        onChange: handleInputChange,
        onKeyDown: handleKeyDown,
        placeholder,
        disabled,
        startIcon,
        endIcon: finalEndIcon,
        onEndIconClick,
        error
      };
      switch (fieldType) {
        case "DATE_TIME":
          return /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(DatePicker_default, { ...commonProps });
        case "BOOLEAN":
          return /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(
            Checkbox_default,
            {
              ...commonProps,
              checked: value === "true" || Boolean(value),
              onChange: (e) => onValueChange(e.target.checked ? "true" : "false")
            }
          );
        default:
          return /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(TextField_default, { ...commonProps, type });
      }
    },
    [placeholder, disabled, startIcon, endIcon, error, fieldType, type]
  );
  const canAddMore = !maxFields || values.length < maxFields;
  const canRemove = values.length > minFields;
  const [currentInputValue, setCurrentInputValue] = (0, import_react46.useState)("");
  const handleInputSubmit = (0, import_react46.useCallback)(() => {
    if (currentInputValue.trim() !== "") {
      handleAddValue(currentInputValue);
      setCurrentInputValue("");
    }
  }, [currentInputValue, handleAddValue]);
  return /* @__PURE__ */ (0, import_jsx_runtime75.jsxs)(
    FormControl_default,
    {
      error,
      helperText,
      className: (0, import_clsx20.default)((0, import_browser54.withVendorCSSClassPrefix)("multi-input"), className),
      style,
      children: [
        label && /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(InputLabel_default, { required, error: !!error, children: label }),
        /* @__PURE__ */ (0, import_jsx_runtime75.jsxs)("div", { style: styles.container, children: [
          /* @__PURE__ */ (0, import_jsx_runtime75.jsx)("div", { style: styles.inputRow, children: /* @__PURE__ */ (0, import_jsx_runtime75.jsx)("div", { style: styles.inputWrapper, children: renderInputField(
            currentInputValue,
            setCurrentInputValue,
            canAddMore ? /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(PlusIcon, { style: styles.plusIcon }) : void 0,
            canAddMore ? handleInputSubmit : void 0
          ) }) }),
          values.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime75.jsx)("div", { style: styles.listContainer, children: values.map((value, index) => /* @__PURE__ */ (0, import_jsx_runtime75.jsxs)("div", { style: styles.listItem, children: [
            /* @__PURE__ */ (0, import_jsx_runtime75.jsx)("span", { children: value }),
            canRemove && /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(
              Button_default,
              {
                size: "small",
                color: "secondary",
                variant: "text",
                onClick: () => handleRemoveValue(index),
                disabled,
                title: "Remove value",
                style: styles.removeButton,
                children: /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(BinIcon, {})
              }
            )
          ] }, index)) })
        ] })
      ]
    }
  );
};
var MultiInput_default = MultiInput;

// src/components/presentation/UserProfile/BaseUserProfile.tsx
var import_jsx_runtime76 = require("react/jsx-runtime");
var fieldsToSkip = [
  "roles.default",
  "active",
  "groups",
  "accountLocked",
  "accountDisabled",
  "oneTimePassword",
  "userSourceId",
  "idpType",
  "localCredentialExists",
  "active",
  "ResourceType",
  "ExternalID",
  "MetaData",
  "verifiedMobileNumbers",
  "verifiedEmailAddresses",
  "phoneNumbers.mobile",
  "emailAddresses"
];
var readonlyFields = ["username", "userName", "user_name"];
var BaseUserProfile = ({
  fallback = null,
  className = "",
  cardLayout = true,
  profile,
  schemas = [],
  flattenedProfile,
  mode = "inline",
  title = "User Profile",
  attributeMapping = {},
  editable = true,
  onChange,
  onOpenChange,
  onSubmit,
  onUpdate,
  open = false,
  saveButtonText = "Save Changes",
  cancelButtonText = "Cancel"
}) => {
  const { theme } = useTheme_default();
  const [editedUser, setEditedUser] = (0, import_react47.useState)(flattenedProfile || profile);
  const [editingFields, setEditingFields] = (0, import_react47.useState)({});
  const triggerRef = (0, import_react47.useRef)(null);
  const PencilIcon = () => /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(
    "svg",
    {
      width: "16",
      height: "16",
      viewBox: "0 0 24 24",
      fill: "none",
      stroke: "currentColor",
      strokeWidth: "2",
      strokeLinecap: "round",
      strokeLinejoin: "round",
      children: /* @__PURE__ */ (0, import_jsx_runtime76.jsx)("path", { d: "M17 3a2.828 2.828 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5L17 3z" })
    }
  );
  const toggleFieldEdit = (0, import_react47.useCallback)((fieldName) => {
    setEditingFields((prev) => ({
      ...prev,
      [fieldName]: !prev[fieldName]
    }));
  }, []);
  const getFieldPlaceholder = (0, import_react47.useCallback)((schema) => {
    const { type, displayName, description, name } = schema;
    const fieldLabel = displayName || description || name || "value";
    switch (type) {
      case "DATE_TIME":
        return `Enter your ${fieldLabel.toLowerCase()}`;
      case "BOOLEAN":
        return `Select ${fieldLabel.toLowerCase()}`;
      case "COMPLEX":
        return `Enter ${fieldLabel.toLowerCase()} details`;
      default:
        return `Enter your ${fieldLabel.toLowerCase()}`;
    }
  }, []);
  const ObjectDisplay = ({ data }) => {
    if (!data || typeof data !== "object") return null;
    return /* @__PURE__ */ (0, import_jsx_runtime76.jsx)("table", { style: { width: "100%", borderCollapse: "collapse" }, children: /* @__PURE__ */ (0, import_jsx_runtime76.jsx)("tbody", { children: Object.entries(data).map(([key, value]) => /* @__PURE__ */ (0, import_jsx_runtime76.jsxs)("tr", { style: { borderBottom: `1px solid ${theme.vars.colors.border}` }, children: [
      /* @__PURE__ */ (0, import_jsx_runtime76.jsx)("td", { style: { padding: theme.vars.spacing.unit, verticalAlign: "top" }, children: /* @__PURE__ */ (0, import_jsx_runtime76.jsxs)("strong", { children: [
        formatLabel(key),
        ":"
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime76.jsx)("td", { style: { padding: theme.vars.spacing.unit, verticalAlign: "top" }, children: typeof value === "object" ? /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(ObjectDisplay, { data: value }) : String(value) })
    ] }, key)) }) });
  };
  function set(obj, path, value) {
    const keys = path.split(".");
    let current = obj;
    for (let i = 0; i < keys.length; i++) {
      const key = keys[i];
      if (i === keys.length - 1) {
        current[key] = value;
      } else {
        if (!current[key] || typeof current[key] !== "object") {
          current[key] = {};
        }
        current = current[key];
      }
    }
  }
  const handleFieldSave = (0, import_react47.useCallback)(
    (schema) => {
      if (!onUpdate || !schema.name) return;
      const fieldName = schema.name;
      let fieldValue = editedUser && fieldName && editedUser[fieldName] !== void 0 ? editedUser[fieldName] : flattenedProfile && flattenedProfile[fieldName] !== void 0 ? flattenedProfile[fieldName] : "";
      if (Array.isArray(fieldValue)) {
        fieldValue = fieldValue.filter((v) => v !== void 0 && v !== null && v !== "");
      }
      let payload = {};
      if (schema.schemaId && schema.schemaId !== import_browser55.WellKnownSchemaIds.User) {
        payload = {
          [schema.schemaId]: {
            [fieldName]: fieldValue
          }
        };
      } else {
        set(payload, fieldName, fieldValue);
      }
      onUpdate(payload);
      toggleFieldEdit(fieldName);
    },
    [editedUser, flattenedProfile, onUpdate, toggleFieldEdit]
  );
  const handleFieldCancel = (0, import_react47.useCallback)(
    (fieldName) => {
      const currentUser2 = flattenedProfile || profile;
      setEditedUser((prev) => ({
        ...prev,
        [fieldName]: currentUser2[fieldName]
      }));
      toggleFieldEdit(fieldName);
    },
    [flattenedProfile, profile, toggleFieldEdit]
  );
  const formatLabel = (0, import_react47.useCallback)(
    (key) => key.split(/(?=[A-Z])|_/).map((word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()).join(" "),
    []
  );
  const styles = useStyles7();
  const defaultAttributeMappings = {
    picture: ["profile", "profileUrl", "picture", "URL"],
    firstName: ["name.givenName", "given_name"],
    lastName: ["name.familyName", "family_name"],
    email: ["emails"],
    username: ["userName", "username", "user_name"]
  };
  const mergedMappings = { ...defaultAttributeMappings, ...attributeMapping };
  const renderSchemaField = (schema, isEditing, onEditValue, onStartEdit) => {
    if (!schema) return null;
    const { value, displayName, description, name, type, required, mutability, subAttributes, multiValued } = schema;
    const label = displayName || description || name || "";
    if (subAttributes && Array.isArray(subAttributes)) {
      return /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(import_jsx_runtime76.Fragment, { children: subAttributes.map((subAttr, index) => /* @__PURE__ */ (0, import_jsx_runtime76.jsxs)("div", { style: styles.field, children: [
        /* @__PURE__ */ (0, import_jsx_runtime76.jsx)("span", { style: styles.label, children: subAttr.displayName || subAttr.description || "" }),
        /* @__PURE__ */ (0, import_jsx_runtime76.jsx)("div", { style: styles.value, children: Array.isArray(subAttr.value) ? subAttr.value.map((item) => typeof item === "object" ? JSON.stringify(item) : String(item)).join(", ") : typeof subAttr.value === "object" ? JSON.stringify(subAttr.value) : String(subAttr.value) })
      ] }, index)) });
    }
    if (Array.isArray(value) || multiValued) {
      const hasValues = Array.isArray(value) ? value.length > 0 : value !== void 0 && value !== null && value !== "";
      const isEditable2 = editable && mutability !== "READ_ONLY" && !readonlyFields.includes(name || "");
      if (isEditing && onEditValue && isEditable2) {
        const currentValue = editedUser && name && editedUser[name] !== void 0 ? editedUser[name] : flattenedProfile && name && flattenedProfile[name] !== void 0 ? flattenedProfile[name] : value;
        let fieldValues;
        if (Array.isArray(currentValue)) {
          fieldValues = currentValue.map(String);
        } else if (currentValue !== void 0 && currentValue !== null && currentValue !== "") {
          fieldValues = [String(currentValue)];
        } else {
          fieldValues = [];
        }
        return /* @__PURE__ */ (0, import_jsx_runtime76.jsxs)(import_jsx_runtime76.Fragment, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime76.jsx)("span", { style: styles.label, children: label }),
          /* @__PURE__ */ (0, import_jsx_runtime76.jsx)("div", { style: styles.value, children: /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(
            MultiInput_default,
            {
              values: fieldValues,
              onChange: (newValues) => {
                if (multiValued || Array.isArray(currentValue)) {
                  onEditValue(newValues);
                } else {
                  onEditValue(newValues[0] || "");
                }
              },
              placeholder: getFieldPlaceholder(schema),
              fieldType: type,
              type: type === "DATE_TIME" ? "date" : type === "STRING" ? "text" : "text",
              required,
              style: {
                marginBottom: 0
              }
            }
          ) })
        ] });
      }
      let displayValue2;
      if (hasValues) {
        if (Array.isArray(value)) {
          displayValue2 = value.map((item) => typeof item === "object" ? JSON.stringify(item) : String(item)).join(", ");
        } else {
          displayValue2 = String(value);
        }
      } else if (isEditable2) {
        displayValue2 = getFieldPlaceholder(schema);
      } else {
        displayValue2 = "-";
      }
      return /* @__PURE__ */ (0, import_jsx_runtime76.jsxs)(import_jsx_runtime76.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime76.jsx)("span", { style: styles.label, children: label }),
        /* @__PURE__ */ (0, import_jsx_runtime76.jsx)("div", { style: { ...styles.value, fontStyle: hasValues ? "normal" : "italic", opacity: hasValues ? 1 : 0.7 }, children: !hasValues && isEditable2 && onStartEdit ? /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(
          Button_default,
          {
            onClick: onStartEdit,
            variant: "text",
            color: "secondary",
            size: "small",
            title: "Click to edit",
            style: {
              fontStyle: "italic",
              textDecoration: "underline",
              opacity: 0.7,
              padding: 0,
              minHeight: "auto"
            },
            children: displayValue2
          }
        ) : displayValue2 })
      ] });
    }
    if (type === "COMPLEX" && typeof value === "object") {
      return /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(ObjectDisplay, { data: value });
    }
    if (isEditing && onEditValue && mutability !== "READ_ONLY" && !readonlyFields.includes(name || "")) {
      const fieldValue = editedUser && name && editedUser[name] !== void 0 ? editedUser[name] : flattenedProfile && name && flattenedProfile[name] !== void 0 ? flattenedProfile[name] : value || "";
      const commonProps = {
        label: void 0,
        // Don't show label in field, we render it outside
        required,
        value: fieldValue,
        onChange: (e) => onEditValue(e.target ? e.target.value : e),
        placeholder: getFieldPlaceholder(schema),
        style: {
          marginBottom: 0
        }
      };
      let field;
      switch (type) {
        case "STRING":
          field = /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(TextField_default, { ...commonProps });
          break;
        case "DATE_TIME":
          field = /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(DatePicker_default, { ...commonProps });
          break;
        case "BOOLEAN":
          field = /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(Checkbox_default, { ...commonProps, checked: !!fieldValue, onChange: (e) => onEditValue(e.target.checked) });
          break;
        case "COMPLEX":
          field = /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(
            "textarea",
            {
              value: fieldValue,
              onChange: (e) => onEditValue(e.target.value),
              placeholder: getFieldPlaceholder(schema),
              required,
              style: {
                ...commonProps.style,
                minHeight: "60px",
                width: "100%",
                padding: "8px",
                border: `1px solid ${theme.vars.colors.border}`,
                borderRadius: theme.vars.borderRadius.small,
                resize: "vertical"
              }
            }
          );
          break;
        default:
          field = /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(TextField_default, { ...commonProps });
      }
      return /* @__PURE__ */ (0, import_jsx_runtime76.jsxs)(import_jsx_runtime76.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime76.jsx)("span", { style: styles.label, children: label }),
        /* @__PURE__ */ (0, import_jsx_runtime76.jsx)("div", { style: styles.value, children: field })
      ] });
    }
    const hasValue = value !== void 0 && value !== null && value !== "";
    const isEditable = editable && mutability !== "READ_ONLY" && !readonlyFields.includes(name || "");
    let displayValue;
    if (hasValue) {
      displayValue = String(value);
    } else if (isEditable) {
      displayValue = getFieldPlaceholder(schema);
    } else {
      displayValue = "-";
    }
    return /* @__PURE__ */ (0, import_jsx_runtime76.jsxs)(import_jsx_runtime76.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime76.jsx)("span", { style: styles.label, children: label }),
      /* @__PURE__ */ (0, import_jsx_runtime76.jsx)("div", { style: { ...styles.value, fontStyle: hasValue ? "normal" : "italic", opacity: hasValue ? 1 : 0.7 }, children: !hasValue && isEditable && onStartEdit ? /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(
        Button_default,
        {
          onClick: onStartEdit,
          variant: "text",
          color: "secondary",
          size: "small",
          title: "Click to edit",
          style: {
            fontStyle: "italic",
            textDecoration: "underline",
            opacity: 0.7,
            padding: 0,
            minHeight: "auto"
          },
          children: displayValue
        }
      ) : displayValue })
    ] });
  };
  const renderUserInfo = (schema) => {
    if (!schema || !schema.name) return null;
    const hasValue = schema.value !== void 0 && schema.value !== "" && schema.value !== null;
    const isFieldEditing = editingFields[schema.name];
    const isReadonlyField = readonlyFields.includes(schema.name);
    const shouldShow = hasValue || isFieldEditing || editable && schema.mutability === "READ_WRITE";
    if (!shouldShow) {
      return null;
    }
    const fieldStyle = {
      ...styles.field,
      display: "flex",
      alignItems: "center",
      gap: theme.vars.spacing.unit
    };
    return /* @__PURE__ */ (0, import_jsx_runtime76.jsxs)("div", { style: fieldStyle, children: [
      /* @__PURE__ */ (0, import_jsx_runtime76.jsx)("div", { style: { flex: 1, display: "flex", alignItems: "center", gap: theme.vars.spacing.unit }, children: renderSchemaField(
        schema,
        isFieldEditing,
        (value) => {
          const tempEditedUser = { ...editedUser };
          tempEditedUser[schema.name] = value;
          setEditedUser(tempEditedUser);
        },
        () => toggleFieldEdit(schema.name)
      ) }),
      editable && schema.mutability !== "READ_ONLY" && !isReadonlyField && /* @__PURE__ */ (0, import_jsx_runtime76.jsxs)(
        "div",
        {
          style: {
            display: "flex",
            gap: `calc(${theme.vars.spacing.unit} / 2)`,
            alignItems: "center",
            marginLeft: theme.vars.spacing.unit
          },
          children: [
            isFieldEditing && /* @__PURE__ */ (0, import_jsx_runtime76.jsxs)(import_jsx_runtime76.Fragment, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(Button_default, { size: "small", color: "primary", variant: "solid", onClick: () => handleFieldSave(schema), children: "Save" }),
              /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(Button_default, { size: "small", color: "secondary", variant: "solid", onClick: () => handleFieldCancel(schema.name), children: "Cancel" })
            ] }),
            !isFieldEditing && hasValue && /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(
              Button_default,
              {
                size: "small",
                color: "tertiary",
                variant: "text",
                onClick: () => toggleFieldEdit(schema.name),
                title: "Edit",
                style: {
                  padding: `calc(${theme.vars.spacing.unit} / 2)`
                },
                children: /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(PencilIcon, {})
              }
            )
          ]
        }
      )
    ] });
  };
  const getDisplayName = () => {
    const firstName = getMappedUserProfileValue_default("firstName", mergedMappings, profile);
    const lastName = getMappedUserProfileValue_default("lastName", mergedMappings, profile);
    if (firstName && lastName) {
      return `${firstName} ${lastName}`;
    }
    return getMappedUserProfileValue_default("username", mergedMappings, profile) || "";
  };
  if (!profile && !flattenedProfile) {
    return fallback;
  }
  const containerStyle = {
    ...styles.root,
    ...cardLayout ? styles.card : {}
  };
  const currentUser = flattenedProfile || profile;
  const avatarAttributes = ["picture"];
  const excludedProps = avatarAttributes.map((attr) => mergedMappings[attr] || attr);
  const renderProfileWithoutSchemas = () => {
    if (!currentUser) return null;
    const profileEntries = Object.entries(currentUser).filter(([key, value]) => {
      if (fieldsToSkip.includes(key)) return false;
      return value !== void 0 && value !== "" && value !== null;
    }).sort(([a], [b]) => a.localeCompare(b));
    return /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(import_jsx_runtime76.Fragment, { children: profileEntries.map(([key, value]) => /* @__PURE__ */ (0, import_jsx_runtime76.jsxs)("div", { style: styles.field, children: [
      /* @__PURE__ */ (0, import_jsx_runtime76.jsx)("span", { style: styles.label, children: formatLabel(key) }),
      /* @__PURE__ */ (0, import_jsx_runtime76.jsx)("div", { style: styles.value, children: typeof value === "object" ? JSON.stringify(value, null, 2) : String(value) })
    ] }, key)) });
  };
  const profileContent = /* @__PURE__ */ (0, import_jsx_runtime76.jsxs)(Card_default, { style: containerStyle, className: (0, import_clsx21.default)((0, import_browser55.withVendorCSSClassPrefix)("user-profile"), className), children: [
    /* @__PURE__ */ (0, import_jsx_runtime76.jsx)("div", { style: styles.header, children: /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(
      Avatar,
      {
        imageUrl: getMappedUserProfileValue_default("picture", mergedMappings, currentUser),
        name: getDisplayName(),
        size: 80,
        alt: `${getDisplayName()}'s avatar`
      }
    ) }),
    /* @__PURE__ */ (0, import_jsx_runtime76.jsx)("div", { style: styles.infoContainer, children: schemas && schemas.length > 0 ? (
      // Render with schemas when available
      schemas.filter((schema) => {
        if (fieldsToSkip.includes(schema.name)) return false;
        if (!editable) {
          const value = flattenedProfile && schema.name ? flattenedProfile[schema.name] : void 0;
          return value !== void 0 && value !== "" && value !== null;
        }
        return true;
      }).sort((a, b) => {
        const orderA = a.displayOrder ? parseInt(a.displayOrder) : 999;
        const orderB = b.displayOrder ? parseInt(b.displayOrder) : 999;
        return orderA - orderB;
      }).map((schema, index) => {
        const value = flattenedProfile && schema.name ? flattenedProfile[schema.name] : void 0;
        const schemaWithValue = {
          ...schema,
          value
        };
        return /* @__PURE__ */ (0, import_jsx_runtime76.jsx)("div", { children: renderUserInfo(schemaWithValue) }, schema.name || index);
      })
    ) : (
      // Fallback: render profile fields directly when schemas are not available
      renderProfileWithoutSchemas()
    ) })
  ] });
  if (mode === "popup") {
    return /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(Dialog, { open, onOpenChange, children: /* @__PURE__ */ (0, import_jsx_runtime76.jsxs)(DialogContent, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(DialogHeading, { children: title }),
      /* @__PURE__ */ (0, import_jsx_runtime76.jsx)("div", { style: { padding: `calc(${theme.vars.spacing.unit} * 2)` }, children: profileContent })
    ] }) });
  }
  return profileContent;
};
var useStyles7 = () => {
  const { theme, colorScheme } = useTheme_default();
  return (0, import_react47.useMemo)(
    () => ({
      root: {
        padding: `calc(${theme.vars.spacing.unit} * 4)`,
        minWidth: "600px",
        margin: "0 auto"
      },
      card: {
        background: theme.vars.colors.background.surface,
        borderRadius: theme.vars.borderRadius.large
      },
      header: {
        display: "flex",
        alignItems: "center",
        gap: `calc(${theme.vars.spacing.unit} * 1.5)`,
        marginBottom: `calc(${theme.vars.spacing.unit} * 1.5)`
      },
      profileInfo: {
        flex: 1
      },
      name: {
        fontSize: "1.5rem",
        fontWeight: 600,
        margin: "0",
        color: theme.vars.colors.text.primary
      },
      infoContainer: {
        display: "flex",
        flexDirection: "column",
        gap: theme.vars.spacing.unit
      },
      field: {
        display: "flex",
        alignItems: "flex-start",
        padding: `calc(${theme.vars.spacing.unit} / 2) 0`,
        borderBottom: `1px solid ${theme.vars.colors.border}`,
        minHeight: "28px"
      },
      lastField: {
        borderBottom: "none"
      },
      label: {
        fontSize: "0.875rem",
        fontWeight: 500,
        color: theme.vars.colors.text.secondary,
        width: "120px",
        flexShrink: 0,
        lineHeight: "28px"
      },
      value: {
        color: theme.vars.colors.text.primary,
        flex: 1,
        display: "flex",
        alignItems: "center",
        gap: theme.vars.spacing.unit,
        overflow: "hidden",
        minHeight: "28px",
        "& input": {
          height: "32px",
          margin: 0
        },
        lineHeight: "28px",
        wordBreak: "break-word",
        "& table": {
          backgroundColor: theme.vars.colors.background.surface,
          borderRadius: theme.vars.borderRadius.medium,
          whiteSpace: "normal"
        },
        "& td": {
          borderColor: theme.vars.colors.border
        }
      },
      popup: {
        padding: `calc(${theme.vars.spacing.unit} * 2)`
      }
    }),
    [theme, colorScheme]
  );
};
var BaseUserProfile_default = BaseUserProfile;

// src/api/updateMeProfile.ts
var import_browser56 = require("@asgardeo/browser");
var httpClient5 = import_browser56.AsgardeoSPAClient.getInstance().httpRequest.bind(import_browser56.AsgardeoSPAClient.getInstance());
var updateMeProfile = async ({ fetcher, ...requestConfig }) => {
  const defaultFetcher = async (url, config) => {
    const response = await httpClient5({
      url,
      method: config.method || "PATCH",
      headers: config.headers,
      data: config.body ? JSON.parse(config.body) : void 0
    });
    return {
      ok: response.status >= 200 && response.status < 300,
      status: response.status,
      statusText: response.statusText || "",
      json: () => Promise.resolve(response.data),
      text: () => Promise.resolve(typeof response.data === "string" ? response.data : JSON.stringify(response.data))
    };
  };
  return (0, import_browser56.updateMeProfile)({
    ...requestConfig,
    fetcher: fetcher || defaultFetcher
  });
};
var updateMeProfile_default = updateMeProfile;

// src/components/presentation/UserProfile/UserProfile.tsx
var import_jsx_runtime77 = require("react/jsx-runtime");
var UserProfile3 = ({ ...rest }) => {
  const { baseUrl } = useAsgardeo_default();
  const { profile, flattenedProfile, schemas, onUpdateProfile } = useUser_default();
  const handleProfileUpdate = async (payload) => {
    const response = await updateMeProfile_default({ baseUrl, payload });
    onUpdateProfile(response);
  };
  return /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(
    BaseUserProfile_default,
    {
      profile,
      flattenedProfile,
      schemas,
      onUpdate: handleProfileUpdate,
      ...rest
    }
  );
};
var UserProfile_default = UserProfile3;

// src/components/presentation/UserDropdown/BaseUserDropdown.tsx
var import_browser57 = require("@asgardeo/browser");
var import_react48 = require("@floating-ui/react");
var import_clsx22 = __toESM(require("clsx"), 1);
var import_react49 = require("react");
var import_jsx_runtime78 = require("react/jsx-runtime");
var useStyles8 = () => {
  const { theme, colorScheme } = useTheme_default();
  return (0, import_react49.useMemo)(
    () => ({
      trigger: {
        display: "inline-flex",
        alignItems: "center",
        gap: theme.vars.spacing.unit,
        padding: `calc(${theme.vars.spacing.unit} * 0.5)`,
        border: "none",
        backgroundColor: "none",
        cursor: "pointer",
        borderRadius: theme.vars.borderRadius.medium,
        "&:hover": {
          backgroundColor: theme.vars.colors.background.surface
        }
      },
      userName: {
        color: theme.vars.colors.text.primary,
        fontWeight: 500,
        overflow: "hidden",
        textOverflow: "ellipsis",
        whiteSpace: "nowrap",
        maxWidth: "120px"
      },
      dropdownContent: {
        minWidth: "270px",
        maxWidth: "500px",
        backgroundColor: theme.vars.colors.background.surface,
        borderRadius: theme.vars.borderRadius.medium,
        boxShadow: theme.vars.shadows.medium,
        border: `1px solid ${theme.vars.colors.border}`,
        outline: "none",
        zIndex: 1e3
      },
      dropdownMenu: {
        display: "flex",
        flexDirection: "column",
        width: "100%"
      },
      menuItem: {
        display: "flex",
        alignItems: "center",
        justifyContent: "flex-start",
        gap: theme.vars.spacing.unit,
        padding: `calc(${theme.vars.spacing.unit} * 1.5) calc(${theme.vars.spacing.unit} * 2)`,
        width: "100%",
        color: theme.vars.colors.text.primary,
        textDecoration: "none",
        border: "none",
        backgroundColor: "none",
        cursor: "pointer",
        fontSize: "0.875rem",
        textAlign: "left",
        borderRadius: theme.vars.borderRadius.medium,
        transition: "background-color 0.15s ease-in-out"
      },
      menuItemAnchor: {
        display: "flex",
        alignItems: "center",
        justifyContent: "flex-start",
        gap: theme.vars.spacing.unit,
        padding: `calc(${theme.vars.spacing.unit} * 1.5) calc(${theme.vars.spacing.unit} * 2)`,
        width: "100%",
        color: theme.vars.colors.text.primary,
        textDecoration: "none",
        border: "none",
        background: "none",
        cursor: "pointer",
        fontSize: "0.875rem",
        textAlign: "left",
        borderRadius: theme.vars.borderRadius.medium,
        transition: "background-color 0.15s ease-in-out"
      },
      divider: {
        margin: `calc(${theme.vars.spacing.unit} * 0.5) 0`,
        borderBottom: `1px solid ${theme.vars.colors.border}`
      },
      dropdownHeader: {
        display: "flex",
        alignItems: "center",
        gap: theme.vars.spacing.unit,
        padding: `calc(${theme.vars.spacing.unit} * 1.5)`,
        borderBottom: `1px solid ${theme.vars.colors.border}`
      },
      headerInfo: {
        display: "flex",
        flexDirection: "column",
        gap: `calc(${theme.vars.spacing.unit} / 4)`,
        flex: 1,
        minWidth: 0,
        overflow: "hidden",
        textOverflow: "ellipsis",
        whiteSpace: "nowrap"
      },
      headerName: {
        color: theme.vars.colors.text.primary,
        fontSize: "1rem",
        fontWeight: 500,
        margin: 0,
        overflow: "hidden",
        textOverflow: "ellipsis",
        whiteSpace: "nowrap"
      },
      headerEmail: {
        color: theme.vars.colors.text.secondary,
        fontSize: "0.875rem",
        margin: 0,
        overflow: "hidden",
        textOverflow: "ellipsis",
        whiteSpace: "nowrap"
      },
      loadingContainer: {
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        minHeight: "80px",
        gap: theme.vars.spacing.unit
      },
      loadingText: {
        color: theme.vars.colors.text.secondary,
        fontSize: "0.875rem"
      }
    }),
    [theme, colorScheme]
  );
};
var BaseUserDropdown = ({
  fallback = null,
  className = "",
  user,
  isLoading = false,
  portalId = "asgardeo-user-dropdown",
  menuItems = [],
  showTriggerLabel = false,
  avatarSize = 32,
  onManageProfile,
  onSignOut,
  attributeMapping = {}
}) => {
  const styles = useStyles8();
  const [isOpen, setIsOpen] = (0, import_react49.useState)(false);
  const [hoveredItemIndex, setHoveredItemIndex] = (0, import_react49.useState)(null);
  const { theme, colorScheme } = useTheme_default();
  const { refs, floatingStyles, context } = (0, import_react48.useFloating)({
    open: isOpen,
    onOpenChange: setIsOpen,
    placement: "bottom-end",
    middleware: [(0, import_react48.offset)(5), (0, import_react48.flip)({ fallbackAxisSideDirection: "end" }), (0, import_react48.shift)({ padding: 5 })],
    whileElementsMounted: import_react48.autoUpdate
  });
  const click = (0, import_react48.useClick)(context);
  const dismiss = (0, import_react48.useDismiss)(context);
  const role = (0, import_react48.useRole)(context);
  const { getReferenceProps, getFloatingProps } = (0, import_react48.useInteractions)([click, dismiss, role]);
  const defaultAttributeMappings = {
    picture: ["profile", "profileUrl", "picture", "URL"],
    firstName: ["name.givenName", "given_name"],
    lastName: ["name.familyName", "family_name"],
    email: ["emails"],
    username: ["userName", "username", "user_name"]
  };
  const mergedMappings = { ...defaultAttributeMappings, ...attributeMapping };
  const getDisplayName = () => {
    const firstName = getMappedUserProfileValue_default("firstName", mergedMappings, user);
    const lastName = getMappedUserProfileValue_default("lastName", mergedMappings, user);
    if (firstName && lastName) {
      return `${firstName} ${lastName}`;
    }
    return getMappedUserProfileValue_default("username", mergedMappings, user) || "";
  };
  if (fallback && !user && !isLoading) {
    return fallback;
  }
  const handleMenuItemClick = (item) => {
    if (item.onClick) {
      item.onClick();
    }
    setIsOpen(false);
  };
  const defaultMenuItems = [];
  if (onManageProfile) {
    defaultMenuItems.push({
      label: "Manage Profile",
      onClick: onManageProfile,
      icon: /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(User_default2, { width: "16", height: "16" })
    });
  }
  if (onSignOut) {
    defaultMenuItems.push({
      label: "Sign Out",
      onClick: onSignOut,
      icon: /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(LogOut_default, { width: "16", height: "16" })
    });
  }
  const allMenuItems = [...menuItems];
  if (defaultMenuItems.length > 0) {
    if (menuItems.length > 0) {
      allMenuItems.push({ label: "", onClick: void 0 });
    }
    allMenuItems.push(...defaultMenuItems);
  }
  return /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)("div", { className: (0, import_clsx22.default)((0, import_browser57.withVendorCSSClassPrefix)("user-dropdown"), className), children: [
    /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)(
      Button_default,
      {
        ref: refs.setReference,
        className: (0, import_browser57.withVendorCSSClassPrefix)("user-dropdown__trigger"),
        style: styles.trigger,
        color: "tertiary",
        variant: "text",
        size: "medium",
        ...getReferenceProps(),
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(
            Avatar,
            {
              imageUrl: getMappedUserProfileValue_default("picture", mergedMappings, user),
              name: getDisplayName(),
              size: avatarSize,
              alt: `${getDisplayName()}'s avatar`
            }
          ),
          showTriggerLabel && /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(
            Typography_default,
            {
              variant: "body2",
              className: (0, import_browser57.withVendorCSSClassPrefix)("user-dropdown__trigger-label"),
              style: styles.userName,
              children: getDisplayName()
            }
          )
        ]
      }
    ),
    isOpen && /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(import_react48.FloatingPortal, { id: portalId, children: /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(import_react48.FloatingFocusManager, { context, modal: false, children: /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)(
      "div",
      {
        ref: refs.setFloating,
        className: (0, import_browser57.withVendorCSSClassPrefix)("user-dropdown__content"),
        style: { ...floatingStyles, ...styles.dropdownContent },
        ...getFloatingProps(),
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)("div", { className: (0, import_browser57.withVendorCSSClassPrefix)("user-dropdown__header"), style: styles.dropdownHeader, children: [
            /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(
              Avatar,
              {
                imageUrl: getMappedUserProfileValue_default("picture", mergedMappings, user),
                name: getDisplayName(),
                size: avatarSize * 1.25,
                alt: `${getDisplayName()}'s avatar`
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)("div", { className: (0, import_browser57.withVendorCSSClassPrefix)("user-dropdown__header-info"), style: styles.headerInfo, children: [
              /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(
                Typography_default,
                {
                  noWrap: true,
                  className: (0, import_browser57.withVendorCSSClassPrefix)("user-dropdown__header-name"),
                  variant: "body1",
                  fontWeight: "medium",
                  children: getDisplayName()
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(
                Typography_default,
                {
                  noWrap: true,
                  className: (0, import_browser57.withVendorCSSClassPrefix)("user-dropdown__header-email"),
                  variant: "caption",
                  color: "secondary",
                  children: getMappedUserProfileValue_default("username", mergedMappings, user) || getMappedUserProfileValue_default("email", mergedMappings, user)
                }
              )
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime78.jsx)("div", { className: (0, import_browser57.withVendorCSSClassPrefix)("user-dropdown__menu"), style: styles.dropdownMenu, children: allMenuItems.map((item, index) => /* @__PURE__ */ (0, import_jsx_runtime78.jsx)("div", { children: item.label === "" ? (
            // Render divider for empty label placeholder
            /* @__PURE__ */ (0, import_jsx_runtime78.jsx)("div", { className: (0, import_browser57.withVendorCSSClassPrefix)("user-dropdown__menu-divider"), style: styles.divider })
          ) : item.href ? /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)(
            "a",
            {
              href: item.href,
              style: {
                ...styles.menuItemAnchor,
                backgroundColor: hoveredItemIndex === index ? theme.vars.colors.action?.hover : "transparent"
              },
              className: (0, import_browser57.withVendorCSSClassPrefix)("user-dropdown__menu-item"),
              onMouseEnter: () => setHoveredItemIndex(index),
              onMouseLeave: () => setHoveredItemIndex(null),
              onFocus: () => setHoveredItemIndex(index),
              onBlur: () => setHoveredItemIndex(null),
              children: [
                item.icon,
                /* @__PURE__ */ (0, import_jsx_runtime78.jsx)("span", { children: item.label })
              ]
            }
          ) : /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(
            Button_default,
            {
              onClick: () => handleMenuItemClick(item),
              style: {
                ...styles.menuItem,
                backgroundColor: hoveredItemIndex === index ? theme.vars.colors.action?.hover : "transparent"
              },
              className: (0, import_browser57.withVendorCSSClassPrefix)("user-dropdown__menu-item"),
              color: "tertiary",
              variant: "text",
              size: "small",
              startIcon: item.icon,
              onMouseEnter: () => setHoveredItemIndex(index),
              onMouseLeave: () => setHoveredItemIndex(null),
              children: item.label
            }
          ) }, index)) })
        ]
      }
    ) }) })
  ] });
};
var BaseUserDropdown_default = BaseUserDropdown;

// src/components/presentation/UserDropdown/UserDropdown.tsx
var import_react50 = require("react");
var import_jsx_runtime79 = require("react/jsx-runtime");
var UserDropdown = ({
  children,
  renderTrigger,
  renderDropdown,
  onSignOut,
  ...rest
}) => {
  const { user, isLoading, signOut } = useAsgardeo_default();
  const [isProfileOpen, setIsProfileOpen] = (0, import_react50.useState)(false);
  const handleManageProfile = () => {
    setIsProfileOpen(true);
  };
  const handleSignOut = () => {
    signOut();
    onSignOut && onSignOut();
  };
  const closeProfile = () => {
    setIsProfileOpen(false);
  };
  const renderProps = {
    user,
    isLoading,
    openProfile: handleManageProfile,
    signOut: handleSignOut,
    isProfileOpen,
    closeProfile
  };
  if (children) {
    return /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)(import_jsx_runtime79.Fragment, { children: [
      children(renderProps),
      /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(UserProfile_default, { mode: "popup", open: isProfileOpen, onOpenChange: setIsProfileOpen })
    ] });
  }
  if (renderTrigger || renderDropdown) {
    return /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)(import_jsx_runtime79.Fragment, { children: [
      renderTrigger ? renderTrigger(renderProps) : /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(
        BaseUserDropdown_default,
        {
          user,
          isLoading,
          onManageProfile: handleManageProfile,
          onSignOut: handleSignOut,
          ...rest
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(UserProfile_default, { mode: "popup", open: isProfileOpen, onOpenChange: setIsProfileOpen })
    ] });
  }
  return /* @__PURE__ */ (0, import_jsx_runtime79.jsxs)(import_jsx_runtime79.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(
      BaseUserDropdown_default,
      {
        user,
        isLoading,
        onManageProfile: handleManageProfile,
        onSignOut: handleSignOut,
        ...rest
      }
    ),
    isProfileOpen && /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(UserProfile_default, { mode: "popup", open: isProfileOpen, onOpenChange: setIsProfileOpen })
  ] });
};
var UserDropdown_default = UserDropdown;

// src/components/presentation/OrganizationSwitcher/BaseOrganizationSwitcher.tsx
var import_browser58 = require("@asgardeo/browser");
var import_react51 = require("@floating-ui/react");
var import_clsx23 = __toESM(require("clsx"), 1);
var import_react52 = require("react");

// src/components/primitives/Icons/Building.tsx
var import_jsx_runtime80 = require("react/jsx-runtime");
var Building = ({ color = "currentColor", height = 24, width = 24 }) => /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)("svg", { width, height, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [
  /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(
    "path",
    {
      d: "M6 22V4a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v18Z",
      stroke: color,
      strokeWidth: "2",
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }
  ),
  /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("path", { d: "M6 12h4", stroke: color, strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round" }),
  /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("path", { d: "M6 8h4", stroke: color, strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round" }),
  /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("path", { d: "M14 8h4", stroke: color, strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round" }),
  /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("path", { d: "M14 12h4", stroke: color, strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round" }),
  /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("path", { d: "M6 18h4", stroke: color, strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round" }),
  /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("path", { d: "M14 18h4", stroke: color, strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round" })
] });
Building.displayName = "Building";
var Building_default = Building;

// src/components/primitives/Icons/Check.tsx
var import_jsx_runtime81 = require("react/jsx-runtime");
var Check = ({ color = "currentColor", height = 24, width = 24 }) => /* @__PURE__ */ (0, import_jsx_runtime81.jsx)("svg", { width, height, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: /* @__PURE__ */ (0, import_jsx_runtime81.jsx)("path", { d: "M20 6 9 17l-5-5", stroke: color, strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round" }) });
Check.displayName = "Check";
var Check_default = Check;

// src/components/primitives/Icons/ChevronDown.tsx
var import_jsx_runtime82 = require("react/jsx-runtime");
var ChevronDown = ({ color = "currentColor", height = 24, width = 24 }) => /* @__PURE__ */ (0, import_jsx_runtime82.jsx)("svg", { width, height, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: /* @__PURE__ */ (0, import_jsx_runtime82.jsx)("path", { d: "m6 9 6 6 6-6", stroke: color, strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round" }) });
ChevronDown.displayName = "ChevronDown";
var ChevronDown_default = ChevronDown;

// src/components/presentation/OrganizationSwitcher/BaseOrganizationSwitcher.tsx
var import_jsx_runtime83 = require("react/jsx-runtime");
var useStyles9 = () => {
  const { theme, colorScheme } = useTheme_default();
  return (0, import_react52.useMemo)(
    () => ({
      trigger: {
        display: "inline-flex",
        alignItems: "center",
        gap: theme.vars.spacing.unit,
        padding: `calc(${theme.vars.spacing.unit} * 0.75) ${theme.vars.spacing.unit}`,
        border: `1px solid ${theme.vars.colors.border}`,
        background: theme.vars.colors.background.surface,
        cursor: "pointer",
        borderRadius: theme.vars.borderRadius.medium,
        minWidth: "160px",
        "&:hover": {
          backgroundColor: theme.vars.colors.background.surface
        }
      },
      orgName: {
        color: theme.vars.colors.text.primary,
        fontWeight: 500,
        overflow: "hidden",
        textOverflow: "ellipsis",
        whiteSpace: "nowrap",
        flex: 1
      },
      dropdownContent: {
        minWidth: "280px",
        maxWidth: "400px",
        backgroundColor: theme.vars.colors.background.surface,
        borderRadius: theme.vars.borderRadius.medium,
        boxShadow: theme.vars.shadows.medium,
        border: `1px solid ${theme.vars.colors.border}`,
        outline: "none",
        zIndex: 1e3
      },
      dropdownMenu: {
        display: "flex",
        flexDirection: "column",
        width: "100%"
      },
      menuItem: {
        display: "flex",
        alignItems: "center",
        justifyContent: "flex-start",
        gap: theme.vars.spacing.unit,
        padding: `calc(${theme.vars.spacing.unit} * 1.5) calc(${theme.vars.spacing.unit} * 2)`,
        width: "100%",
        color: theme.vars.colors.text.primary,
        textDecoration: "none",
        border: "none",
        backgroundColor: "none",
        cursor: "pointer",
        fontSize: "0.875rem",
        textAlign: "left",
        borderRadius: theme.vars.borderRadius.medium,
        transition: "background-color 0.15s ease-in-out",
        "&:hover": {
          backgroundColor: theme.vars.colors.action?.hover || "rgba(0, 0, 0, 0.04)"
        }
      },
      organizationInfo: {
        display: "flex",
        flexDirection: "column",
        gap: `calc(${theme.vars.spacing.unit} / 4)`,
        flex: 1,
        minWidth: 0,
        overflow: "hidden"
      },
      organizationName: {
        color: theme.vars.colors.text.primary,
        fontSize: "0.875rem",
        fontWeight: 500,
        margin: 0,
        overflow: "hidden",
        textOverflow: "ellipsis",
        whiteSpace: "nowrap"
      },
      organizationMeta: {
        color: theme.vars.colors.text.secondary,
        fontSize: "0.75rem",
        margin: 0,
        overflow: "hidden",
        textOverflow: "ellipsis",
        whiteSpace: "nowrap"
      },
      divider: {
        margin: `calc(${theme.vars.spacing.unit} * 0.5) 0`,
        borderBottom: `1px solid ${theme.vars.colors.border}`
      },
      dropdownHeader: {
        display: "flex",
        alignItems: "center",
        gap: theme.vars.spacing.unit,
        padding: `${theme.vars.spacing.unit} calc(${theme.vars.spacing.unit} * 2)`
      },
      loadingContainer: {
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        minHeight: "80px",
        gap: theme.vars.spacing.unit
      },
      loadingText: {
        color: theme.vars.colors.text.secondary,
        fontSize: "0.875rem"
      },
      errorContainer: {
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        minHeight: "80px",
        padding: `calc(${theme.vars.spacing.unit} * 2)`
      },
      errorText: {
        color: theme.vars.colors.text.secondary,
        fontSize: "0.875rem",
        textAlign: "center"
      },
      manageButton: {
        minWidth: "auto",
        marginLeft: "auto"
      },
      roleCapitalized: {
        textTransform: "capitalize"
      },
      sectionHeader: {
        textTransform: "uppercase",
        letterSpacing: "0.05em",
        color: theme.vars.colors.text.secondary
      },
      sectionHeaderContainer: {
        borderTop: "none",
        borderBottom: "none",
        paddingBottom: `calc(${theme.vars.spacing.unit} / 2)`
      }
    }),
    [theme, colorScheme]
  );
};
var BaseOrganizationSwitcher = ({
  organizations,
  currentOrganization,
  loading = false,
  error,
  onOrganizationSwitch,
  onManageProfile,
  className = "",
  style,
  renderOrganization,
  renderLoading,
  renderError,
  showRole = false,
  showMemberCount = true,
  menuItems = [],
  portalId = "asgardeo-organization-switcher",
  showTriggerLabel = true,
  avatarSize = 24,
  fallback = null
}) => {
  const styles = useStyles9();
  const [isOpen, setIsOpen] = (0, import_react52.useState)(false);
  const [hoveredItemIndex, setHoveredItemIndex] = (0, import_react52.useState)(null);
  const { theme, colorScheme } = useTheme_default();
  const { t } = useTranslation_default();
  const { refs, floatingStyles, context } = (0, import_react51.useFloating)({
    open: isOpen,
    onOpenChange: setIsOpen,
    placement: "bottom-end",
    middleware: [(0, import_react51.offset)(5), (0, import_react51.flip)({ fallbackAxisSideDirection: "end" }), (0, import_react51.shift)({ padding: 5 })],
    whileElementsMounted: import_react51.autoUpdate
  });
  const click = (0, import_react51.useClick)(context);
  const dismiss = (0, import_react51.useDismiss)(context);
  const role = (0, import_react51.useRole)(context);
  const { getReferenceProps, getFloatingProps } = (0, import_react51.useInteractions)([click, dismiss, role]);
  if (fallback && !currentOrganization && !loading && organizations.length === 0) {
    return fallback;
  }
  const handleOrganizationSwitch = (organization) => {
    onOrganizationSwitch(organization);
    setIsOpen(false);
  };
  const handleMenuItemClick = (item) => {
    if (item.onClick) {
      item.onClick();
    }
    setIsOpen(false);
  };
  const switchableOrganizations = organizations.filter(
    (org) => org.id !== currentOrganization?.id
  );
  const defaultRenderOrganization2 = (organization, isSelected) => /* @__PURE__ */ (0, import_jsx_runtime83.jsxs)(import_jsx_runtime83.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(
      Avatar,
      {
        variant: "square",
        imageUrl: organization.avatar,
        name: organization.name,
        size: avatarSize * 1.25,
        alt: `${organization.name} avatar`
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime83.jsxs)("div", { style: styles.organizationInfo, children: [
      /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(Typography_default, { variant: "body2", fontWeight: "medium", style: styles.organizationName, children: organization.name }),
      /* @__PURE__ */ (0, import_jsx_runtime83.jsxs)("div", { style: styles.organizationMeta, children: [
        showMemberCount && organization.memberCount !== void 0 && /* @__PURE__ */ (0, import_jsx_runtime83.jsxs)("span", { children: [
          organization.memberCount,
          " ",
          organization.memberCount === 1 ? t("organization.switcher.member") : t("organization.switcher.members")
        ] }),
        showRole && organization.role && showMemberCount && organization.memberCount !== void 0 && /* @__PURE__ */ (0, import_jsx_runtime83.jsx)("span", { children: " \u2022 " }),
        showRole && organization.role && /* @__PURE__ */ (0, import_jsx_runtime83.jsx)("span", { style: styles.roleCapitalized, children: organization.role })
      ] })
    ] }),
    isSelected && /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(Check_default, { width: "16", height: "16", color: theme.vars.colors.text.primary })
  ] });
  const defaultRenderLoading2 = () => /* @__PURE__ */ (0, import_jsx_runtime83.jsx)("div", { style: styles.loadingContainer, children: /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(Typography_default, { variant: "caption", style: styles.loadingText, children: t("organization.switcher.loading.organizations") }) });
  const defaultRenderError2 = (errorMessage) => /* @__PURE__ */ (0, import_jsx_runtime83.jsx)("div", { style: styles.errorContainer, children: /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(Typography_default, { variant: "caption", style: styles.errorText, children: errorMessage }) });
  return /* @__PURE__ */ (0, import_jsx_runtime83.jsxs)("div", { className: (0, import_clsx23.default)((0, import_browser58.withVendorCSSClassPrefix)("organization-switcher"), className), style, children: [
    /* @__PURE__ */ (0, import_jsx_runtime83.jsxs)(
      Button_default,
      {
        ref: refs.setReference,
        className: (0, import_browser58.withVendorCSSClassPrefix)("organization-switcher__trigger"),
        style: styles.trigger,
        color: "tertiary",
        variant: "outline",
        size: "medium",
        ...getReferenceProps(),
        children: [
          currentOrganization ? /* @__PURE__ */ (0, import_jsx_runtime83.jsxs)(import_jsx_runtime83.Fragment, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(
              Avatar,
              {
                variant: "square",
                imageUrl: currentOrganization.avatar,
                name: currentOrganization.name,
                size: avatarSize,
                alt: `${currentOrganization.name} avatar`
              }
            ),
            showTriggerLabel && /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(
              Typography_default,
              {
                variant: "body2",
                className: (0, import_browser58.withVendorCSSClassPrefix)("organization-switcher__trigger-label"),
                style: styles.orgName,
                children: currentOrganization.name
              }
            )
          ] }) : /* @__PURE__ */ (0, import_jsx_runtime83.jsxs)(import_jsx_runtime83.Fragment, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(Building_default, { width: avatarSize, height: avatarSize }),
            showTriggerLabel && /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(
              Typography_default,
              {
                variant: "body2",
                className: (0, import_browser58.withVendorCSSClassPrefix)("organization-switcher__trigger-label"),
                style: styles.orgName,
                children: t("organization.switcher.select.organization")
              }
            )
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(ChevronDown_default, { width: "16", height: "16" })
        ]
      }
    ),
    isOpen && /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(import_react51.FloatingPortal, { id: portalId, children: /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(import_react51.FloatingFocusManager, { context, modal: false, children: /* @__PURE__ */ (0, import_jsx_runtime83.jsxs)(
      "div",
      {
        ref: refs.setFloating,
        className: (0, import_browser58.withVendorCSSClassPrefix)("organization-switcher__content"),
        style: { ...floatingStyles, ...styles.dropdownContent },
        ...getFloatingProps(),
        children: [
          currentOrganization && /* @__PURE__ */ (0, import_jsx_runtime83.jsxs)(
            "div",
            {
              className: (0, import_browser58.withVendorCSSClassPrefix)("organization-switcher__header"),
              style: styles.dropdownHeader,
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(
                  Avatar,
                  {
                    variant: "square",
                    imageUrl: currentOrganization.avatar,
                    name: currentOrganization.name,
                    size: avatarSize * 1.5,
                    alt: `${currentOrganization.name} avatar`
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime83.jsxs)(
                  "div",
                  {
                    className: (0, import_browser58.withVendorCSSClassPrefix)("organization-switcher__header-info"),
                    style: styles.organizationInfo,
                    children: [
                      /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(
                        Typography_default,
                        {
                          noWrap: true,
                          className: (0, import_browser58.withVendorCSSClassPrefix)("organization-switcher__header-name"),
                          variant: "body1",
                          fontWeight: "medium",
                          style: styles.organizationName,
                          children: currentOrganization.name
                        }
                      ),
                      /* @__PURE__ */ (0, import_jsx_runtime83.jsxs)("div", { style: styles.organizationMeta, children: [
                        showMemberCount && currentOrganization.memberCount !== void 0 && /* @__PURE__ */ (0, import_jsx_runtime83.jsxs)(
                          Typography_default,
                          {
                            noWrap: true,
                            className: (0, import_browser58.withVendorCSSClassPrefix)("organization-switcher__header-meta"),
                            variant: "caption",
                            color: "secondary",
                            children: [
                              currentOrganization.memberCount,
                              " ",
                              currentOrganization.memberCount === 1 ? t("organization.switcher.member") : t("organization.switcher.members"),
                              showRole && currentOrganization.role && /* @__PURE__ */ (0, import_jsx_runtime83.jsxs)("span", { children: [
                                " \u2022 ",
                                currentOrganization.role
                              ] })
                            ]
                          }
                        ),
                        showRole && currentOrganization.role && (!showMemberCount || currentOrganization.memberCount === void 0) && /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(
                          Typography_default,
                          {
                            noWrap: true,
                            className: (0, import_browser58.withVendorCSSClassPrefix)("organization-switcher__header-role"),
                            variant: "caption",
                            color: "secondary",
                            style: styles.roleCapitalized,
                            children: currentOrganization.role
                          }
                        )
                      ] })
                    ]
                  }
                ),
                onManageProfile && /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(
                  Button_default,
                  {
                    onClick: onManageProfile,
                    color: "tertiary",
                    variant: "outline",
                    size: "small",
                    "aria-label": "Manage Organization Profile",
                    style: styles.manageButton,
                    endIcon: /* @__PURE__ */ (0, import_jsx_runtime83.jsxs)(
                      "svg",
                      {
                        width: "16",
                        height: "16",
                        viewBox: "0 0 24 24",
                        fill: "none",
                        stroke: "currentColor",
                        strokeWidth: "2",
                        strokeLinecap: "round",
                        strokeLinejoin: "round",
                        children: [
                          /* @__PURE__ */ (0, import_jsx_runtime83.jsx)("circle", { cx: "12", cy: "12", r: "3" }),
                          /* @__PURE__ */ (0, import_jsx_runtime83.jsx)("path", { d: "M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1 1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z" })
                        ]
                      }
                    ),
                    children: t("organization.switcher.manage.button")
                  }
                )
              ]
            }
          ),
          organizations.length > 1 && /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(
            "div",
            {
              style: {
                ...styles.dropdownHeader,
                ...styles.sectionHeaderContainer,
                borderTop: currentOrganization ? `1px solid ${theme.vars.colors.border}` : "none"
              },
              children: /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(Typography_default, { variant: "caption", fontWeight: 600, style: styles.sectionHeader, children: t("organization.switcher.switch.organization") })
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime83.jsx)("div", { className: (0, import_browser58.withVendorCSSClassPrefix)("organization-switcher__menu"), style: styles.dropdownMenu, children: loading ? renderLoading ? renderLoading() : defaultRenderLoading2() : error ? renderError ? renderError(error) : defaultRenderError2(error) : /* @__PURE__ */ (0, import_jsx_runtime83.jsxs)(import_jsx_runtime83.Fragment, { children: [
            switchableOrganizations.map((organization) => {
              const isSelected = false;
              return /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(
                Button_default,
                {
                  onClick: () => handleOrganizationSwitch(organization),
                  className: (0, import_browser58.withVendorCSSClassPrefix)("organization-switcher__menu-item"),
                  color: "tertiary",
                  variant: "text",
                  size: "small",
                  style: {
                    ...styles.menuItem,
                    backgroundColor: hoveredItemIndex === switchableOrganizations.indexOf(organization) ? theme.vars.colors.action?.hover : "transparent"
                  },
                  onMouseEnter: () => setHoveredItemIndex(switchableOrganizations.indexOf(organization)),
                  onMouseLeave: () => setHoveredItemIndex(null),
                  children: renderOrganization ? renderOrganization(organization, isSelected) : defaultRenderOrganization2(organization, isSelected)
                },
                organization.id
              );
            }),
            menuItems.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime83.jsxs)(import_jsx_runtime83.Fragment, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(
                "div",
                {
                  className: (0, import_browser58.withVendorCSSClassPrefix)("organization-switcher__menu-divider"),
                  style: styles.divider
                }
              ),
              menuItems.map(
                (item, index) => /* @__PURE__ */ (0, import_jsx_runtime83.jsx)("div", { children: item.href ? /* @__PURE__ */ (0, import_jsx_runtime83.jsxs)(
                  "a",
                  {
                    href: item.href,
                    style: {
                      ...styles.menuItem,
                      backgroundColor: hoveredItemIndex === switchableOrganizations.length + index ? theme.vars.colors.action?.hover : "transparent"
                    },
                    className: (0, import_browser58.withVendorCSSClassPrefix)("organization-switcher__menu-item"),
                    onMouseEnter: () => setHoveredItemIndex(switchableOrganizations.length + index),
                    onMouseLeave: () => setHoveredItemIndex(null),
                    onFocus: () => setHoveredItemIndex(switchableOrganizations.length + index),
                    onBlur: () => setHoveredItemIndex(null),
                    children: [
                      item.icon,
                      /* @__PURE__ */ (0, import_jsx_runtime83.jsx)("span", { children: item.label })
                    ]
                  }
                ) : /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(
                  Button_default,
                  {
                    onClick: () => handleMenuItemClick(item),
                    style: {
                      ...styles.menuItem,
                      backgroundColor: hoveredItemIndex === switchableOrganizations.length + index ? theme.vars.colors.action?.hover : "transparent"
                    },
                    className: (0, import_browser58.withVendorCSSClassPrefix)("organization-switcher__menu-item"),
                    color: "tertiary",
                    variant: "text",
                    size: "small",
                    startIcon: item.icon,
                    onMouseEnter: () => setHoveredItemIndex(switchableOrganizations.length + index),
                    onMouseLeave: () => setHoveredItemIndex(null),
                    children: item.label
                  }
                ) }, index)
              )
            ] })
          ] }) })
        ]
      }
    ) }) })
  ] });
};
var BaseOrganizationSwitcher_default = BaseOrganizationSwitcher;

// src/components/presentation/OrganizationSwitcher/OrganizationSwitcher.tsx
var import_react60 = require("react");

// src/components/presentation/CreateOrganization/CreateOrganization.tsx
var import_react54 = require("react");

// src/components/presentation/CreateOrganization/BaseCreateOrganization.tsx
var import_browser59 = require("@asgardeo/browser");
var import_clsx24 = __toESM(require("clsx"), 1);
var import_react53 = require("react");
var import_jsx_runtime84 = require("react/jsx-runtime");
var useStyles10 = () => {
  const { theme, colorScheme } = useTheme_default();
  return (0, import_react53.useMemo)(
    () => ({
      root: {
        padding: `calc(${theme.vars.spacing.unit} * 4)`,
        minWidth: "600px",
        margin: "0 auto"
      },
      card: {
        background: theme.vars.colors.background.surface,
        borderRadius: theme.vars.borderRadius.large,
        padding: `calc(${theme.vars.spacing.unit} * 4)`
      },
      content: {
        display: "flex",
        flexDirection: "column",
        gap: `calc(${theme.vars.spacing.unit} * 2)`
      },
      form: {
        display: "flex",
        flexDirection: "column",
        gap: `calc(${theme.vars.spacing.unit} * 2)`,
        width: "100%"
      },
      header: {
        display: "flex",
        alignItems: "center",
        gap: `calc(${theme.vars.spacing.unit} * 1.5)`,
        marginBottom: `calc(${theme.vars.spacing.unit} * 1.5)`
      },
      field: {
        display: "flex",
        alignItems: "center",
        padding: `${theme.vars.spacing.unit} 0`,
        borderBottom: `1px solid ${theme.vars.colors.border}`,
        minHeight: "32px"
      },
      textarea: {
        width: "100%",
        padding: `${theme.vars.spacing.unit} calc(${theme.vars.spacing.unit} * 1.5)`,
        border: `1px solid ${theme.vars.colors.border}`,
        borderRadius: theme.vars.borderRadius.medium,
        fontSize: theme.vars.typography.fontSizes.md,
        color: theme.vars.colors.text.primary,
        backgroundColor: theme.vars.colors.background.surface,
        fontFamily: "inherit",
        minHeight: "80px",
        resize: "vertical",
        outline: "none",
        "&:focus": {
          borderColor: theme.vars.colors.primary.main,
          boxShadow: `0 0 0 2px ${theme.vars.colors.primary.main}20`
        },
        "&:disabled": {
          backgroundColor: theme.vars.colors.background.disabled,
          color: theme.vars.colors.text.secondary,
          cursor: "not-allowed"
        }
      },
      avatarContainer: {
        alignItems: "flex-start",
        display: "flex",
        gap: `calc(${theme.vars.spacing.unit} * 2)`,
        marginBottom: theme.vars.spacing.unit
      },
      actions: {
        display: "flex",
        gap: theme.vars.spacing.unit,
        justifyContent: "flex-end",
        paddingTop: `calc(${theme.vars.spacing.unit} * 2)`
      },
      infoContainer: {
        display: "flex",
        flexDirection: "column",
        gap: theme.vars.spacing.unit
      },
      value: {
        color: theme.vars.colors.text.primary,
        flex: 1,
        display: "flex",
        alignItems: "center",
        gap: theme.vars.spacing.unit,
        overflow: "hidden",
        minHeight: "32px",
        lineHeight: "32px"
      },
      popup: {
        padding: `calc(${theme.vars.spacing.unit} * 2)`
      }
    }),
    [theme, colorScheme]
  );
};
var BaseCreateOrganization = ({
  cardLayout = true,
  className = "",
  defaultParentId = "",
  error,
  initialValues = {},
  loading = false,
  mode = "inline",
  onCancel,
  onOpenChange,
  onSubmit,
  onSuccess,
  open = false,
  renderAdditionalFields,
  style,
  title = "Create Organization"
}) => {
  const styles = useStyles10();
  const { theme } = useTheme_default();
  const { t } = useTranslation_default();
  const [formData, setFormData] = (0, import_react53.useState)({
    description: "",
    handle: "",
    name: "",
    ...initialValues
  });
  const [formErrors, setFormErrors] = (0, import_react53.useState)({});
  const validateForm = () => {
    const errors = {};
    if (!formData.name.trim()) {
      errors.name = "Organization name is required";
    }
    if (!formData.handle.trim()) {
      errors.handle = "Organization handle is required";
    } else if (!/^[a-z0-9-]+$/.test(formData.handle)) {
      errors.handle = "Handle can only contain lowercase letters, numbers, and hyphens";
    }
    if (!formData.description.trim()) {
      errors.description = "Organization description is required";
    }
    setFormErrors(errors);
    return Object.keys(errors).length === 0;
  };
  const handleInputChange = (field, value) => {
    setFormData((prev) => ({
      ...prev,
      [field]: value
    }));
    if (formErrors[field]) {
      setFormErrors((prev) => ({
        ...prev,
        [field]: void 0
      }));
    }
  };
  const handleNameChange = (value) => {
    handleInputChange("name", value);
    if (!formData.handle || formData.handle === generateHandleFromName(formData.name)) {
      const newHandle = generateHandleFromName(value);
      handleInputChange("handle", newHandle);
    }
  };
  const generateHandleFromName = (name) => {
    return name.toLowerCase().replace(/[^a-z0-9\s-]/g, "").replace(/\s+/g, "-").replace(/-+/g, "-").replace(/^-|-$/g, "");
  };
  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!validateForm() || loading) {
      return;
    }
    const payload = {
      description: formData.description.trim(),
      orgHandle: formData.handle.trim(),
      name: formData.name.trim(),
      parentId: defaultParentId,
      type: "TENANT"
    };
    try {
      await onSubmit?.(payload);
      if (onSuccess) {
        onSuccess(payload);
      }
    } catch (submitError) {
      console.error("Form submission error:", submitError);
    }
  };
  const containerStyle = {
    ...styles.root,
    ...cardLayout ? styles.card : {}
  };
  const createOrganizationContent = /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(
    "div",
    {
      className: (0, import_clsx24.default)((0, import_browser59.withVendorCSSClassPrefix)("create-organization"), className),
      style: { ...containerStyle, ...style },
      children: /* @__PURE__ */ (0, import_jsx_runtime84.jsxs)("div", { className: (0, import_browser59.withVendorCSSClassPrefix)("create-organization__content"), style: styles.content, children: [
        /* @__PURE__ */ (0, import_jsx_runtime84.jsxs)(
          "form",
          {
            id: "create-organization-form",
            className: (0, import_browser59.withVendorCSSClassPrefix)("create-organization__form"),
            style: styles.form,
            onSubmit: handleSubmit,
            children: [
              error && /* @__PURE__ */ (0, import_jsx_runtime84.jsxs)(Alert_default, { variant: "error", style: { marginBottom: `calc(${theme.vars.spacing.unit} * 2)` }, children: [
                /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(Alert_default.Title, { children: "Error" }),
                /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(Alert_default.Description, { children: error })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("div", { className: (0, import_browser59.withVendorCSSClassPrefix)("create-organization__field-group"), children: /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(
                TextField_default,
                {
                  label: `${t("organization.create.name.label")}`,
                  placeholder: t("organization.create.name.placeholder"),
                  value: formData.name,
                  onChange: (e) => handleNameChange(e.target.value),
                  disabled: loading,
                  required: true,
                  error: formErrors.name,
                  className: (0, import_browser59.withVendorCSSClassPrefix)("create-organization__input")
                }
              ) }),
              /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("div", { className: (0, import_browser59.withVendorCSSClassPrefix)("create-organization__field-group"), children: /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(
                TextField_default,
                {
                  label: `${t("organization.create.handle.label") || "Organization Handle"}`,
                  placeholder: t("organization.create.handle.placeholder") || "my-organization",
                  value: formData.handle,
                  onChange: (e) => handleInputChange("handle", e.target.value),
                  disabled: loading,
                  required: true,
                  error: formErrors.handle,
                  helperText: "This will be your organization's unique identifier. Only lowercase letters, numbers, and hyphens are allowed.",
                  className: (0, import_browser59.withVendorCSSClassPrefix)("create-organization__input")
                }
              ) }),
              /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("div", { className: (0, import_browser59.withVendorCSSClassPrefix)("create-organization__field-group"), children: /* @__PURE__ */ (0, import_jsx_runtime84.jsxs)(FormControl_default, { error: formErrors.description, children: [
                /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(InputLabel_default, { required: true, children: t("organization.create.description.label") }),
                /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(
                  "textarea",
                  {
                    className: (0, import_browser59.withVendorCSSClassPrefix)("create-organization__textarea"),
                    style: {
                      ...styles.textarea,
                      borderColor: formErrors.description ? theme.vars.colors.error.main : theme.vars.colors.border
                    },
                    placeholder: t("organization.create.description.placeholder"),
                    value: formData.description,
                    onChange: (e) => handleInputChange("description", e.target.value),
                    disabled: loading,
                    required: true
                  }
                )
              ] }) }),
              renderAdditionalFields && renderAdditionalFields()
            ]
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime84.jsxs)("div", { className: (0, import_browser59.withVendorCSSClassPrefix)("create-organization__actions"), style: styles.actions, children: [
          onCancel && /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(Button_default, { type: "button", variant: "outline", onClick: onCancel, disabled: loading, children: t("organization.create.cancel") }),
          /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(Button_default, { type: "submit", variant: "solid", color: "primary", disabled: loading, form: "create-organization-form", children: loading ? t("organization.create.creating") : t("organization.create.button") })
        ] })
      ] })
    }
  );
  if (mode === "popup") {
    return /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(Dialog, { open, onOpenChange, children: /* @__PURE__ */ (0, import_jsx_runtime84.jsxs)(DialogContent, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(DialogHeading, { children: title }),
      /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("div", { style: { padding: `calc(${theme.vars.spacing.unit} * 2)` }, children: createOrganizationContent })
    ] }) });
  }
  return createOrganizationContent;
};

// src/api/createOrganization.ts
var import_browser60 = require("@asgardeo/browser");
var httpClient6 = import_browser60.AsgardeoSPAClient.getInstance().httpRequest.bind(import_browser60.AsgardeoSPAClient.getInstance());
var createOrganization = async ({ fetcher, ...requestConfig }) => {
  const defaultFetcher = async (url, config) => {
    const response = await httpClient6({
      url,
      method: config.method || "POST",
      headers: config.headers,
      data: config.body ? JSON.parse(config.body) : void 0
    });
    return {
      ok: response.status >= 200 && response.status < 300,
      status: response.status,
      statusText: response.statusText || "",
      json: () => Promise.resolve(response.data),
      text: () => Promise.resolve(typeof response.data === "string" ? response.data : JSON.stringify(response.data))
    };
  };
  return (0, import_browser60.createOrganization)({
    ...requestConfig,
    fetcher: fetcher || defaultFetcher
  });
};
var createOrganization_default = createOrganization;

// src/components/presentation/CreateOrganization/CreateOrganization.tsx
var import_jsx_runtime85 = require("react/jsx-runtime");
var CreateOrganization = ({
  onCreateOrganization,
  fallback = null,
  onSuccess,
  defaultParentId,
  ...props
}) => {
  const { isSignedIn, baseUrl } = useAsgardeo_default();
  const { currentOrganization, revalidateMyOrganizations } = useOrganization_default();
  const [loading, setLoading] = (0, import_react54.useState)(false);
  const [error, setError] = (0, import_react54.useState)(null);
  if (!isSignedIn && fallback) {
    return fallback;
  }
  if (!isSignedIn) {
    return /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(import_jsx_runtime85.Fragment, {});
  }
  const parentId = defaultParentId || currentOrganization?.id || "";
  const handleSubmit = async (payload) => {
    setLoading(true);
    setError(null);
    try {
      let result;
      if (onCreateOrganization) {
        result = await onCreateOrganization(payload);
      } else {
        if (!baseUrl) {
          throw new Error("Base URL is required for organization creation");
        }
        result = await createOrganization_default({
          baseUrl,
          payload: {
            ...payload,
            parentId
          }
        });
      }
      await revalidateMyOrganizations();
      if (onSuccess) {
        onSuccess(result);
      }
    } catch (createError) {
      const errorMessage = createError instanceof Error ? createError.message : "Failed to create organization";
      setError(errorMessage);
      throw createError;
    } finally {
      setLoading(false);
    }
  };
  return /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(
    BaseCreateOrganization,
    {
      onSubmit: handleSubmit,
      loading,
      error,
      defaultParentId: parentId,
      onSuccess,
      ...props
    }
  );
};

// src/components/presentation/OrganizationProfile/OrganizationProfile.tsx
var import_react57 = require("react");

// src/components/presentation/OrganizationProfile/BaseOrganizationProfile.tsx
var import_browser62 = require("@asgardeo/browser");
var import_clsx26 = __toESM(require("clsx"), 1);
var import_react56 = require("react");

// src/components/primitives/KeyValueInput/KeyValueInput.tsx
var import_browser61 = require("@asgardeo/browser");
var import_clsx25 = __toESM(require("clsx"), 1);
var import_react55 = require("react");
var import_jsx_runtime86 = require("react/jsx-runtime");
var KeyValueInput = ({
  className = "",
  disabled = false,
  error,
  helperText,
  keyLabel = "Key",
  keyPlaceholder = "Enter key",
  label,
  maxPairs,
  onChange,
  onAdd,
  onRemove,
  readOnly = false,
  removeButtonText = "Remove",
  required = false,
  value = {},
  valueLabel = "Value",
  valuePlaceholder = "Enter value"
}) => {
  const { theme } = useTheme_default();
  const initialPairs = Array.isArray(value) ? value : Object.entries(value).map(([key, val]) => ({ key, value: String(val) }));
  const [pairs, setPairs] = (0, import_react55.useState)(initialPairs);
  const [newKey, setNewKey] = (0, import_react55.useState)("");
  const [newValue, setNewValue] = (0, import_react55.useState)("");
  const handleAddPair = (0, import_react55.useCallback)(() => {
    if (!newKey.trim() || !newValue.trim()) return;
    if (maxPairs && pairs.length >= maxPairs) return;
    const newPair = {
      key: newKey.trim(),
      value: newValue.trim()
    };
    const updatedPairs = [...pairs, newPair];
    setPairs(updatedPairs);
    setNewKey("");
    setNewValue("");
    if (onChange) {
      onChange(updatedPairs);
    }
    if (onAdd) {
      onAdd(newPair);
    }
  }, [newKey, newValue, pairs, maxPairs, onChange, onAdd]);
  const handleRemovePair = (0, import_react55.useCallback)(
    (index) => {
      const pairToRemove = pairs[index];
      const updatedPairs = pairs.filter((_, i) => i !== index);
      setPairs(updatedPairs);
      if (onChange) {
        onChange(updatedPairs);
      }
      if (onRemove) {
        onRemove(pairToRemove, index);
      }
    },
    [pairs, onChange, onRemove]
  );
  const handleUpdatePair = (0, import_react55.useCallback)(
    (index, field, newVal) => {
      const updatedPairs = pairs.map((pair, i) => {
        if (i === index) {
          return { ...pair, [field]: newVal };
        }
        return pair;
      });
      setPairs(updatedPairs);
      if (onChange) {
        onChange(updatedPairs);
      }
    },
    [pairs, onChange]
  );
  const canAddMore = !maxPairs || pairs.length < maxPairs;
  const isAddDisabled = disabled || readOnly || !canAddMore || !newKey.trim() || !newValue.trim();
  const styles = {
    container: {
      display: "flex",
      flexDirection: "column",
      gap: `calc(${theme.vars.spacing.unit} / 2)`
    },
    label: {
      fontSize: "0.875rem",
      fontWeight: 500,
      color: theme.vars.colors.text.primary,
      marginBottom: `calc(${theme.vars.spacing.unit} / 2)`
    },
    pairsList: {
      display: "flex",
      flexDirection: "column",
      gap: `calc(${theme.vars.spacing.unit} / 4)`
    },
    pairRow: {
      display: "flex",
      alignItems: "center",
      gap: `calc(${theme.vars.spacing.unit} / 2)`,
      padding: `calc(${theme.vars.spacing.unit} / 2)`,
      borderRadius: theme.vars.borderRadius.small,
      backgroundColor: "transparent",
      border: "none",
      "&:hover": {
        backgroundColor: theme.vars.colors.action.hover
      }
    },
    pairInput: {
      flex: 1,
      minWidth: 0
    },
    addRow: {
      display: "flex",
      alignItems: "center",
      gap: `calc(${theme.vars.spacing.unit} / 2)`,
      padding: `calc(${theme.vars.spacing.unit} / 2)`,
      border: "none",
      borderRadius: theme.vars.borderRadius.small,
      backgroundColor: "transparent",
      marginTop: `calc(${theme.vars.spacing.unit} / 2)`
    },
    removeButton: {
      minWidth: "auto",
      width: "24px",
      height: "24px",
      padding: "0",
      backgroundColor: "transparent",
      color: theme.vars.colors.text.secondary,
      border: "none",
      borderRadius: theme.vars.borderRadius.small,
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      "&:hover": {
        backgroundColor: theme.vars.colors.action.hover,
        color: theme.vars.colors.error.main
      }
    },
    addButton: {
      minWidth: "auto",
      width: "24px",
      height: "24px",
      padding: "0",
      backgroundColor: "transparent",
      color: theme.vars.colors.primary.main,
      border: "none",
      borderRadius: theme.vars.borderRadius.small,
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      "&:hover": {
        backgroundColor: theme.vars.colors.primary.main,
        color: theme.vars.colors.primary.contrastText
      }
    },
    helperText: {
      fontSize: "0.75rem",
      color: error ? theme.vars.colors.error.main : theme.vars.colors.text.secondary,
      marginTop: `calc(${theme.vars.spacing.unit} / 2)`
    },
    emptyState: {
      padding: theme.vars.spacing.unit,
      textAlign: "center",
      color: theme.vars.colors.text.secondary,
      fontStyle: "italic",
      fontSize: "0.75rem"
    },
    readOnlyPair: {
      display: "flex",
      alignItems: "center",
      gap: `calc(${theme.vars.spacing.unit} / 2)`,
      padding: `calc(${theme.vars.spacing.unit} / 4) 0`,
      minHeight: "20px"
    },
    readOnlyKey: {
      fontSize: "0.75rem",
      fontWeight: 500,
      color: theme.vars.colors.text.secondary,
      minWidth: "80px",
      flexShrink: 0
    },
    readOnlyValue: {
      fontSize: "0.75rem",
      color: theme.vars.colors.text.primary,
      wordBreak: "break-word",
      flex: 1
    }
  };
  return /* @__PURE__ */ (0, import_jsx_runtime86.jsxs)("div", { className: (0, import_clsx25.default)((0, import_browser61.withVendorCSSClassPrefix)("key-value-input"), className), style: styles.container, children: [
    label && /* @__PURE__ */ (0, import_jsx_runtime86.jsxs)("label", { style: styles.label, children: [
      label,
      required && /* @__PURE__ */ (0, import_jsx_runtime86.jsx)("span", { style: { color: theme.vars.colors.error.main }, children: " *" })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime86.jsxs)("div", { style: styles.pairsList, children: [
      pairs.length === 0 && readOnly ? /* @__PURE__ */ (0, import_jsx_runtime86.jsx)("div", { style: styles.emptyState, children: "No attributes defined" }) : readOnly ? pairs.map((pair, index) => /* @__PURE__ */ (0, import_jsx_runtime86.jsxs)("div", { style: styles.readOnlyPair, children: [
        /* @__PURE__ */ (0, import_jsx_runtime86.jsxs)("span", { style: styles.readOnlyKey, children: [
          pair.key,
          ":"
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime86.jsx)("span", { style: styles.readOnlyValue, children: pair.value })
      ] }, `${pair.key}-${index}`)) : pairs.map((pair, index) => /* @__PURE__ */ (0, import_jsx_runtime86.jsxs)("div", { style: styles.pairRow, children: [
        /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(
          TextField_default,
          {
            placeholder: keyPlaceholder,
            value: pair.key,
            onChange: (e) => handleUpdatePair(index, "key", e.target.value),
            disabled: disabled || readOnly,
            style: styles.pairInput,
            "aria-label": `${keyLabel} ${index + 1}`
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(
          TextField_default,
          {
            placeholder: valuePlaceholder,
            value: pair.value,
            onChange: (e) => handleUpdatePair(index, "value", e.target.value),
            disabled: disabled || readOnly,
            style: styles.pairInput,
            "aria-label": `${valueLabel} ${index + 1}`
          }
        ),
        !readOnly && /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(
          Button_default,
          {
            variant: "outline",
            size: "small",
            onClick: () => handleRemovePair(index),
            disabled,
            style: styles.removeButton,
            "aria-label": `${removeButtonText} ${pair.key}`,
            children: /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(X_default, { width: 16, height: 16 })
          }
        )
      ] }, `${pair.key}-${index}`)),
      !readOnly && /* @__PURE__ */ (0, import_jsx_runtime86.jsxs)("div", { style: styles.addRow, children: [
        /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(
          TextField_default,
          {
            placeholder: keyPlaceholder,
            value: newKey,
            onChange: (e) => setNewKey(e.target.value),
            disabled,
            style: styles.pairInput,
            "aria-label": "New key"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(
          TextField_default,
          {
            placeholder: valuePlaceholder,
            value: newValue,
            onChange: (e) => setNewValue(e.target.value),
            disabled,
            style: styles.pairInput,
            "aria-label": "New value",
            onKeyPress: (e) => {
              if (e.key === "Enter" && !isAddDisabled) {
                handleAddPair();
              }
            }
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(
          Button_default,
          {
            variant: "solid",
            size: "small",
            onClick: handleAddPair,
            disabled: isAddDisabled,
            style: styles.addButton,
            "aria-label": "Add new key-value pair",
            children: /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(Plus_default, { width: 16, height: 16 })
          }
        )
      ] })
    ] }),
    (helperText || error) && /* @__PURE__ */ (0, import_jsx_runtime86.jsx)("div", { style: styles.helperText, children: error || helperText }),
    maxPairs && /* @__PURE__ */ (0, import_jsx_runtime86.jsxs)("div", { style: styles.helperText, children: [
      pairs.length,
      " of ",
      maxPairs,
      " pairs used"
    ] })
  ] });
};
var KeyValueInput_default = KeyValueInput;

// src/components/presentation/OrganizationProfile/BaseOrganizationProfile.tsx
var import_jsx_runtime87 = require("react/jsx-runtime");
var formatDate = (dateString) => {
  if (!dateString) return "-";
  try {
    return new Date(dateString).toLocaleDateString("en-US", {
      year: "numeric",
      month: "long",
      day: "numeric"
    });
  } catch {
    return dateString;
  }
};
var BaseOrganizationProfile = ({
  fallback = null,
  className = "",
  cardLayout = true,
  organization,
  title = "Organization Profile",
  mode = "inline",
  editable = true,
  onChange,
  onOpenChange,
  onSubmit,
  onUpdate,
  open = false,
  saveButtonText = "Save Changes",
  cancelButtonText = "Cancel",
  fields = [
    {
      key: "id",
      label: "Organization ID",
      editable: false
    },
    {
      key: "name",
      label: "Organization Name",
      editable: true
    },
    {
      key: "description",
      label: "Organization Description",
      editable: true,
      render: (value) => value || "-"
    },
    {
      key: "created",
      label: "Created Date",
      editable: false,
      render: (value) => formatDate(value)
    },
    {
      key: "lastModified",
      label: "Last Modified Date",
      editable: false,
      render: (value) => formatDate(value)
    }
  ]
}) => {
  const { theme } = useTheme_default();
  const [editedOrganization, setEditedOrganization] = (0, import_react56.useState)(organization);
  const [editingFields, setEditingFields] = (0, import_react56.useState)({});
  const triggerRef = (0, import_react56.useRef)(null);
  const PencilIcon = () => /* @__PURE__ */ (0, import_jsx_runtime87.jsx)(
    "svg",
    {
      width: "16",
      height: "16",
      viewBox: "0 0 24 24",
      fill: "none",
      stroke: "currentColor",
      strokeWidth: "2",
      strokeLinecap: "round",
      strokeLinejoin: "round",
      children: /* @__PURE__ */ (0, import_jsx_runtime87.jsx)("path", { d: "M17 3a2.828 2.828 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5L17 3z" })
    }
  );
  const toggleFieldEdit = (0, import_react56.useCallback)((fieldName) => {
    setEditingFields((prev) => ({
      ...prev,
      [fieldName]: !prev[fieldName]
    }));
  }, []);
  const getFieldPlaceholder = (0, import_react56.useCallback)((fieldKey) => {
    const fieldLabels = {
      name: "organization name",
      description: "organization description",
      orgHandle: "organization handle",
      status: "organization status",
      type: "organization type"
    };
    const fieldLabel = fieldLabels[fieldKey] || fieldKey.toLowerCase();
    return `Enter ${fieldLabel}`;
  }, []);
  const handleFieldSave = (0, import_react56.useCallback)(
    (fieldKey) => {
      if (!onUpdate || !fieldKey) return;
      const fieldValue = editedOrganization && fieldKey && editedOrganization[fieldKey] !== void 0 ? editedOrganization[fieldKey] : organization && organization[fieldKey] !== void 0 ? organization[fieldKey] : "";
      const payload = {
        [fieldKey]: fieldValue
      };
      onUpdate(payload);
      toggleFieldEdit(fieldKey);
    },
    [editedOrganization, organization, onUpdate, toggleFieldEdit]
  );
  const handleFieldCancel = (0, import_react56.useCallback)(
    (fieldKey) => {
      setEditedOrganization((prev) => ({
        ...prev,
        [fieldKey]: organization?.[fieldKey]
      }));
      toggleFieldEdit(fieldKey);
    },
    [organization, toggleFieldEdit]
  );
  const formatLabel = (key) => key.split(/(?=[A-Z])|_/).map((word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()).join(" ");
  const getStatusColor = (status) => {
    switch (status?.toUpperCase()) {
      case "ACTIVE":
        return theme.vars.colors.success.main;
      case "INACTIVE":
        return theme.vars.colors.warning.main;
      case "SUSPENDED":
        return theme.vars.colors.error.main;
      default:
        return theme.vars.colors.text.secondary;
    }
  };
  const getOrgInitials = (name) => {
    if (!name) return "ORG";
    return name.split(" ").map((word) => word.charAt(0)).join("").toUpperCase().slice(0, 2);
  };
  const styles = useStyles11();
  const renderField = (field, isEditing, onEditValue, onStartEdit) => {
    if (!field) return null;
    const { key, label, editable: fieldEditable = true } = field;
    const value = key === "attributes" ? organization?.attributes || {} : organization?.[key];
    const renderedValue = field.render ? field.render(value, organization) : value;
    if (isEditing && onEditValue && fieldEditable && editable) {
      const fieldValue = editedOrganization && key && editedOrganization[key] !== void 0 ? editedOrganization[key] : value || "";
      const commonProps = {
        label: void 0,
        value: typeof fieldValue === "object" ? JSON.stringify(fieldValue) : String(fieldValue || ""),
        onChange: (e) => onEditValue(e.target ? e.target.value : e),
        placeholder: getFieldPlaceholder(key),
        style: {
          marginBottom: 0
        }
      };
      let fieldInput;
      if (key === "attributes") {
        const attributesValue = typeof fieldValue === "object" && fieldValue !== null ? fieldValue : {};
        fieldInput = /* @__PURE__ */ (0, import_jsx_runtime87.jsx)(
          KeyValueInput_default,
          {
            value: attributesValue,
            onChange: (pairs) => {
              const attributesObject = pairs.reduce((acc, pair) => {
                acc[pair.key] = pair.value;
                return acc;
              }, {});
              onEditValue(attributesObject);
            },
            onAdd: (pair) => {
              if (onUpdate) {
                const operation = {
                  operation: "ADD",
                  path: `/attributes/${pair.key}`,
                  value: pair.value
                };
                onUpdate([operation]);
              }
            },
            onRemove: (pair, index) => {
              if (onUpdate) {
                const operation = {
                  operation: "REMOVE",
                  path: `/attributes/${pair.key}`,
                  value: ""
                };
                onUpdate([operation]);
              }
            },
            label: "",
            keyPlaceholder: "Attribute name",
            valuePlaceholder: "Attribute value",
            helperText: "Add custom attributes as key-value pairs"
          }
        );
      } else {
        fieldInput = /* @__PURE__ */ (0, import_jsx_runtime87.jsx)(TextField_default, { ...commonProps });
      }
      return /* @__PURE__ */ (0, import_jsx_runtime87.jsxs)(import_jsx_runtime87.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime87.jsx)("span", { style: styles.label, children: label }),
        /* @__PURE__ */ (0, import_jsx_runtime87.jsx)("div", { style: styles.value, children: fieldInput })
      ] });
    }
    const hasValue = value !== void 0 && value !== null && value !== "";
    const isFieldEditable = editable && fieldEditable;
    let displayValue;
    if (hasValue) {
      displayValue = key === "attributes" && typeof value === "object" && value !== null ? /* @__PURE__ */ (0, import_jsx_runtime87.jsx)(KeyValueInput_default, { value, readOnly: true, label: "" }) : String(renderedValue);
    } else if (isFieldEditable) {
      displayValue = getFieldPlaceholder(key);
    } else {
      displayValue = "-";
    }
    return /* @__PURE__ */ (0, import_jsx_runtime87.jsxs)(import_jsx_runtime87.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime87.jsx)("span", { style: styles.label, children: label }),
      /* @__PURE__ */ (0, import_jsx_runtime87.jsx)(
        "div",
        {
          style: {
            ...styles.value,
            fontStyle: hasValue ? "normal" : "italic",
            opacity: hasValue ? 1 : 0.7
          },
          children: !hasValue && isFieldEditable && onStartEdit ? /* @__PURE__ */ (0, import_jsx_runtime87.jsx)(
            Button_default,
            {
              onClick: onStartEdit,
              variant: "text",
              color: "secondary",
              size: "small",
              title: "Click to edit",
              style: {
                fontStyle: "italic",
                textDecoration: "underline",
                opacity: 0.7,
                padding: 0,
                minHeight: "auto"
              },
              children: displayValue
            }
          ) : displayValue
        }
      )
    ] });
  };
  const renderOrganizationField = (field) => {
    if (!field || !field.key) return null;
    const hasValue = organization?.[field.key] !== void 0 && organization?.[field.key] !== "" && organization?.[field.key] !== null;
    const isFieldEditing = editingFields[field.key];
    const isFieldEditable = editable && field.editable !== false;
    const shouldShow = hasValue || isFieldEditing || isFieldEditable;
    if (!shouldShow) {
      return null;
    }
    const fieldStyle = {
      ...styles.field,
      display: "flex",
      alignItems: "center",
      gap: theme.vars.spacing.unit
    };
    return /* @__PURE__ */ (0, import_jsx_runtime87.jsxs)("div", { style: fieldStyle, children: [
      /* @__PURE__ */ (0, import_jsx_runtime87.jsx)("div", { style: { flex: 1, display: "flex", alignItems: "center", gap: theme.vars.spacing.unit }, children: renderField(
        field,
        isFieldEditing,
        (value) => {
          const tempEditedOrganization = { ...editedOrganization };
          tempEditedOrganization[field.key] = value;
          setEditedOrganization(tempEditedOrganization);
        },
        () => toggleFieldEdit(field.key)
      ) }),
      isFieldEditable && /* @__PURE__ */ (0, import_jsx_runtime87.jsx)("div", { style: { display: "flex", alignItems: "center", gap: `calc(${theme.vars.spacing.unit} / 2)` }, children: isFieldEditing ? /* @__PURE__ */ (0, import_jsx_runtime87.jsxs)(import_jsx_runtime87.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime87.jsx)(
          Button_default,
          {
            onClick: () => handleFieldSave(field.key),
            color: "primary",
            variant: "solid",
            size: "small",
            title: "Save changes",
            children: saveButtonText
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime87.jsx)(
          Button_default,
          {
            onClick: () => handleFieldCancel(field.key),
            color: "secondary",
            variant: "solid",
            size: "small",
            title: "Cancel editing",
            children: cancelButtonText
          }
        )
      ] }) : (
        // Only show pencil icon when there's a value
        hasValue && /* @__PURE__ */ (0, import_jsx_runtime87.jsx)(
          Button_default,
          {
            onClick: () => toggleFieldEdit(field.key),
            variant: "text",
            color: "secondary",
            size: "small",
            title: "Edit field",
            style: {
              minWidth: "auto",
              padding: `calc(${theme.vars.spacing.unit} / 2)`,
              minHeight: "auto"
            },
            children: /* @__PURE__ */ (0, import_jsx_runtime87.jsx)(PencilIcon, {})
          }
        )
      ) })
    ] }, field.key);
  };
  if (!organization) {
    return fallback;
  }
  const containerStyle = {
    ...styles.root,
    ...cardLayout ? styles.card : {}
  };
  const profileContent = /* @__PURE__ */ (0, import_jsx_runtime87.jsxs)(Card_default, { style: containerStyle, className: (0, import_clsx26.default)((0, import_browser62.withVendorCSSClassPrefix)("organization-profile"), className), children: [
    /* @__PURE__ */ (0, import_jsx_runtime87.jsxs)("div", { style: styles.header, children: [
      /* @__PURE__ */ (0, import_jsx_runtime87.jsx)(Avatar, { name: getOrgInitials(organization.name), size: 80, alt: `${organization.name} logo` }),
      /* @__PURE__ */ (0, import_jsx_runtime87.jsxs)("div", { style: styles.orgInfo, children: [
        /* @__PURE__ */ (0, import_jsx_runtime87.jsx)("h2", { style: styles.name, children: organization.name }),
        organization.orgHandle && /* @__PURE__ */ (0, import_jsx_runtime87.jsxs)("p", { style: styles.handle, children: [
          "@",
          organization.orgHandle
        ] })
      ] })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime87.jsx)("div", { style: styles.infoContainer, children: fields.map((field, index) => renderOrganizationField(field)) })
  ] });
  if (mode === "popup") {
    return /* @__PURE__ */ (0, import_jsx_runtime87.jsx)(Dialog, { open, onOpenChange, children: /* @__PURE__ */ (0, import_jsx_runtime87.jsxs)(DialogContent, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime87.jsx)(DialogHeading, { children: title }),
      /* @__PURE__ */ (0, import_jsx_runtime87.jsx)("div", { style: { padding: `calc(${theme.vars.spacing.unit} * 2)` }, children: profileContent })
    ] }) });
  }
  return profileContent;
};
var useStyles11 = () => {
  const { theme, colorScheme } = useTheme_default();
  return (0, import_react56.useMemo)(
    () => ({
      root: {
        padding: `calc(${theme.vars.spacing.unit} * 4)`,
        minWidth: "600px",
        margin: "0 auto"
      },
      card: {
        background: theme.vars.colors.background.surface,
        borderRadius: theme.vars.borderRadius.large
      },
      header: {
        display: "flex",
        alignItems: "center",
        gap: `calc(${theme.vars.spacing.unit} * 2)`,
        marginBottom: `calc(${theme.vars.spacing.unit} * 3)`,
        paddingBottom: `calc(${theme.vars.spacing.unit} * 2)`
      },
      orgInfo: {
        flex: 1
      },
      name: {
        fontSize: "1.5rem",
        fontWeight: 600,
        margin: "0 0 8px 0",
        color: theme.vars.colors.text.primary
      },
      handle: {
        fontSize: "1rem",
        color: theme.vars.colors.text.secondary,
        margin: "0",
        fontFamily: "monospace"
      },
      infoContainer: {
        display: "flex",
        flexDirection: "column",
        gap: theme.vars.spacing.unit
      },
      field: {
        display: "flex",
        alignItems: "flex-start",
        padding: `calc(${theme.vars.spacing.unit} / 2) 0`,
        borderBottom: `1px solid ${theme.vars.colors.border}`,
        minHeight: "28px"
      },
      lastField: {
        borderBottom: "none"
      },
      label: {
        fontSize: "0.875rem",
        fontWeight: 500,
        color: theme.vars.colors.text.secondary,
        width: "120px",
        flexShrink: 0,
        lineHeight: "28px"
      },
      value: {
        color: theme.vars.colors.text.primary,
        flex: 1,
        display: "flex",
        alignItems: "center",
        gap: theme.vars.spacing.unit,
        overflow: "hidden",
        minHeight: "28px",
        lineHeight: "28px",
        wordBreak: "break-word"
      },
      statusBadge: {
        padding: `calc(${theme.vars.spacing.unit} / 2) ${theme.vars.spacing.unit}`,
        borderRadius: theme.vars.borderRadius.small,
        fontSize: "0.75rem",
        fontWeight: 500,
        color: "white",
        textTransform: "uppercase",
        letterSpacing: "0.5px"
      },
      permissionsList: {
        display: "flex",
        flexWrap: "wrap",
        gap: `calc(${theme.vars.spacing.unit} / 2)`
      },
      permissionBadge: {
        padding: `calc(${theme.vars.spacing.unit} / 4) ${theme.vars.spacing.unit}`,
        borderRadius: theme.vars.borderRadius.small,
        fontSize: "0.75rem",
        backgroundColor: theme.vars.colors.primary.main,
        color: theme.vars.colors.primary.contrastText,
        border: `1px solid ${theme.vars.colors.border}`
      },
      attributesList: {
        display: "flex",
        flexDirection: "column",
        gap: `calc(${theme.vars.spacing.unit} / 4)`
      },
      attributeItem: {
        display: "flex",
        gap: theme.vars.spacing.unit,
        padding: `calc(${theme.vars.spacing.unit} / 4) 0`,
        alignItems: "center"
      },
      attributeKey: {
        fontSize: "0.75rem",
        fontWeight: 500,
        color: theme.vars.colors.text.secondary,
        minWidth: "80px",
        flexShrink: 0
      },
      attributeValue: {
        fontSize: "0.75rem",
        color: theme.vars.colors.text.primary,
        wordBreak: "break-word",
        flex: 1
      }
    }),
    [theme, colorScheme]
  );
};
var BaseOrganizationProfile_default = BaseOrganizationProfile;

// src/api/getOrganization.ts
var import_browser63 = require("@asgardeo/browser");
var httpClient7 = import_browser63.AsgardeoSPAClient.getInstance().httpRequest.bind(import_browser63.AsgardeoSPAClient.getInstance());
var getOrganization = async ({ fetcher, ...requestConfig }) => {
  const defaultFetcher = async (url, config) => {
    const response = await httpClient7({
      url,
      method: config.method || "GET",
      headers: config.headers
    });
    return {
      ok: response.status >= 200 && response.status < 300,
      status: response.status,
      statusText: response.statusText || "",
      json: () => Promise.resolve(response.data),
      text: () => Promise.resolve(typeof response.data === "string" ? response.data : JSON.stringify(response.data))
    };
  };
  return (0, import_browser63.getOrganization)({
    ...requestConfig,
    fetcher: fetcher || defaultFetcher
  });
};
var getOrganization_default = getOrganization;

// src/api/updateOrganization.ts
var import_browser64 = require("@asgardeo/browser");
var httpClient8 = import_browser64.AsgardeoSPAClient.getInstance().httpRequest.bind(import_browser64.AsgardeoSPAClient.getInstance());
var updateOrganization = async ({
  fetcher,
  ...requestConfig
}) => {
  const defaultFetcher = async (url, config) => {
    const response = await httpClient8({
      url,
      method: config.method || "PATCH",
      headers: config.headers,
      data: config.body ? JSON.parse(config.body) : void 0
    });
    return {
      ok: response.status >= 200 && response.status < 300,
      status: response.status,
      statusText: response.statusText || "",
      json: () => Promise.resolve(response.data),
      text: () => Promise.resolve(typeof response.data === "string" ? response.data : JSON.stringify(response.data))
    };
  };
  return (0, import_browser64.updateOrganization)({
    ...requestConfig,
    fetcher: fetcher || defaultFetcher
  });
};
var updateOrganization_default = updateOrganization;

// src/components/presentation/OrganizationProfile/OrganizationProfile.tsx
var import_jsx_runtime88 = require("react/jsx-runtime");
var OrganizationProfile = ({
  organizationId,
  mode = "default",
  open = false,
  onOpenChange,
  onUpdate,
  popupTitle,
  loadingFallback = /* @__PURE__ */ (0, import_jsx_runtime88.jsx)("div", { children: "Loading organization..." }),
  errorFallback = /* @__PURE__ */ (0, import_jsx_runtime88.jsx)("div", { children: "Failed to load organization data" }),
  ...rest
}) => {
  const { baseUrl } = useAsgardeo_default();
  const { t } = useTranslation_default();
  const [organization, setOrganization] = (0, import_react57.useState)(null);
  const [loading, setLoading] = (0, import_react57.useState)(true);
  const [error, setError] = (0, import_react57.useState)(false);
  const fetchOrganization = async () => {
    if (!baseUrl || !organizationId) {
      setLoading(false);
      setError(true);
      return;
    }
    try {
      setLoading(true);
      setError(false);
      const orgData = await getOrganization_default({
        baseUrl,
        organizationId
      });
      setOrganization(orgData);
    } catch (err) {
      console.error("Failed to fetch organization:", err);
      setError(true);
      setOrganization(null);
    } finally {
      setLoading(false);
    }
  };
  (0, import_react57.useEffect)(() => {
    fetchOrganization();
  }, [baseUrl, organizationId]);
  const handleOrganizationUpdate = async (payload) => {
    if (!baseUrl || !organizationId) return;
    try {
      const operations = (0, import_browser64.createPatchOperations)(payload);
      await updateOrganization_default({
        baseUrl,
        organizationId,
        operations
      });
      await fetchOrganization();
      if (onUpdate) {
        await onUpdate(payload);
      }
    } catch (err) {
      console.error("Failed to update organization:", err);
      throw err;
    }
  };
  return /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(
    BaseOrganizationProfile_default,
    {
      organization,
      onUpdate: handleOrganizationUpdate,
      mode: mode === "popup" ? "popup" : "inline",
      open,
      onOpenChange,
      title: popupTitle || t("organization.profile.title"),
      ...rest
    }
  );
};
var OrganizationProfile_default = OrganizationProfile;

// src/components/presentation/OrganizationList/OrganizationList.tsx
var import_react59 = require("react");

// src/components/presentation/OrganizationList/BaseOrganizationList.tsx
var import_browser65 = require("@asgardeo/browser");
var import_clsx27 = __toESM(require("clsx"), 1);
var import_react58 = require("react");
var import_jsx_runtime89 = require("react/jsx-runtime");
var defaultRenderOrganization = (organization, styles, t, onOrganizationSelect, showStatus) => {
  return /* @__PURE__ */ (0, import_jsx_runtime89.jsxs)(
    "div",
    {
      style: {
        ...styles.organizationItem
      },
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime89.jsxs)("div", { style: styles.organizationContent, children: [
          /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(Avatar_default, { variant: "square", name: organization.name, size: 48, alt: `${organization.name} logo` }),
          /* @__PURE__ */ (0, import_jsx_runtime89.jsxs)("div", { style: styles.organizationInfo, children: [
            /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(Typography_default, { variant: "h6", style: styles.organizationName, children: organization.name }),
            /* @__PURE__ */ (0, import_jsx_runtime89.jsxs)(Typography_default, { variant: "body2", color: "textSecondary", style: styles.organizationHandle, children: [
              "@",
              organization.orgHandle
            ] }),
            showStatus && /* @__PURE__ */ (0, import_jsx_runtime89.jsxs)(Typography_default, { variant: "body2", color: "textSecondary", style: styles.organizationStatus, children: [
              t("organization.switcher.status.label"),
              " ",
              /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(
                "span",
                {
                  style: {
                    ...styles.statusText,
                    color: organization.status === "ACTIVE" ? styles.activeColor : styles.inactiveColor
                  },
                  children: organization.status
                }
              )
            ] })
          ] })
        ] }),
        organization.canSwitch && /* @__PURE__ */ (0, import_jsx_runtime89.jsx)("div", { style: styles.organizationActions, children: /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(
          Button_default,
          {
            onClick: (e) => {
              e.stopPropagation();
              onOrganizationSelect(organization);
            },
            type: "button",
            size: "small",
            children: t("organization.switcher.switch.button")
          }
        ) })
      ]
    },
    organization.id
  );
};
var defaultRenderLoading = (t, styles) => /* @__PURE__ */ (0, import_jsx_runtime89.jsxs)("div", { style: styles.loadingContainer, children: [
  /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(Spinner_default, { size: "medium" }),
  /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(Typography_default, { variant: "body1", color: "textSecondary", style: styles.loadingText, children: t("organization.switcher.loading.organizations") })
] });
var defaultRenderError = (error, t, styles) => /* @__PURE__ */ (0, import_jsx_runtime89.jsx)("div", { style: styles.errorContainer, children: /* @__PURE__ */ (0, import_jsx_runtime89.jsxs)(Typography_default, { variant: "body1", color: "error", children: [
  /* @__PURE__ */ (0, import_jsx_runtime89.jsx)("strong", { children: t("organization.switcher.error.prefix") }),
  " ",
  error
] }) });
var defaultRenderLoadMore = (onLoadMore, isLoading, t, styles) => /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(
  Button_default,
  {
    onClick: onLoadMore,
    disabled: isLoading,
    style: {
      ...styles.loadMoreButton,
      ...isLoading ? styles.loadMoreButtonDisabled : {}
    },
    type: "button",
    fullWidth: true,
    children: isLoading ? t("organization.switcher.loading.more") : t("organization.switcher.load.more")
  }
);
var defaultRenderEmpty = (t, styles) => /* @__PURE__ */ (0, import_jsx_runtime89.jsx)("div", { style: styles.emptyContainer, children: /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(Typography_default, { variant: "body1", color: "textSecondary", style: styles.emptyText, children: t("organization.switcher.no.organizations") }) });
var BaseOrganizationList = ({
  className = "",
  allOrganizations,
  myOrganizations,
  error,
  fetchMore,
  hasMore = false,
  isLoading = false,
  isLoadingMore = false,
  mode = "inline",
  onOpenChange,
  onOrganizationSelect,
  onRefresh,
  open = false,
  renderEmpty,
  renderError,
  renderLoading,
  renderLoadMore,
  renderOrganization,
  style,
  title = "Organizations",
  showStatus
}) => {
  const styles = useStyles12();
  const { t } = useTranslation_default();
  const organizationsWithSwitchAccess = (0, import_react58.useMemo)(() => {
    if (!allOrganizations?.organizations) {
      return [];
    }
    const myOrgIds = new Set(myOrganizations?.map((org) => org.id) || []);
    return allOrganizations.organizations.map((org) => ({
      ...org,
      canSwitch: myOrgIds.has(org.id)
    }));
  }, [allOrganizations?.organizations, myOrganizations]);
  const renderLoadingWithStyles = renderLoading || (() => defaultRenderLoading(t, styles));
  const renderErrorWithStyles = renderError || ((error2) => defaultRenderError(error2, t, styles));
  const renderEmptyWithStyles = renderEmpty || (() => defaultRenderEmpty(t, styles));
  const renderLoadMoreWithStyles = renderLoadMore || ((onLoadMore, isLoading2) => defaultRenderLoadMore(onLoadMore, isLoading2, t, styles));
  const renderOrganizationWithStyles = renderOrganization || ((org) => defaultRenderOrganization(org, styles, t, onOrganizationSelect, showStatus));
  if (isLoading && organizationsWithSwitchAccess?.length === 0) {
    const loadingContent = /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(
      "div",
      {
        className: (0, import_clsx27.default)((0, import_browser65.withVendorCSSClassPrefix)("organization-list"), className),
        style: { ...styles.root, ...style },
        children: renderLoadingWithStyles()
      }
    );
    if (mode === "popup") {
      return /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(Dialog, { open, onOpenChange, children: /* @__PURE__ */ (0, import_jsx_runtime89.jsxs)(DialogContent, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(DialogHeading, { children: title }),
        /* @__PURE__ */ (0, import_jsx_runtime89.jsx)("div", { style: styles.popupContent, children: loadingContent })
      ] }) });
    }
    return loadingContent;
  }
  if (error && organizationsWithSwitchAccess?.length === 0) {
    const errorContent = /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(
      "div",
      {
        className: (0, import_clsx27.default)((0, import_browser65.withVendorCSSClassPrefix)("organization-list"), className),
        style: { ...styles.root, ...style },
        children: renderErrorWithStyles(error)
      }
    );
    if (mode === "popup") {
      return /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(Dialog, { open, onOpenChange, children: /* @__PURE__ */ (0, import_jsx_runtime89.jsxs)(DialogContent, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(DialogHeading, { children: title }),
        /* @__PURE__ */ (0, import_jsx_runtime89.jsx)("div", { style: styles.popupContent, children: errorContent })
      ] }) });
    }
    return errorContent;
  }
  if (!isLoading && organizationsWithSwitchAccess?.length === 0) {
    const emptyContent = /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(
      "div",
      {
        className: (0, import_clsx27.default)((0, import_browser65.withVendorCSSClassPrefix)("organization-list"), className),
        style: { ...styles.root, ...style },
        children: renderEmptyWithStyles()
      }
    );
    if (mode === "popup") {
      return /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(Dialog, { open, onOpenChange, children: /* @__PURE__ */ (0, import_jsx_runtime89.jsxs)(DialogContent, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(DialogHeading, { children: title }),
        /* @__PURE__ */ (0, import_jsx_runtime89.jsx)("div", { style: styles.popupContent, children: emptyContent })
      ] }) });
    }
    return emptyContent;
  }
  const organizationListContent = /* @__PURE__ */ (0, import_jsx_runtime89.jsxs)("div", { className: (0, import_clsx27.default)((0, import_browser65.withVendorCSSClassPrefix)("organization-list"), className), style: { ...styles.root, ...style }, children: [
    /* @__PURE__ */ (0, import_jsx_runtime89.jsxs)("div", { style: styles.header, children: [
      /* @__PURE__ */ (0, import_jsx_runtime89.jsx)("div", { style: styles.headerInfo, children: /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(Typography_default, { variant: "body2", color: "textSecondary", style: styles.subtitle, children: t("organization.switcher.showing.count", {
        showing: organizationsWithSwitchAccess?.length,
        total: allOrganizations?.organizations?.length || 0
      }) }) }),
      onRefresh && /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(Button_default, { onClick: onRefresh, style: styles.refreshButton, type: "button", variant: "outline", size: "small", children: t("organization.switcher.refresh.button") })
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime89.jsx)("div", { style: styles.listContainer, children: organizationsWithSwitchAccess?.map(
      (organization, index) => renderOrganizationWithStyles(organization, index)
    ) }),
    error && organizationsWithSwitchAccess?.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime89.jsx)("div", { style: styles.errorMargin, children: renderErrorWithStyles(error) }),
    hasMore && fetchMore && /* @__PURE__ */ (0, import_jsx_runtime89.jsx)("div", { style: styles.loadMoreMargin, children: renderLoadMoreWithStyles(fetchMore, isLoadingMore) })
  ] });
  if (mode === "popup") {
    return /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(Dialog, { open, onOpenChange, children: /* @__PURE__ */ (0, import_jsx_runtime89.jsxs)(DialogContent, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(DialogHeading, { children: title }),
      /* @__PURE__ */ (0, import_jsx_runtime89.jsx)("div", { style: styles.popupContent, children: organizationListContent })
    ] }) });
  }
  return organizationListContent;
};
var useStyles12 = () => {
  const { theme, colorScheme } = useTheme_default();
  return (0, import_react58.useMemo)(
    () => ({
      root: {
        padding: `calc(${theme.vars.spacing.unit} * 4)`,
        minWidth: "600px",
        margin: "0 auto",
        background: theme.vars.colors.background.surface,
        borderRadius: theme.vars.borderRadius.large
      },
      header: {
        display: "flex",
        alignItems: "center",
        justifyContent: "space-between",
        marginBottom: `calc(${theme.vars.spacing.unit} * 3)`,
        paddingBottom: `calc(${theme.vars.spacing.unit} * 2)`,
        borderBottom: `1px solid ${theme.vars.colors.border}`
      },
      headerInfo: {
        flex: 1
      },
      title: {
        fontSize: "1.5rem",
        fontWeight: 600,
        margin: "0 0 8px 0",
        color: theme.vars.colors.text.primary
      },
      subtitle: {
        color: theme.vars.colors.text.secondary,
        fontSize: "0.875rem",
        margin: "0"
      },
      refreshButton: {
        backgroundColor: theme.vars.colors.background.surface,
        border: `1px solid ${theme.vars.colors.border}`,
        borderRadius: theme.vars.borderRadius.small,
        color: theme.vars.colors.text.primary,
        cursor: "pointer",
        fontSize: "0.875rem",
        padding: `${theme.vars.spacing.unit} calc(${theme.vars.spacing.unit} * 2)`,
        transition: "all 0.2s"
      },
      listContainer: {
        display: "flex",
        flexDirection: "column",
        gap: `calc(${theme.vars.spacing.unit} * 1.5)`
      },
      organizationItem: {
        border: `1px solid ${theme.vars.colors.border}`,
        borderRadius: theme.vars.borderRadius.medium,
        display: "flex",
        justifyContent: "space-between",
        padding: `calc(${theme.vars.spacing.unit} * 2)`,
        transition: "all 0.2s",
        backgroundColor: theme.vars.colors.background.surface
      },
      organizationContent: {
        display: "flex",
        alignItems: "center",
        gap: `calc(${theme.vars.spacing.unit} * 2)`,
        flex: 1
      },
      organizationInfo: {
        flex: 1
      },
      organizationName: {
        fontSize: "1.125rem",
        fontWeight: 600,
        margin: "0 0 4px 0",
        color: theme.vars.colors.text.primary
      },
      organizationHandle: {
        color: theme.vars.colors.text.secondary,
        fontSize: "0.875rem",
        margin: "0 0 4px 0",
        fontFamily: "monospace"
      },
      organizationStatus: {
        color: theme.vars.colors.text.secondary,
        fontSize: "0.875rem",
        margin: "0"
      },
      statusText: {
        fontWeight: 500
      },
      activeColor: theme.vars.colors.success.main,
      inactiveColor: theme.vars.colors.error.main,
      organizationActions: {
        display: "flex",
        alignItems: "center"
      },
      badge: {
        borderRadius: theme.vars.borderRadius.large,
        fontSize: "0.75rem",
        fontWeight: 500,
        padding: `calc(${theme.vars.spacing.unit} / 2) calc(${theme.vars.spacing.unit} * 1.5)`,
        textTransform: "uppercase",
        letterSpacing: "0.5px"
      },
      successBadge: {
        backgroundColor: `color-mix(in srgb, ${theme.vars.colors.success.main} 20%, transparent)`,
        color: theme.vars.colors.success.main
      },
      errorBadge: {
        backgroundColor: `color-mix(in srgb, ${theme.vars.colors.error.main} 20%, transparent)`,
        color: theme.vars.colors.error.main
      },
      loadingContainer: {
        padding: `calc(${theme.vars.spacing.unit} * 4)`,
        textAlign: "center",
        display: "flex",
        flexDirection: "column",
        alignItems: "center",
        gap: `calc(${theme.vars.spacing.unit} * 2)`
      },
      loadingText: {
        marginTop: theme.vars.spacing.unit
      },
      errorContainer: {
        backgroundColor: `color-mix(in srgb, ${theme.vars.colors.error.main} 20%, transparent)`,
        border: `1px solid ${theme.vars.colors.error.main}`,
        borderRadius: theme.vars.borderRadius.medium,
        color: theme.vars.colors.error.main,
        padding: `calc(${theme.vars.spacing.unit} * 2)`
      },
      emptyContainer: {
        padding: `calc(${theme.vars.spacing.unit} * 4)`,
        textAlign: "center"
      },
      emptyText: {
        color: theme.vars.colors.text.secondary,
        fontSize: "1rem"
      },
      loadMoreButton: {
        backgroundColor: theme.vars.colors.primary.main,
        border: "none",
        borderRadius: theme.vars.borderRadius.medium,
        color: theme.vars.colors.primary.contrastText,
        cursor: "pointer",
        fontSize: "0.875rem",
        fontWeight: 500,
        padding: `calc(${theme.vars.spacing.unit} * 1.5) calc(${theme.vars.spacing.unit} * 3)`,
        width: "100%",
        transition: "all 0.2s"
      },
      loadMoreButtonDisabled: {
        backgroundColor: theme.vars.colors.text.secondary,
        cursor: "not-allowed",
        opacity: 0.6
      },
      errorMargin: {
        marginTop: `calc(${theme.vars.spacing.unit} * 2)`
      },
      loadMoreMargin: {
        marginTop: `calc(${theme.vars.spacing.unit} * 3)`
      },
      popupContent: {
        padding: theme.vars.spacing.unit
      }
    }),
    [theme, colorScheme]
  );
};
var BaseOrganizationList_default = BaseOrganizationList;

// src/components/presentation/OrganizationList/OrganizationList.tsx
var import_jsx_runtime90 = require("react/jsx-runtime");
var OrganizationList = ({
  autoFetch = true,
  filter = "",
  limit = 10,
  onOrganizationSelect,
  recursive = false,
  ...baseProps
}) => {
  const { getAllOrganizations: getAllOrganizations2, error, isLoading, myOrganizations } = useOrganization_default();
  const [allOrganizations, setAllOrganizations] = (0, import_react59.useState)({
    organizations: []
  });
  (0, import_react59.useEffect)(() => {
    (async () => {
      setAllOrganizations(await getAllOrganizations2());
    })();
  }, []);
  return /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(
    BaseOrganizationList_default,
    {
      allOrganizations,
      myOrganizations,
      error,
      isLoading,
      onOrganizationSelect,
      ...baseProps
    }
  );
};
var OrganizationList_default = OrganizationList;

// src/components/primitives/Icons/BuildingAlt.tsx
var import_jsx_runtime91 = require("react/jsx-runtime");
var BuildingAlt = ({ color = "currentColor", height = 24, width = 24 }) => /* @__PURE__ */ (0, import_jsx_runtime91.jsxs)(
  "svg",
  {
    width,
    height,
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    stroke: "currentColor",
    strokeWidth: "2",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime91.jsx)("path", { d: "M6 22V4a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v18Z" }),
      /* @__PURE__ */ (0, import_jsx_runtime91.jsx)("path", { d: "M6 12H4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h2" }),
      /* @__PURE__ */ (0, import_jsx_runtime91.jsx)("path", { d: "M18 9h2a2 2 0 0 1 2 2v9a2 2 0 0 1-2 2h-2" }),
      /* @__PURE__ */ (0, import_jsx_runtime91.jsx)("path", { d: "M10 6h4" }),
      /* @__PURE__ */ (0, import_jsx_runtime91.jsx)("path", { d: "M10 10h4" }),
      /* @__PURE__ */ (0, import_jsx_runtime91.jsx)("path", { d: "M10 14h4" }),
      /* @__PURE__ */ (0, import_jsx_runtime91.jsx)("path", { d: "M10 18h4" })
    ]
  }
);
BuildingAlt.displayName = "BuildingAlt";
var BuildingAlt_default = BuildingAlt;

// src/components/presentation/OrganizationSwitcher/OrganizationSwitcher.tsx
var import_jsx_runtime92 = require("react/jsx-runtime");
var OrganizationSwitcher = ({
  currentOrganization: propCurrentOrganization,
  fallback = null,
  onOrganizationSwitch: propOnOrganizationSwitch,
  organizations: propOrganizations,
  ...props
}) => {
  const { isSignedIn } = useAsgardeo_default();
  const {
    currentOrganization: contextCurrentOrganization,
    myOrganizations: contextOrganizations,
    switchOrganization,
    isLoading,
    error
  } = useOrganization_default();
  const [isCreateOrgOpen, setIsCreateOrgOpen] = (0, import_react60.useState)(false);
  const [isProfileOpen, setIsProfileOpen] = (0, import_react60.useState)(false);
  const [isOrganizationListOpen, setIsOrganizationListOpen] = (0, import_react60.useState)(false);
  const { t } = useTranslation_default();
  if (!isSignedIn && fallback) {
    return fallback;
  }
  if (!isSignedIn) {
    return /* @__PURE__ */ (0, import_jsx_runtime92.jsx)(import_jsx_runtime92.Fragment, {});
  }
  const organizations = propOrganizations || contextOrganizations || [];
  const currentOrganization = propCurrentOrganization || contextCurrentOrganization;
  const onOrganizationSwitch = propOnOrganizationSwitch || switchOrganization;
  const handleManageOrganizations = () => {
    setIsOrganizationListOpen(true);
  };
  const handleManageOrganization = () => {
    setIsProfileOpen(true);
  };
  const defaultMenuItems = [];
  if (currentOrganization) {
    defaultMenuItems.push({
      icon: /* @__PURE__ */ (0, import_jsx_runtime92.jsx)(BuildingAlt_default, {}),
      label: t("organization.switcher.manage.organizations"),
      onClick: handleManageOrganizations
    });
  }
  defaultMenuItems.push({
    icon: /* @__PURE__ */ (0, import_jsx_runtime92.jsx)("svg", { width: "16", height: "16", viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: "2", children: /* @__PURE__ */ (0, import_jsx_runtime92.jsx)("path", { d: "M12 5v14m-7-7h14" }) }),
    label: t("organization.switcher.create.organization"),
    onClick: () => setIsCreateOrgOpen(true)
  });
  const menuItems = props.menuItems ? [...defaultMenuItems, ...props.menuItems] : defaultMenuItems;
  return /* @__PURE__ */ (0, import_jsx_runtime92.jsxs)(import_jsx_runtime92.Fragment, { children: [
    /* @__PURE__ */ (0, import_jsx_runtime92.jsx)(
      BaseOrganizationSwitcher_default,
      {
        organizations,
        currentOrganization,
        onOrganizationSwitch,
        loading: isLoading,
        error,
        menuItems,
        onManageProfile: handleManageOrganization,
        ...props
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime92.jsx)(
      CreateOrganization,
      {
        mode: "popup",
        open: isCreateOrgOpen,
        onOpenChange: setIsCreateOrgOpen,
        onSuccess: (org) => {
          if (org && onOrganizationSwitch) {
            onOrganizationSwitch(org);
          }
          setIsCreateOrgOpen(false);
        }
      }
    ),
    currentOrganization && /* @__PURE__ */ (0, import_jsx_runtime92.jsx)(
      OrganizationProfile_default,
      {
        organizationId: currentOrganization.id,
        mode: "popup",
        open: isProfileOpen,
        onOpenChange: setIsProfileOpen,
        cardLayout: true,
        loadingFallback: /* @__PURE__ */ (0, import_jsx_runtime92.jsx)("div", { children: t("organization.profile.loading") }),
        errorFallback: /* @__PURE__ */ (0, import_jsx_runtime92.jsx)("div", { children: t("organization.profile.error") })
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime92.jsx)(
      OrganizationList_default,
      {
        mode: "popup",
        open: isOrganizationListOpen,
        onOpenChange: setIsOrganizationListOpen,
        title: t("organization.switcher.manage.organizations"),
        onOrganizationSelect: (organization) => {
          if (onOrganizationSwitch) {
            onOrganizationSwitch(organization);
          }
          setIsOrganizationListOpen(false);
        }
      }
    )
  ] });
};
var OrganizationSwitcher_default = OrganizationSwitcher;
//# sourceMappingURL=index.js.map
